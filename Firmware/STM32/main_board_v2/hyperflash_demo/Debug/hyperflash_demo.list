
hyperflash_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e060  08000270  08000270  00010270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800e2d0  0800e2d0  0001e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3d0  0800e3d0  0001e3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3d8  0800e3d8  0001e3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e3dc  0800e3dc  0001e3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800e3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000078c  20000d0c  0800f0e9  00020d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001498  0800f0e9  00021498  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020d3f  2**0
                  CONTENTS, READONLY
 11 .debug_info   000314a7  00000000  00000000  00020d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005273  00000000  00000000  00052229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002888  00000000  00000000  000574a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f93  00000000  00000000  00059d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045004  00000000  00000000  0005bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035da6  00000000  00000000  000a0cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a27aa  00000000  00000000  000d6a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b1dc  00000000  00000000  00279210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  002843ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	20000d0c 	.word	0x20000d0c
 800028c:	00000000 	.word	0x00000000
 8000290:	0800e2b8 	.word	0x0800e2b8

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	20000d10 	.word	0x20000d10
 80002ac:	0800e2b8 	.word	0x0800e2b8

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b982 	b.w	8000bd8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d146      	bne.n	800098a <__udivmoddi4+0x9e>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d95e      	bls.n	80009c0 <__udivmoddi4+0xd4>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	409c      	lsls	r4, r3
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	4317      	orrs	r7, r2
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	0c22      	lsrs	r2, r4, #16
 8000924:	fbb7 f1fe 	udiv	r1, r7, lr
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	fb01 f005 	mul.w	r0, r1, r5
 8000930:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000934:	4290      	cmp	r0, r2
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x5e>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x5c>
 8000942:	4290      	cmp	r0, r2
 8000944:	f200 8134 	bhi.w	8000bb0 <__udivmoddi4+0x2c4>
 8000948:	4639      	mov	r1, r7
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	b2a4      	uxth	r4, r4
 800094e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000952:	fb0e 2210 	mls	r2, lr, r0, r2
 8000956:	fb00 f505 	mul.w	r5, r0, r5
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	42a5      	cmp	r5, r4
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x88>
 8000962:	eb1c 0404 	adds.w	r4, ip, r4
 8000966:	f100 32ff 	add.w	r2, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x86>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f200 8119 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000972:	4610      	mov	r0, r2
 8000974:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	2100      	movs	r1, #0
 800097c:	b11e      	cbz	r6, 8000986 <__udivmoddi4+0x9a>
 800097e:	40dc      	lsrs	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	e9c6 4300 	strd	r4, r3, [r6]
 8000986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800098a:	428b      	cmp	r3, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0xb4>
 800098e:	2e00      	cmp	r6, #0
 8000990:	f000 80fc 	beq.w	8000b8c <__udivmoddi4+0x2a0>
 8000994:	2100      	movs	r1, #0
 8000996:	e9c6 0500 	strd	r0, r5, [r6]
 800099a:	4608      	mov	r0, r1
 800099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a0:	fab3 f183 	clz	r1, r3
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d14c      	bne.n	8000a42 <__udivmoddi4+0x156>
 80009a8:	42ab      	cmp	r3, r5
 80009aa:	f0c0 80f2 	bcc.w	8000b92 <__udivmoddi4+0x2a6>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f240 80ef 	bls.w	8000b92 <__udivmoddi4+0x2a6>
 80009b4:	4608      	mov	r0, r1
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d0e5      	beq.n	8000986 <__udivmoddi4+0x9a>
 80009ba:	e9c6 4700 	strd	r4, r7, [r6]
 80009be:	e7e2      	b.n	8000986 <__udivmoddi4+0x9a>
 80009c0:	b902      	cbnz	r2, 80009c4 <__udivmoddi4+0xd8>
 80009c2:	deff      	udf	#255	; 0xff
 80009c4:	fab2 f382 	clz	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 809f 	bne.w	8000b0c <__udivmoddi4+0x220>
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009d4:	fa1f f78c 	uxth.w	r7, ip
 80009d8:	2101      	movs	r1, #1
 80009da:	fbb2 f5fe 	udiv	r5, r2, lr
 80009de:	fb0e 2015 	mls	r0, lr, r5, r2
 80009e2:	0c22      	lsrs	r2, r4, #16
 80009e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009e8:	fb07 f005 	mul.w	r0, r7, r5
 80009ec:	4290      	cmp	r0, r2
 80009ee:	d90f      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009f0:	eb1c 0202 	adds.w	r2, ip, r2
 80009f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80009f8:	bf2c      	ite	cs
 80009fa:	f04f 0901 	movcs.w	r9, #1
 80009fe:	f04f 0900 	movcc.w	r9, #0
 8000a02:	4290      	cmp	r0, r2
 8000a04:	d903      	bls.n	8000a0e <__udivmoddi4+0x122>
 8000a06:	f1b9 0f00 	cmp.w	r9, #0
 8000a0a:	f000 80ce 	beq.w	8000baa <__udivmoddi4+0x2be>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a18:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a1c:	fb00 f707 	mul.w	r7, r0, r7
 8000a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a24:	42a7      	cmp	r7, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	42a7      	cmp	r7, r4
 8000a34:	f200 80b3 	bhi.w	8000b9e <__udivmoddi4+0x2b2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a40:	e79c      	b.n	800097c <__udivmoddi4+0x90>
 8000a42:	f1c1 0420 	rsb	r4, r1, #32
 8000a46:	408b      	lsls	r3, r1
 8000a48:	fa05 fc01 	lsl.w	ip, r5, r1
 8000a4c:	fa22 f704 	lsr.w	r7, r2, r4
 8000a50:	40e5      	lsrs	r5, r4
 8000a52:	408a      	lsls	r2, r1
 8000a54:	431f      	orrs	r7, r3
 8000a56:	fa20 f304 	lsr.w	r3, r0, r4
 8000a5a:	4088      	lsls	r0, r1
 8000a5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a6c:	fbb5 fef8 	udiv	lr, r5, r8
 8000a70:	fb08 551e 	mls	r5, r8, lr, r5
 8000a74:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000a78:	fb0e f90c 	mul.w	r9, lr, ip
 8000a7c:	45a9      	cmp	r9, r5
 8000a7e:	d90e      	bls.n	8000a9e <__udivmoddi4+0x1b2>
 8000a80:	197d      	adds	r5, r7, r5
 8000a82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a86:	bf2c      	ite	cs
 8000a88:	f04f 0b01 	movcs.w	fp, #1
 8000a8c:	f04f 0b00 	movcc.w	fp, #0
 8000a90:	45a9      	cmp	r9, r5
 8000a92:	d903      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a94:	f1bb 0f00 	cmp.w	fp, #0
 8000a98:	f000 808d 	beq.w	8000bb6 <__udivmoddi4+0x2ca>
 8000a9c:	46d6      	mov	lr, sl
 8000a9e:	eba5 0509 	sub.w	r5, r5, r9
 8000aa2:	fa1f f983 	uxth.w	r9, r3
 8000aa6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000aaa:	fb08 5513 	mls	r5, r8, r3, r5
 8000aae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ab6:	45ac      	cmp	ip, r5
 8000ab8:	d906      	bls.n	8000ac8 <__udivmoddi4+0x1dc>
 8000aba:	197d      	adds	r5, r7, r5
 8000abc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac0:	d201      	bcs.n	8000ac6 <__udivmoddi4+0x1da>
 8000ac2:	45ac      	cmp	ip, r5
 8000ac4:	d87e      	bhi.n	8000bc4 <__udivmoddi4+0x2d8>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000acc:	eba5 050c 	sub.w	r5, r5, ip
 8000ad0:	fba3 9802 	umull	r9, r8, r3, r2
 8000ad4:	4545      	cmp	r5, r8
 8000ad6:	46ce      	mov	lr, r9
 8000ad8:	46c4      	mov	ip, r8
 8000ada:	d302      	bcc.n	8000ae2 <__udivmoddi4+0x1f6>
 8000adc:	d106      	bne.n	8000aec <__udivmoddi4+0x200>
 8000ade:	4548      	cmp	r0, r9
 8000ae0:	d204      	bcs.n	8000aec <__udivmoddi4+0x200>
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d06f      	beq.n	8000bd0 <__udivmoddi4+0x2e4>
 8000af0:	ebb0 020e 	subs.w	r2, r0, lr
 8000af4:	eb65 050c 	sbc.w	r5, r5, ip
 8000af8:	40ca      	lsrs	r2, r1
 8000afa:	fa05 f404 	lsl.w	r4, r5, r4
 8000afe:	40cd      	lsrs	r5, r1
 8000b00:	4618      	mov	r0, r3
 8000b02:	4314      	orrs	r4, r2
 8000b04:	2100      	movs	r1, #0
 8000b06:	e9c6 4500 	strd	r4, r5, [r6]
 8000b0a:	e73c      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b10:	f1c3 0220 	rsb	r2, r3, #32
 8000b14:	4099      	lsls	r1, r3
 8000b16:	409c      	lsls	r4, r3
 8000b18:	40d5      	lsrs	r5, r2
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b22:	fa1f f78c 	uxth.w	r7, ip
 8000b26:	fbb5 f0fe 	udiv	r0, r5, lr
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f507 	mul.w	r5, r0, r7
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	d90e      	bls.n	8000b5c <__udivmoddi4+0x270>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b46:	bf2c      	ite	cs
 8000b48:	f04f 0901 	movcs.w	r9, #1
 8000b4c:	f04f 0900 	movcc.w	r9, #0
 8000b50:	428d      	cmp	r5, r1
 8000b52:	d902      	bls.n	8000b5a <__udivmoddi4+0x26e>
 8000b54:	f1b9 0f00 	cmp.w	r9, #0
 8000b58:	d031      	beq.n	8000bbe <__udivmoddi4+0x2d2>
 8000b5a:	4640      	mov	r0, r8
 8000b5c:	1b49      	subs	r1, r1, r5
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	fbb1 f5fe 	udiv	r5, r1, lr
 8000b64:	fb0e 1115 	mls	r1, lr, r5, r1
 8000b68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b6c:	fb05 f107 	mul.w	r1, r5, r7
 8000b70:	4291      	cmp	r1, r2
 8000b72:	d907      	bls.n	8000b84 <__udivmoddi4+0x298>
 8000b74:	eb1c 0202 	adds.w	r2, ip, r2
 8000b78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b7e:	4291      	cmp	r1, r2
 8000b80:	d823      	bhi.n	8000bca <__udivmoddi4+0x2de>
 8000b82:	4645      	mov	r5, r8
 8000b84:	1a52      	subs	r2, r2, r1
 8000b86:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b8a:	e726      	b.n	80009da <__udivmoddi4+0xee>
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	4630      	mov	r0, r6
 8000b90:	e6f9      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	e70b      	b.n	80009b6 <__udivmoddi4+0xca>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e74a      	b.n	8000a3a <__udivmoddi4+0x14e>
 8000ba4:	4464      	add	r4, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	e6e4      	b.n	8000974 <__udivmoddi4+0x88>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	e72f      	b.n	8000a10 <__udivmoddi4+0x124>
 8000bb0:	3902      	subs	r1, #2
 8000bb2:	4462      	add	r2, ip
 8000bb4:	e6c9      	b.n	800094a <__udivmoddi4+0x5e>
 8000bb6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	e76f      	b.n	8000a9e <__udivmoddi4+0x1b2>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4461      	add	r1, ip
 8000bc2:	e7cb      	b.n	8000b5c <__udivmoddi4+0x270>
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	443d      	add	r5, r7
 8000bc8:	e77e      	b.n	8000ac8 <__udivmoddi4+0x1dc>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	e7d9      	b.n	8000b84 <__udivmoddi4+0x298>
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e6d7      	b.n	8000986 <__udivmoddi4+0x9a>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <ADP5360_Init>:
 */

#include "ADP5360.h"


ADP5360_StatusTypeDef ADP5360_Init(ADP5360_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	601a      	str	r2, [r3, #0]

	/* Set default values, can be changed with functions if needed */
	dev->originalBatteryCapacity = ADP5360_DEFAULT_BATTERY_CAPACITY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bf6:	811a      	strh	r2, [r3, #8]
	dev->batterySOCACMOverflows = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	729a      	strb	r2, [r3, #10]
	dev->buckVoltage = ADP5360_DEFAULT_BUCK_VOLTAGE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000c04:	821a      	strh	r2, [r3, #16]
	dev->buckBoostVoltage = ADP5360_DEFAULT_BUCK_BOOST_VOLTAGE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000c0c:	825a      	strh	r2, [r3, #18]
	dev->chargingEnabled = false;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	711a      	strb	r2, [r3, #4]
	dev->buckEnabled = true;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	751a      	strb	r2, [r3, #20]
	dev->buckBoostEnabled = false;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	755a      	strb	r2, [r3, #21]


	/* Check the manufacturer and model IDs */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_MANUFACTURER_AND_MODEL_ID, &regData);
 8000c20:	f107 030e 	add.w	r3, r7, #14
 8000c24:	461a      	mov	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f9fb 	bl	8001024 <ADP5360_ReadRegister>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <ADP5360_Init+0x60>
		return status;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	e04b      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	if (regData != ((ADP5360_MANUFACTURER_ID << 4) | (ADP5360_MODEL_ID))){
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d003      	beq.n	8000c4a <ADP5360_Init+0x6e>
		status = ADP5360_ERROR_WRONG_ID;
 8000c42:	2304      	movs	r3, #4
 8000c44:	73fb      	strb	r3, [r7, #15]
		return status;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	e044      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Turn off the buck boost converter */
	status = ADP5360_DisableBuckBoost(dev);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f991 	bl	8000f72 <ADP5360_DisableBuckBoost>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <ADP5360_Init+0x82>
		return status;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	e03a      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Write the battery capacity */
	status = ADP5360_SetBatteryCapacity(dev, dev->originalBatteryCapacity);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	891b      	ldrh	r3, [r3, #8]
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f913 	bl	8000e90 <ADP5360_SetBatteryCapacity>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <ADP5360_Init+0x9c>
		return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	e02d      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Enable interrupts */
	status = ADP5360_EnableInterrupts(dev);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f9a9 	bl	8000fd0 <ADP5360_EnableInterrupts>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <ADP5360_Init+0xb0>
		return status;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	e023      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Set charging on/off */
	status = ADP5360_UpdateCharging(dev);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f883 	bl	8000d98 <ADP5360_UpdateCharging>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ADP5360_Init+0xc4>
		return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	e019      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the battery charge */
	status = ADP5360_GetBatteryCharge(dev);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f947 	bl	8000f34 <ADP5360_GetBatteryCharge>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ADP5360_Init+0xd8>
		return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	e00f      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the charging status/mode */
	status = ADP5360_GetChargingStatus(dev);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f8ac 	bl	8000e12 <ADP5360_GetChargingStatus>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <ADP5360_Init+0xec>
		return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	e005      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the battery charger status/mode */
	status = ADP5360_GetBatteryChargerStatus(dev);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f8c1 	bl	8000e50 <ADP5360_GetBatteryChargerStatus>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]

	return status;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <ADP5360_EnableCharging>:

ADP5360_StatusTypeDef ADP5360_EnableCharging(ADP5360_HandleTypeDef *dev){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000ce8:	f107 030e 	add.w	r3, r7, #14
 8000cec:	461a      	mov	r2, r3
 8000cee:	2107      	movs	r1, #7
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f997 	bl	8001024 <ADP5360_ReadRegister>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <ADP5360_EnableCharging+0x28>
		return status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <ADP5360_EnableCharging+0x56>
	}

	/* Set the "EN_LDO" and "EN_CHG" bits high */
	regData = regData | ADP5360_BIT_EN_LDO | ADP5360_BIT_EN_CHG;
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f043 0309 	orr.w	r3, r3, #9
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d0e:	f107 030e 	add.w	r3, r7, #14
 8000d12:	461a      	mov	r2, r3
 8000d14:	2107      	movs	r1, #7
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f99f 	bl	800105a <ADP5360_WriteRegister>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <ADP5360_EnableCharging+0x4e>
		return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e003      	b.n	8000d32 <ADP5360_EnableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = true;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]

	return status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <ADP5360_DisableCharging>:


ADP5360_StatusTypeDef ADP5360_DisableCharging(ADP5360_HandleTypeDef *dev){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d46:	f107 030e 	add.w	r3, r7, #14
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f968 	bl	8001024 <ADP5360_ReadRegister>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <ADP5360_DisableCharging+0x28>
		return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	e016      	b.n	8000d90 <ADP5360_DisableCharging+0x56>
	}

	/* Set the "EN_CHG" bit low */
	regData &= ~ADP5360_BIT_EN_CHG;
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d6c:	f107 030e 	add.w	r3, r7, #14
 8000d70:	461a      	mov	r2, r3
 8000d72:	2107      	movs	r1, #7
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f970 	bl	800105a <ADP5360_WriteRegister>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <ADP5360_DisableCharging+0x4e>
		return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	e003      	b.n	8000d90 <ADP5360_DisableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = false;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	711a      	strb	r2, [r3, #4]

	return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <ADP5360_UpdateCharging>:

ADP5360_StatusTypeDef ADP5360_UpdateCharging(ADP5360_HandleTypeDef *dev){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_PGOOD_STATUS" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_PGOOD_STATUS, &regData);
 8000da4:	f107 030e 	add.w	r3, r7, #14
 8000da8:	461a      	mov	r2, r3
 8000daa:	212f      	movs	r1, #47	; 0x2f
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f939 	bl	8001024 <ADP5360_ReadRegister>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <ADP5360_UpdateCharging+0x28>
		return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	e024      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
	}

	/* If VBUS present, enable charging */
	if (regData & ADP5360_BIT_VBUSOK){
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d010      	beq.n	8000dec <ADP5360_UpdateCharging+0x54>
		if (dev->chargingEnabled == false){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d017      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
			status = ADP5360_EnableCharging(dev);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff7f 	bl	8000cdc <ADP5360_EnableCharging>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00f      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
				return status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	e00e      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
			}
		}
	}
	/* If VBUS absent, disable charging */
	else{
		if (dev->chargingEnabled == true){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d009      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
			status = ADP5360_DisableCharging(dev);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffa0 	bl	8000d3a <ADP5360_DisableCharging>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
				return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	e000      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
			}
		}
	}

	return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <ADP5360_GetChargingStatus>:

ADP5360_StatusTypeDef ADP5360_GetChargingStatus(ADP5360_HandleTypeDef *dev){
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS1" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS1, &regData);
 8000e1e:	f107 030e 	add.w	r3, r7, #14
 8000e22:	461a      	mov	r2, r3
 8000e24:	2108      	movs	r1, #8
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f8fc 	bl	8001024 <ADP5360_ReadRegister>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <ADP5360_GetChargingStatus+0x28>
		return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	e006      	b.n	8000e48 <ADP5360_GetChargingStatus+0x36>
	}

	/* Extract the "CHARGE_STATUS" bits and update the device struct */
	dev->chargeStatus = regData & ADP5360_BITS_CHARGER_STATUS;
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	715a      	strb	r2, [r3, #5]

	return status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <ADP5360_GetBatteryChargerStatus>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_GetBatteryChargerStatus(ADP5360_HandleTypeDef *dev){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS2" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS2, &regData);
 8000e5c:	f107 030e 	add.w	r3, r7, #14
 8000e60:	461a      	mov	r2, r3
 8000e62:	2109      	movs	r1, #9
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f8dd 	bl	8001024 <ADP5360_ReadRegister>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <ADP5360_GetBatteryChargerStatus+0x28>
		return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	e006      	b.n	8000e86 <ADP5360_GetBatteryChargerStatus+0x36>
	}

	/* Extract the "BAT_CHG_STATUS" bits and update the device struct */
	dev->batteryChargerStatus = regData & ADP5360_BITS_BAT_CHG_STATUS;
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	719a      	strb	r2, [r3, #6]

	return status;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <ADP5360_SetBatteryCapacity>:


ADP5360_StatusTypeDef ADP5360_SetBatteryCapacity(ADP5360_HandleTypeDef *dev, uint16_t originalBatteryCapacity){
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

	/* Update the device struct */
	dev->originalBatteryCapacity = originalBatteryCapacity;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	811a      	strh	r2, [r3, #8]
	dev->effectiveBatteryCapacity = (dev->originalBatteryCapacity * (1.0 - (ADP5360_BATTERY_DEGRADATION_PER_OVERFLOW * dev->batterySOCACMOverflows)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	891b      	ldrh	r3, [r3, #8]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc7c 	bl	80007a8 <__aeabi_i2d>
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	460d      	mov	r5, r1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc75 	bl	80007a8 <__aeabi_i2d>
 8000ebe:	a31b      	add	r3, pc, #108	; (adr r3, 8000f2c <ADP5360_SetBatteryCapacity+0x9c>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff f9f4 	bl	80002b0 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	4915      	ldr	r1, [pc, #84]	; (8000f28 <ADP5360_SetBatteryCapacity+0x98>)
 8000ed2:	f7ff fb1b 	bl	800050c <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff f9e7 	bl	80002b0 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fcc7 	bl	800087c <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	819a      	strh	r2, [r3, #12]

	/* Convert  BAT_CAP (p. 46) */
	uint8_t regData = dev->effectiveBatteryCapacity / 2;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	899b      	ldrh	r3, [r3, #12]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BAT_CAP" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BAT_CAP, &regData);
 8000f02:	f107 030e 	add.w	r3, r7, #14
 8000f06:	461a      	mov	r2, r3
 8000f08:	2120      	movs	r1, #32
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8a5 	bl	800105a <ADP5360_WriteRegister>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <ADP5360_SetBatteryCapacity+0x8e>
		return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	e000      	b.n	8000f20 <ADP5360_SetBatteryCapacity+0x90>
	}

	return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bdb0      	pop	{r4, r5, r7, pc}
 8000f28:	3ff00000 	.word	0x3ff00000
 8000f2c:	eb851eb8 	.word	0xeb851eb8
 8000f30:	3f8eb851 	.word	0x3f8eb851

08000f34 <ADP5360_GetBatteryCharge>:

	return status;

}

ADP5360_StatusTypeDef ADP5360_GetBatteryCharge(ADP5360_HandleTypeDef *dev){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BAT_SOC" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BAT_SOC, &regData);
 8000f40:	f107 030e 	add.w	r3, r7, #14
 8000f44:	461a      	mov	r2, r3
 8000f46:	2121      	movs	r1, #33	; 0x21
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f86b 	bl	8001024 <ADP5360_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <ADP5360_GetBatteryCharge+0x28>
		return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	e006      	b.n	8000f6a <ADP5360_GetBatteryCharge+0x36>
	}

	/* Extract "BAT_SOC" bits and update the device struct */
	dev->batteryChargePercentage = regData & ADP5360_BITS_BAT_SOC;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	71da      	strb	r2, [r3, #7]

	return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <ADP5360_DisableBuckBoost>:
	dev->buckBoostEnabled = true;

	return status;
}

ADP5360_StatusTypeDef ADP5360_DisableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f7e:	f107 030e 	add.w	r3, r7, #14
 8000f82:	461a      	mov	r2, r3
 8000f84:	212b      	movs	r1, #43	; 0x2b
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f84c 	bl	8001024 <ADP5360_ReadRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <ADP5360_DisableBuckBoost+0x28>
		return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	e016      	b.n	8000fc8 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit low */
	regData &= ~ADP5360_BIT_EN_BUCKBST;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000fa4:	f107 030e 	add.w	r3, r7, #14
 8000fa8:	461a      	mov	r2, r3
 8000faa:	212b      	movs	r1, #43	; 0x2b
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f854 	bl	800105a <ADP5360_WriteRegister>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <ADP5360_DisableBuckBoost+0x4e>
		return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	e003      	b.n	8000fc8 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = false;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	755a      	strb	r2, [r3, #21]

	return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <ADP5360_EnableInterrupts>:

ADP5360_StatusTypeDef ADP5360_EnableInterrupts(ADP5360_HandleTypeDef *dev){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73bb      	strb	r3, [r7, #14]

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE1" */
	regData = ADP5360_VBUS_INT | ADP5360_CHG_INT | ADP5360_BAT_INT | ADP5360_THR_INT | ADP5360_BATPRO_INT | ADP5360_ADPICHG_INT | ADP5360_SOCACM_INT | ADP5360_SOCLOW_INT;
 8000fe0:	23c7      	movs	r3, #199	; 0xc7
 8000fe2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE1" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE1, &regData);
 8000fe4:	f107 030e 	add.w	r3, r7, #14
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2132      	movs	r1, #50	; 0x32
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f834 	bl	800105a <ADP5360_WriteRegister>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <ADP5360_EnableInterrupts+0x30>
		return status;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	e00d      	b.n	800101c <ADP5360_EnableInterrupts+0x4c>
	}

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE2" */
	regData = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	73bb      	strb	r3, [r7, #14]
	regData = ADP5360_BUCKBSTPG_INT | ADP5360_BUCKPG_INT | ADP5360_WD_INT | ADP5360_MR_INT;
 8001004:	2300      	movs	r3, #0
 8001006:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE2" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE2, &regData);
 8001008:	f107 030e 	add.w	r3, r7, #14
 800100c:	461a      	mov	r2, r3
 800100e:	2133      	movs	r1, #51	; 0x33
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f822 	bl	800105a <ADP5360_WriteRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]

	return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <ADP5360_ReadRegister>:
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);

	return status;
}

ADP5360_StatusTypeDef ADP5360_ReadRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	460b      	mov	r3, r1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	b29a      	uxth	r2, r3
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	218c      	movs	r1, #140	; 0x8c
 800104c:	f004 fc58 	bl	8005900 <HAL_I2C_Mem_Read>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <ADP5360_WriteRegister>:

ADP5360_StatusTypeDef ADP5360_WriteRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 800105a:	b580      	push	{r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af04      	add	r7, sp, #16
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	460b      	mov	r3, r1
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	218c      	movs	r1, #140	; 0x8c
 8001082:	f004 fb29 	bl	80056d8 <HAL_I2C_Mem_Write>
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f002 fb02 	bl	800369c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f836 	bl	8001108 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800109c:	f000 f89e 	bl	80011dc <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f000 ff06 	bl	8001eb0 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80010a4:	f000 f918 	bl	80012d8 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80010a8:	f000 f92c 	bl	8001304 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80010ac:	f000 fbde 	bl	800186c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80010b0:	f000 fc0e 	bl	80018d0 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80010b4:	f000 fd74 	bl	8001ba0 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80010b8:	f000 f8ec 	bl	8001294 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010bc:	f000 f938 	bl	8001330 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80010c0:	f000 f974 	bl	80013ac <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80010c4:	f000 fa6e 	bl	80015a4 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80010c8:	f000 fabc 	bl	8001644 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80010cc:	f000 fce4 	bl	8001a98 <MX_LTDC_Init>
  MX_RTC_Init();
 80010d0:	f000 fdfe 	bl	8001cd0 <MX_RTC_Init>
  MX_ADF1_Init();
 80010d4:	f000 f890 	bl	80011f8 <MX_ADF1_Init>
  MX_I2C1_Init();
 80010d8:	f000 fac8 	bl	800166c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010dc:	f000 fb06 	bl	80016ec <MX_I2C2_Init>
  MX_I2C4_Init();
 80010e0:	f000 fb44 	bl	800176c <MX_I2C4_Init>
  MX_I2C6_Init();
 80010e4:	f000 fb82 	bl	80017ec <MX_I2C6_Init>
  MX_USART1_UART_Init();
 80010e8:	f000 fc3e 	bl	8001968 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80010ec:	f000 fc88 	bl	8001a00 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80010f0:	f000 fe70 	bl	8001dd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADP5360_Init(&hadp5360, &hi2c2);
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <main+0x70>)
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <main+0x74>)
 80010f8:	f7ff fd70 	bl	8000bdc <ADP5360_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x6c>
 80010fe:	bf00      	nop
 8001100:	20000f90 	.word	0x20000f90
 8001104:	2000140c 	.word	0x2000140c

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09e      	sub	sp, #120	; 0x78
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	2260      	movs	r2, #96	; 0x60
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00d f8a1 	bl	800e25e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001130:	f006 ff88 	bl	8008044 <HAL_PWREx_ControlVoltageScaling>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800113a:	f001 f943 	bl	80023c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800113e:	f006 ff71 	bl	8008024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemClock_Config+0xd0>)
 8001144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <SystemClock_Config+0xd0>)
 800114a:	f023 0318 	bic.w	r3, r3, #24
 800114e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001152:	2305      	movs	r3, #5
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800115c:	2381      	movs	r3, #129	; 0x81
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001164:	2303      	movs	r3, #3
 8001166:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001170:	230a      	movs	r3, #10
 8001172:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001180:	230c      	movs	r3, #12
 8001182:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f007 f845 	bl	800821c <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001198:	f001 f914 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	231f      	movs	r3, #31
 800119e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2303      	movs	r3, #3
 80011a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	2104      	movs	r1, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 ff0b 	bl	8008fd4 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c4:	f001 f8fe 	bl	80023c4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011c8:	f008 fa86 	bl	80096d8 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80011cc:	f00b fa02 	bl	800c5d4 <HAL_RCCEx_EnableLSECSS>
}
 80011d0:	bf00      	nop
 80011d2:	3778      	adds	r7, #120	; 0x78
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	46020c00 	.word	0x46020c00

080011dc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80011e0:	f007 f80c 	bl	80081fc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80011e4:	2002      	movs	r0, #2
 80011e6:	f006 ffb9 	bl	800815c <HAL_PWREx_ConfigSupply>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80011f0:	f001 f8e8 	bl	80023c4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_ADF1_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <MX_ADF1_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADF1_Init+0x90>)
 8001204:	2201      	movs	r2, #1
 8001206:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ADF1_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_ADF1_Init+0x90>)
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_ADF1_Init+0x90>)
 8001218:	2210      	movs	r2, #16
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADF1_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_ADF1_Init+0x90>)
 8001224:	2204      	movs	r2, #4
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_ADF1_Init+0x90>)
 800122a:	2201      	movs	r2, #1
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800122e:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_ADF1_Init+0x90>)
 8001230:	f005 fbca 	bl	80069c8 <HAL_MDF_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800123a:	f001 f8c3 	bl	80023c4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADF1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_ADF1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_ADF1_Init+0x98>)
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_ADF1_Init+0x98>)
 8001252:	2202      	movs	r2, #2
 8001254:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_ADF1_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_ADF1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_ADF1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_ADF1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_ADF1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MX_ADF1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <MX_ADF1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000d28 	.word	0x20000d28
 800128c:	46024080 	.word	0x46024080
 8001290:	20000d6c 	.word	0x20000d6c

08001294 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_CRC_Init+0x3c>)
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <MX_CRC_Init+0x40>)
 800129c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_CRC_Init+0x3c>)
 80012be:	f002 fb3f 	bl	8003940 <HAL_CRC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012c8:	f001 f87c 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000de8 	.word	0x20000de8
 80012d4:	40023000 	.word	0x40023000

080012d8 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_DCACHE1_Init+0x24>)
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <MX_DCACHE1_Init+0x28>)
 80012e0:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_DCACHE1_Init+0x24>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_DCACHE1_Init+0x24>)
 80012ea:	f002 fc1b 	bl	8003b24 <HAL_DCACHE_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80012f4:	f001 f866 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000e0c 	.word	0x20000e0c
 8001300:	40031400 	.word	0x40031400

08001304 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_DCACHE2_Init+0x24>)
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <MX_DCACHE2_Init+0x28>)
 800130c:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_DCACHE2_Init+0x24>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_DCACHE2_Init+0x24>)
 8001316:	f002 fc05 	bl	8003b24 <HAL_DCACHE_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8001320:	f001 f850 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000e38 	.word	0x20000e38
 800132c:	40031800 	.word	0x40031800

08001330 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MX_DMA2D_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_DMA2D_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001348:	f44f 7218 	mov.w	r2, #608	; 0x260
 800134c:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_DMA2D_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_DMA2D_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_DMA2D_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001380:	f002 fd20 	bl	8003dc4 <HAL_DMA2D_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800138a:	f001 f81b 	bl	80023c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800138e:	2101      	movs	r1, #1
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_DMA2D_Init+0x74>)
 8001392:	f002 fe89 	bl	80040a8 <HAL_DMA2D_ConfigLayer>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 800139c:	f001 f812 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000e64 	.word	0x20000e64
 80013a8:	4002b000 	.word	0x4002b000

080013ac <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ae      	sub	sp, #184	; 0xb8
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80013b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80013c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c8:	2224      	movs	r2, #36	; 0x24
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c ff46 	bl	800e25e <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80013d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	2234      	movs	r2, #52	; 0x34
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00c ff36 	bl	800e25e <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	222c      	movs	r2, #44	; 0x2c
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c ff30 	bl	800e25e <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001400:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <MX_DSIHOST_DSI_Init+0x1f4>)
 8001402:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 800140c:	2204      	movs	r2, #4
 800140e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001418:	2208      	movs	r2, #8
 800141a:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 800141c:	4b5f      	ldr	r3, [pc, #380]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8001422:	237d      	movs	r3, #125	; 0x7d
 8001424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8001428:	2304      	movs	r3, #4
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8001434:	2301      	movs	r3, #1
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001446:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800144a:	4619      	mov	r1, r3
 800144c:	4853      	ldr	r0, [pc, #332]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 800144e:	f002 ffd3 	bl	80043f8 <HAL_DSI_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8001458:	f000 ffb4 	bl	80023c4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001490:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001494:	4619      	mov	r1, r3
 8001496:	4841      	ldr	r0, [pc, #260]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001498:	f003 fc5e 	bl	8004d58 <HAL_DSI_ConfigHostTimeouts>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 80014a2:	f000 ff8f 	bl	80023c4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 80014a6:	230a      	movs	r3, #10
 80014a8:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 80014ba:	230a      	movs	r3, #10
 80014bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80014be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c2:	4619      	mov	r1, r3
 80014c4:	4835      	ldr	r0, [pc, #212]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c6:	f003 fbb1 	bl	8004c2c <HAL_DSI_ConfigPhyTimer>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80014d0:	f000 ff78 	bl	80023c4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80014d4:	2104      	movs	r1, #4
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014d8:	f003 fb80 	bl	8004bdc <HAL_DSI_ConfigFlowControl>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80014e2:	f000 ff6f 	bl	80023c4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014ea:	f003 f859 	bl	80045a0 <HAL_DSI_ConfigErrorMonitor>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 80014f4:	f000 ff66 	bl	80023c4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800152c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001530:	4619      	mov	r1, r3
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001534:	f003 faf4 	bl	8004b20 <HAL_DSI_ConfigCommand>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 800153e:	f000 ff41 	bl	80023c4 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8001542:	2305      	movs	r3, #5
 8001544:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8001546:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800154a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800154c:	2310      	movs	r3, #16
 800154e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001572:	f003 f9fe 	bl	8004972 <HAL_DSI_ConfigAdaptedCommandMode>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 800157c:	f000 ff22 	bl	80023c4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001584:	f003 f9ca 	bl	800491c <HAL_DSI_SetGenericVCID>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 800158e:	f000 ff19 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	37b8      	adds	r7, #184	; 0xb8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000ec4 	.word	0x20000ec4
 80015a0:	40016c00 	.word	0x40016c00

080015a4 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015aa:	4a24      	ldr	r2, [pc, #144]	; (800163c <MX_GFXMMU_Init+0x98>)
 80015ac:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_GFXMMU_Init+0x94>)
 80015f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_GFXMMU_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_GFXMMU_Init+0x94>)
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <MX_GFXMMU_Init+0x94>)
 800160e:	f003 fc69 	bl	8004ee4 <HAL_GFXMMU_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8001618:	f000 fed4 	bl	80023c4 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_GFXMMU_Init+0x9c>)
 800161e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001622:	2100      	movs	r1, #0
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_GFXMMU_Init+0x94>)
 8001626:	f003 fcdd 	bl	8004fe4 <HAL_GFXMMU_ConfigLut>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8001630:	f000 fec8 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000ee8 	.word	0x20000ee8
 800163c:	4002c000 	.word	0x4002c000
 8001640:	20000000 	.word	0x20000000

08001644 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_GPU2D_Init+0x20>)
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <MX_GPU2D_Init+0x24>)
 800164c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_GPU2D_Init+0x20>)
 8001650:	f003 ff3c 	bl	80054cc <HAL_GPU2D_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800165a:	f000 feb3 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000f30 	.word	0x20000f30
 8001668:	4002f000 	.word	0x4002f000

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <MX_I2C1_Init+0x7c>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a8:	f003 ff7b 	bl	80055a2 <HAL_I2C_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f000 fe87 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016ba:	f004 fcf3 	bl	80060a4 <HAL_I2CEx_ConfigAnalogFilter>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f000 fe7e 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016cc:	f004 fd35 	bl	800613a <HAL_I2CEx_ConfigDigitalFilter>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 fe75 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000f3c 	.word	0x20000f3c
 80016e4:	40005400 	.word	0x40005400
 80016e8:	30909dec 	.word	0x30909dec

080016ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_I2C2_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <MX_I2C2_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_I2C2_Init+0x74>)
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <MX_I2C2_Init+0x7c>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_I2C2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_I2C2_Init+0x74>)
 8001704:	2201      	movs	r2, #1
 8001706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_I2C2_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_I2C2_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C2_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_I2C2_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_I2C2_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <MX_I2C2_Init+0x74>)
 8001728:	f003 ff3b 	bl	80055a2 <HAL_I2C_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001732:	f000 fe47 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <MX_I2C2_Init+0x74>)
 800173a:	f004 fcb3 	bl	80060a4 <HAL_I2CEx_ConfigAnalogFilter>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 fe3e 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001748:	2100      	movs	r1, #0
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_I2C2_Init+0x74>)
 800174c:	f004 fcf5 	bl	800613a <HAL_I2CEx_ConfigDigitalFilter>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 fe35 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000f90 	.word	0x20000f90
 8001764:	40005800 	.word	0x40005800
 8001768:	30909dec 	.word	0x30909dec

0800176c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_I2C4_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <MX_I2C4_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_I2C4_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_I2C4_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_I2C4_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_I2C4_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_I2C4_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_I2C4_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C4_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C4_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C4_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <MX_I2C4_Init+0x74>)
 80017a8:	f003 fefb 	bl	80055a2 <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 fe07 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_I2C4_Init+0x74>)
 80017ba:	f004 fc73 	bl	80060a4 <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fdfe 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_I2C4_Init+0x74>)
 80017cc:	f004 fcb5 	bl	800613a <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fdf5 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000fe4 	.word	0x20000fe4
 80017e4:	40008400 	.word	0x40008400
 80017e8:	30909dec 	.word	0x30909dec

080017ec <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_I2C6_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <MX_I2C6_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_I2C6_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <MX_I2C6_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_I2C6_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_I2C6_Init+0x74>)
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_I2C6_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_I2C6_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_I2C6_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_I2C6_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_I2C6_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	; (8001860 <MX_I2C6_Init+0x74>)
 8001828:	f003 febb 	bl	80055a2 <HAL_I2C_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8001832:	f000 fdc7 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_I2C6_Init+0x74>)
 800183a:	f004 fc33 	bl	80060a4 <HAL_I2CEx_ConfigAnalogFilter>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001844:	f000 fdbe 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_I2C6_Init+0x74>)
 800184c:	f004 fc75 	bl	800613a <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8001856:	f000 fdb5 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001038 	.word	0x20001038
 8001864:	40009c00 	.word	0x40009c00
 8001868:	30909dec 	.word	0x30909dec

0800186c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001880:	f004 fcb8 	bl	80061f4 <HAL_ICACHE_Disable>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800188a:	f000 fd9b 	bl	80023c4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 800188e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001892:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8001894:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001898:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800189a:	2301      	movs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	2000      	movs	r0, #0
 80018ac:	f004 fcd2 	bl	8006254 <HAL_ICACHE_EnableRemapRegion>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80018b6:	f000 fd85 	bl	80023c4 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80018ba:	f004 fc8b 	bl	80061d4 <HAL_ICACHE_Enable>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 80018c4:	f000 fd7e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018d6:	4a22      	ldr	r2, [pc, #136]	; (8001960 <MX_LPUART1_UART_Init+0x90>)
 80018d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <MX_LPUART1_UART_Init+0x94>)
 80018de:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018f4:	220c      	movs	r2, #12
 80018f6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 80018fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 800190e:	2200      	movs	r2, #0
 8001910:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001914:	f00b ff6a 	bl	800d7ec <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800191e:	f000 fd51 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001922:	2100      	movs	r1, #0
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001926:	f00c fbb1 	bl	800e08c <HAL_UARTEx_SetTxFifoThreshold>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001930:	f000 fd48 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001938:	f00c fbe6 	bl	800e108 <HAL_UARTEx_SetRxFifoThreshold>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001942:	f000 fd3f 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_LPUART1_UART_Init+0x8c>)
 8001948:	f00c fb67 	bl	800e01a <HAL_UARTEx_DisableFifoMode>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001952:	f000 fd37 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000108c 	.word	0x2000108c
 8001960:	46002400 	.word	0x46002400
 8001964:	00033324 	.word	0x00033324

08001968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <MX_USART1_UART_Init+0x94>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019b2:	f00b ff1b 	bl	800d7ec <HAL_UART_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019bc:	f000 fd02 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c0:	2100      	movs	r1, #0
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019c4:	f00c fb62 	bl	800e08c <HAL_UARTEx_SetTxFifoThreshold>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019ce:	f000 fcf9 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019d6:	f00c fb97 	bl	800e108 <HAL_UARTEx_SetRxFifoThreshold>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019e0:	f000 fcf0 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_USART1_UART_Init+0x90>)
 80019e6:	f00c fb18 	bl	800e01a <HAL_UARTEx_DisableFifoMode>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019f0:	f000 fce8 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20001120 	.word	0x20001120
 80019fc:	40013800 	.word	0x40013800

08001a00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a06:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <MX_USART6_UART_Init+0x94>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a48:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a4a:	f00b fecf 	bl	800d7ec <HAL_UART_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001a54:	f000 fcb6 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a5c:	f00c fb16 	bl	800e08c <HAL_UARTEx_SetTxFifoThreshold>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001a66:	f000 fcad 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a6e:	f00c fb4b 	bl	800e108 <HAL_UARTEx_SetRxFifoThreshold>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001a78:	f000 fca4 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_USART6_UART_Init+0x90>)
 8001a7e:	f00c facc 	bl	800e01a <HAL_UARTEx_DisableFifoMode>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f000 fc9c 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200011b4 	.word	0x200011b4
 8001a94:	40006400 	.word	0x40006400

08001a98 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2234      	movs	r2, #52	; 0x34
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00c fbda 	bl	800e25e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001aac:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <MX_LTDC_Init+0x104>)
 8001aae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ab2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ab6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001ae6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001aee:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001af6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001afe:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b1c:	481e      	ldr	r0, [pc, #120]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001b1e:	f004 fbeb 	bl	80062f8 <HAL_LTDC_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001b28:	f000 fc4c 	bl	80023c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001b30:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001b34:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001b3a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001b3e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b44:	23ff      	movs	r3, #255	; 0xff
 8001b46:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b52:	2305      	movs	r3, #5
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001b56:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 8001b5c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001b62:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001b82:	f004 fd4b 	bl	800661c <HAL_LTDC_ConfigLayer>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001b8c:	f000 fc1a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3738      	adds	r7, #56	; 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20001248 	.word	0x20001248
 8001b9c:	40016800 	.word	0x40016800

08001ba0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bd0:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <MX_OCTOSPI1_Init+0x124>)
 8001bd2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001be2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001be6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bea:	221a      	movs	r2, #26
 8001bec:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c06:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c22:	2208      	movs	r2, #8
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c28:	2210      	movs	r2, #16
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c32:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c34:	f005 f874 	bl	8006d20 <HAL_OSPI_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001c3e:	f000 fbc1 	bl	80023c4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_OCTOSPI1_Init+0x128>)
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <MX_OCTOSPI1_Init+0x12c>)
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4817      	ldr	r0, [pc, #92]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c62:	f005 fb6f 	bl	8007344 <HAL_OSPIM_Config>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_OCTOSPI1_Init+0xd0>
  {
    Error_Handler();
 8001c6c:	f000 fbaa 	bl	80023c4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001c8c:	f005 fa46 	bl	800711c <HAL_OSPI_HyperbusCfg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_OCTOSPI1_Init+0xfa>
  {
    Error_Handler();
 8001c96:	f000 fb95 	bl	80023c4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_OCTOSPI1_Init+0x120>)
 8001ca8:	f006 f974 	bl	8007f94 <HAL_OSPI_DLYB_SetConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_OCTOSPI1_Init+0x116>
  {
    Error_Handler();
 8001cb2:	f000 fb87 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200012f0 	.word	0x200012f0
 8001cc4:	420d1400 	.word	0x420d1400
 8001cc8:	00010002 	.word	0x00010002
 8001ccc:	01000002 	.word	0x01000002

08001cd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cfe:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d00:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <MX_RTC_Init+0x100>)
 8001d02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d0c:	227f      	movs	r2, #127	; 0x7f
 8001d0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d12:	22ff      	movs	r2, #255	; 0xff
 8001d14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d3c:	4823      	ldr	r0, [pc, #140]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d3e:	f00a fd8b 	bl	800c858 <HAL_RTC_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f000 fb3c 	bl	80023c4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	481a      	ldr	r0, [pc, #104]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d64:	f00a ffe8 	bl	800cd38 <HAL_RTCEx_PrivilegeModeSet>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d6e:	f000 fb29 	bl	80023c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480f      	ldr	r0, [pc, #60]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001d90:	f00a fde4 	bl	800c95c <HAL_RTC_SetTime>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001d9a:	f000 fb13 	bl	80023c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_RTC_Init+0xfc>)
 8001db6:	f00a fe6d 	bl	800ca94 <HAL_RTC_SetDate>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001dc0:	f000 fb00 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3738      	adds	r7, #56	; 0x38
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2000134c 	.word	0x2000134c
 8001dd0:	46007800 	.word	0x46007800

08001dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <MX_SPI1_Init+0xd8>)
 8001de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001dec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e70:	f00a ff90 	bl	800cd94 <HAL_SPI_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001e7a:	f000 faa3 	bl	80023c4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001e82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_SPI1_Init+0xd4>)
 8001e92:	f00b f8b0 	bl	800cff6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001e9c:	f000 fa92 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000137c 	.word	0x2000137c
 8001eac:	40013000 	.word	0x40013000

08001eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b090      	sub	sp, #64	; 0x40
 8001eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4bbf      	ldr	r3, [pc, #764]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ecc:	4abd      	ldr	r2, [pc, #756]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ed6:	4bbb      	ldr	r3, [pc, #748]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee4:	4bb7      	ldr	r3, [pc, #732]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eea:	4ab6      	ldr	r2, [pc, #728]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ef4:	4bb3      	ldr	r3, [pc, #716]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	4bb0      	ldr	r3, [pc, #704]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f08:	4aae      	ldr	r2, [pc, #696]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f12:	4bac      	ldr	r3, [pc, #688]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f20:	4ba8      	ldr	r3, [pc, #672]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f26:	4aa7      	ldr	r2, [pc, #668]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f30:	4ba4      	ldr	r3, [pc, #656]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4ba1      	ldr	r3, [pc, #644]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f44:	4a9f      	ldr	r2, [pc, #636]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f4e:	4b9d      	ldr	r3, [pc, #628]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f5c:	4b99      	ldr	r3, [pc, #612]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f62:	4a98      	ldr	r2, [pc, #608]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f6c:	4b95      	ldr	r3, [pc, #596]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7a:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f80:	4a90      	ldr	r2, [pc, #576]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f8a:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f98:	4b8a      	ldr	r3, [pc, #552]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9e:	4a89      	ldr	r2, [pc, #548]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fa8:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbc:	4a81      	ldr	r2, [pc, #516]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd4:	4b7b      	ldr	r3, [pc, #492]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fda:	4a7a      	ldr	r2, [pc, #488]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fdc:	f043 0310 	orr.w	r3, r3, #16
 8001fe0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fe4:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <MX_GPIO_Init+0x314>)
 8001fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff8:	4873      	ldr	r0, [pc, #460]	; (80021c8 <MX_GPIO_Init+0x318>)
 8001ffa:	f003 fa4f 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002004:	4871      	ldr	r0, [pc, #452]	; (80021cc <MX_GPIO_Init+0x31c>)
 8002006:	f003 fa49 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f248 0120 	movw	r1, #32800	; 0x8020
 8002010:	486f      	ldr	r0, [pc, #444]	; (80021d0 <MX_GPIO_Init+0x320>)
 8002012:	f003 fa43 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	21c8      	movs	r1, #200	; 0xc8
 800201a:	486e      	ldr	r0, [pc, #440]	; (80021d4 <MX_GPIO_Init+0x324>)
 800201c:	f003 fa3e 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002026:	486c      	ldr	r0, [pc, #432]	; (80021d8 <MX_GPIO_Init+0x328>)
 8002028:	f003 fa38 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	486a      	ldr	r0, [pc, #424]	; (80021dc <MX_GPIO_Init+0x32c>)
 8002032:	f003 fa33 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203c:	4868      	ldr	r0, [pc, #416]	; (80021e0 <MX_GPIO_Init+0x330>)
 800203e:	f003 fa2d 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8002042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	485c      	ldr	r0, [pc, #368]	; (80021c8 <MX_GPIO_Init+0x318>)
 8002058:	f003 f848 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 800205c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002066:	2302      	movs	r3, #2
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4854      	ldr	r0, [pc, #336]	; (80021c8 <MX_GPIO_Init+0x318>)
 8002076:	f003 f839 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 800207a:	2310      	movs	r3, #16
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208e:	4619      	mov	r1, r3
 8002090:	484e      	ldr	r0, [pc, #312]	; (80021cc <MX_GPIO_Init+0x31c>)
 8002092:	f003 f82b 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 8002096:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a8:	4619      	mov	r1, r3
 80020aa:	4848      	ldr	r0, [pc, #288]	; (80021cc <MX_GPIO_Init+0x31c>)
 80020ac:	f003 f81e 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 80020b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020be:	2302      	movs	r3, #2
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020c2:	230c      	movs	r3, #12
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4845      	ldr	r0, [pc, #276]	; (80021e4 <MX_GPIO_Init+0x334>)
 80020ce:	f003 f80d 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80020d2:	f248 0320 	movw	r3, #32800	; 0x8020
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020dc:	2302      	movs	r3, #2
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e8:	4619      	mov	r1, r3
 80020ea:	4839      	ldr	r0, [pc, #228]	; (80021d0 <MX_GPIO_Init+0x320>)
 80020ec:	f002 fffe 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f0:	2304      	movs	r3, #4
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2302      	movs	r3, #2
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002100:	230c      	movs	r3, #12
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002108:	4619      	mov	r1, r3
 800210a:	4830      	ldr	r0, [pc, #192]	; (80021cc <MX_GPIO_Init+0x31c>)
 800210c:	f002 ffee 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002110:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002126:	4619      	mov	r1, r3
 8002128:	482f      	ldr	r0, [pc, #188]	; (80021e8 <MX_GPIO_Init+0x338>)
 800212a:	f002 ffdf 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002136:	2302      	movs	r3, #2
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213e:	4619      	mov	r1, r3
 8002140:	4828      	ldr	r0, [pc, #160]	; (80021e4 <MX_GPIO_Init+0x334>)
 8002142:	f002 ffd3 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2302      	movs	r3, #2
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002158:	2308      	movs	r3, #8
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002160:	4619      	mov	r1, r3
 8002162:	481b      	ldr	r0, [pc, #108]	; (80021d0 <MX_GPIO_Init+0x320>)
 8002164:	f002 ffc2 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8002168:	2303      	movs	r3, #3
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002170:	2302      	movs	r3, #2
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <MX_GPIO_Init+0x31c>)
 800217c:	f002 ffb6 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_GPIO_Init+0x33c>)
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002188:	2302      	movs	r3, #2
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002190:	4619      	mov	r1, r3
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <MX_GPIO_Init+0x334>)
 8002194:	f002 ffaa 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8002198:	2388      	movs	r3, #136	; 0x88
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ac:	4619      	mov	r1, r3
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <MX_GPIO_Init+0x324>)
 80021b0:	f002 ff9c 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_GPIO_Init+0x33c>)
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
 80021c2:	e015      	b.n	80021f0 <MX_GPIO_Init+0x340>
 80021c4:	46020c00 	.word	0x46020c00
 80021c8:	42021800 	.word	0x42021800
 80021cc:	42020c00 	.word	0x42020c00
 80021d0:	42020400 	.word	0x42020400
 80021d4:	42022400 	.word	0x42022400
 80021d8:	42022000 	.word	0x42022000
 80021dc:	42021400 	.word	0x42021400
 80021e0:	42021000 	.word	0x42021000
 80021e4:	42020800 	.word	0x42020800
 80021e8:	42020000 	.word	0x42020000
 80021ec:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4860      	ldr	r0, [pc, #384]	; (8002378 <MX_GPIO_Init+0x4c8>)
 80021f8:	f002 ff78 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002210:	4619      	mov	r1, r3
 8002212:	485a      	ldr	r0, [pc, #360]	; (800237c <MX_GPIO_Init+0x4cc>)
 8002214:	f002 ff6a 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800221e:	4b58      	ldr	r3, [pc, #352]	; (8002380 <MX_GPIO_Init+0x4d0>)
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222a:	4619      	mov	r1, r3
 800222c:	4853      	ldr	r0, [pc, #332]	; (800237c <MX_GPIO_Init+0x4cc>)
 800222e:	f002 ff5d 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8002232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223c:	2301      	movs	r3, #1
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002248:	4619      	mov	r1, r3
 800224a:	484e      	ldr	r0, [pc, #312]	; (8002384 <MX_GPIO_Init+0x4d4>)
 800224c:	f002 ff4e 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8002250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <MX_GPIO_Init+0x4d0>)
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225a:	2301      	movs	r3, #1
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002262:	4619      	mov	r1, r3
 8002264:	4847      	ldr	r0, [pc, #284]	; (8002384 <MX_GPIO_Init+0x4d4>)
 8002266:	f002 ff41 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 800226a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002274:	2301      	movs	r3, #1
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227c:	4619      	mov	r1, r3
 800227e:	4841      	ldr	r0, [pc, #260]	; (8002384 <MX_GPIO_Init+0x4d4>)
 8002280:	f002 ff34 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228c:	2301      	movs	r3, #1
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002298:	4619      	mov	r1, r3
 800229a:	483b      	ldr	r0, [pc, #236]	; (8002388 <MX_GPIO_Init+0x4d8>)
 800229c:	f002 ff26 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 80022a0:	2340      	movs	r3, #64	; 0x40
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b0:	4619      	mov	r1, r3
 80022b2:	4835      	ldr	r0, [pc, #212]	; (8002388 <MX_GPIO_Init+0x4d8>)
 80022b4:	f002 ff1a 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <MX_GPIO_Init+0x4d0>)
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c8:	4619      	mov	r1, r3
 80022ca:	4830      	ldr	r0, [pc, #192]	; (800238c <MX_GPIO_Init+0x4dc>)
 80022cc:	f002 ff0e 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80022d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022da:	2301      	movs	r3, #1
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	4828      	ldr	r0, [pc, #160]	; (800238c <MX_GPIO_Init+0x4dc>)
 80022ea:	f002 feff 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 80022ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <MX_GPIO_Init+0x4d0>)
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	4823      	ldr	r0, [pc, #140]	; (8002390 <MX_GPIO_Init+0x4e0>)
 8002304:	f002 fef2 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8002308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002312:	2302      	movs	r3, #2
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	481b      	ldr	r0, [pc, #108]	; (8002390 <MX_GPIO_Init+0x4e0>)
 8002322:	f002 fee3 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8002326:	2310      	movs	r3, #16
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_GPIO_Init+0x4d0>)
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	4816      	ldr	r0, [pc, #88]	; (8002394 <MX_GPIO_Init+0x4e4>)
 800233a:	f002 fed7 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 800233e:	2304      	movs	r3, #4
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <MX_GPIO_Init+0x4e8>)
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234e:	4619      	mov	r1, r3
 8002350:	4812      	ldr	r0, [pc, #72]	; (800239c <MX_GPIO_Init+0x4ec>)
 8002352:	f002 fecb 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8002356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_GPIO_Init+0x4d8>)
 800236c:	f002 febe 	bl	80050ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002370:	bf00      	nop
 8002372:	3740      	adds	r7, #64	; 0x40
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	42020000 	.word	0x42020000
 800237c:	42022400 	.word	0x42022400
 8002380:	10210000 	.word	0x10210000
 8002384:	42022000 	.word	0x42022000
 8002388:	42021400 	.word	0x42021400
 800238c:	42021000 	.word	0x42021000
 8002390:	42020c00 	.word	0x42020c00
 8002394:	42020800 	.word	0x42020800
 8002398:	10110000 	.word	0x10110000
 800239c:	42020400 	.word	0x42020400

080023a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b2:	f001 f9a1 	bl	80036f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40001000 	.word	0x40001000

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>
	...

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_MspInit+0x30>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_MspInit+0x30>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_MspInit+0x30>)
 80023e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	46020c00 	.word	0x46020c00

08002404 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0c2      	sub	sp, #264	; 0x108
 8002408:	af00      	add	r7, sp, #0
 800240a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800240e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002412:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	22e0      	movs	r2, #224	; 0xe0
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f00b ff16 	bl	800e25e <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8002432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <HAL_MDF_MspInit+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d14e      	bne.n	80024e2 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8002444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f007 f9ee 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8002466:	f7ff ffad 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 8002472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 800248a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_MDF_MspInit+0xec>)
 800249a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249e:	f003 0210 	and.w	r2, r3, #16
 80024a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024b4:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <HAL_MDF_MspInit+0xf0>)
 80024de:	f002 fe05 	bl	80050ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	46024080 	.word	0x46024080
 80024f0:	46020c00 	.word	0x46020c00
 80024f4:	42021000 	.word	0x42021000

080024f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_CRC_MspInit+0x3c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10e      	bne.n	8002528 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_CRC_MspInit+0x40>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_CRC_MspInit+0x40>)
 8002512:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_CRC_MspInit+0x40>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40023000 	.word	0x40023000
 8002538:	46020c00 	.word	0x46020c00

0800253c <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_DCACHE_MspInit+0x68>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10f      	bne.n	800256e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 8002556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800255a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 800256c:	e013      	b.n	8002596 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_DCACHE_MspInit+0x70>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10e      	bne.n	8002596 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 8002580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_DCACHE_MspInit+0x6c>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40031400 	.word	0x40031400
 80025a8:	46020c00 	.word	0x46020c00
 80025ac:	40031800 	.word	0x40031800

080025b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_DMA2D_MspInit+0x48>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d116      	bne.n	80025f0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_DMA2D_MspInit+0x4c>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_DMA2D_MspInit+0x4c>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_DMA2D_MspInit+0x4c>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2076      	movs	r0, #118	; 0x76
 80025e6:	f001 f983 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80025ea:	2076      	movs	r0, #118	; 0x76
 80025ec:	f001 f99a 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	4002b000 	.word	0x4002b000
 80025fc:	46020c00 	.word	0x46020c00

08002600 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0c2      	sub	sp, #264	; 0x108
 8002604:	af00      	add	r7, sp, #0
 8002606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800260a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800260e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	22e0      	movs	r2, #224	; 0xe0
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00b fe18 	bl	800e25e <memset>
  if(hdsi->Instance==DSI)
 800262e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a30      	ldr	r2, [pc, #192]	; (80026fc <HAL_DSI_MspInit+0xfc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d157      	bne.n	80026f0 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0304 	mov.w	r3, #4
 8002648:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800264c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002650:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f007 f8ef 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8002664:	f7ff feae 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_DSI_MspInit+0x100>)
 800266a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800266e:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_DSI_MspInit+0x100>)
 8002670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002674:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_DSI_MspInit+0x100>)
 800267a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800267e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_DSI_MspInit+0x100>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_DSI_MspInit+0x100>)
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_DSI_MspInit+0x100>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	f003 0220 	and.w	r2, r3, #32
 80026a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026b2:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80026ce:	230b      	movs	r3, #11
 80026d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026d8:	4619      	mov	r1, r3
 80026da:	480a      	ldr	r0, [pc, #40]	; (8002704 <HAL_DSI_MspInit+0x104>)
 80026dc:	f002 fd06 	bl	80050ec <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2089      	movs	r0, #137	; 0x89
 80026e6:	f001 f903 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80026ea:	2089      	movs	r0, #137	; 0x89
 80026ec:	f001 f91a 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80026f0:	bf00      	nop
 80026f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40016c00 	.word	0x40016c00
 8002700:	46020c00 	.word	0x46020c00
 8002704:	42021400 	.word	0x42021400

08002708 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_GFXMMU_MspInit+0x48>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d116      	bne.n	8002748 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_GFXMMU_MspInit+0x4c>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_GFXMMU_MspInit+0x4c>)
 8002722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002726:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_GFXMMU_MspInit+0x4c>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2086      	movs	r0, #134	; 0x86
 800273e:	f001 f8d7 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8002742:	2086      	movs	r0, #134	; 0x86
 8002744:	f001 f8ee 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	4002c000 	.word	0x4002c000
 8002754:	46020c00 	.word	0x46020c00

08002758 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_GPU2D_MspInit+0x78>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d12d      	bne.n	80027c6 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002776:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 8002790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_GPU2D_MspInit+0x7c>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2084      	movs	r0, #132	; 0x84
 80027ac:	f001 f8a0 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80027b0:	2084      	movs	r0, #132	; 0x84
 80027b2:	f001 f8b7 	bl	8003924 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2085      	movs	r0, #133	; 0x85
 80027bc:	f001 f898 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80027c0:	2085      	movs	r0, #133	; 0x85
 80027c2:	f001 f8af 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	4002f000 	.word	0x4002f000
 80027d4:	46020c00 	.word	0x46020c00

080027d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0ca      	sub	sp, #296	; 0x128
 80027dc:	af00      	add	r7, sp, #0
 80027de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fc:	22e0      	movs	r2, #224	; 0xe0
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00b fd2c 	bl	800e25e <memset>
  if(hi2c->Instance==I2C1)
 8002806:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800280a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4ad3      	ldr	r2, [pc, #844]	; (8002b60 <HAL_I2C_MspInit+0x388>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d14f      	bne.n	80028b8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002818:	f04f 0240 	mov.w	r2, #64	; 0x40
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800282a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282e:	4618      	mov	r0, r3
 8002830:	f007 f804 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800283a:	f7ff fdc3 	bl	80023c4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800283e:	4bc9      	ldr	r3, [pc, #804]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002844:	4ac7      	ldr	r2, [pc, #796]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800284e:	4bc5      	ldr	r3, [pc, #788]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800285c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002860:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002864:	2312      	movs	r3, #18
 8002866:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002876:	2304      	movs	r3, #4
 8002878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800287c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002880:	4619      	mov	r1, r3
 8002882:	48b9      	ldr	r0, [pc, #740]	; (8002b68 <HAL_I2C_MspInit+0x390>)
 8002884:	f002 fc32 	bl	80050ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002888:	4bb6      	ldr	r3, [pc, #728]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 800288a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800288e:	4ab5      	ldr	r2, [pc, #724]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002894:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002898:	4bb2      	ldr	r3, [pc, #712]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 800289a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800289e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80028a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80028b6:	e14e      	b.n	8002b56 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C2)
 80028b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4aa9      	ldr	r2, [pc, #676]	; (8002b6c <HAL_I2C_MspInit+0x394>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d157      	bne.n	800297a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028ca:	f04f 0280 	mov.w	r2, #128	; 0x80
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 ffab 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80028ec:	f7ff fd6a 	bl	80023c4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	4b9c      	ldr	r3, [pc, #624]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f6:	4a9b      	ldr	r2, [pc, #620]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002900:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002906:	f003 0202 	and.w	r2, r3, #2
 800290a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800290e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800291c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800291e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002922:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	2312      	movs	r3, #18
 8002928:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002938:	2304      	movs	r3, #4
 800293a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002942:	4619      	mov	r1, r3
 8002944:	488a      	ldr	r0, [pc, #552]	; (8002b70 <HAL_I2C_MspInit+0x398>)
 8002946:	f002 fbd1 	bl	80050ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800294a:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 800294c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002950:	4a84      	ldr	r2, [pc, #528]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002956:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800295a:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 800295c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002964:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	e0ed      	b.n	8002b56 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C4)
 800297a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800297e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	; (8002b74 <HAL_I2C_MspInit+0x39c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d157      	bne.n	8002a3c <HAL_I2C_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800298c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 ff4a 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 80029ae:	f7ff fd09 	bl	80023c4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029c2:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	f003 0208 	and.w	r2, r3, #8
 80029cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029de:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e8:	2312      	movs	r3, #18
 80029ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80029fa:	2304      	movs	r3, #4
 80029fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a00:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a04:	4619      	mov	r1, r3
 8002a06:	485c      	ldr	r0, [pc, #368]	; (8002b78 <HAL_I2C_MspInit+0x3a0>)
 8002a08:	f002 fb70 	bl	80050ec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a12:	4a54      	ldr	r2, [pc, #336]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002a1c:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a22:	f003 0202 	and.w	r2, r3, #2
 8002a26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a38:	681b      	ldr	r3, [r3, #0]
}
 8002a3a:	e08c      	b.n	8002b56 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C6)
 8002a3c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <HAL_I2C_MspInit+0x3a4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 8083 	bne.w	8002b56 <HAL_I2C_MspInit+0x37e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002a50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a66:	4618      	mov	r0, r3
 8002a68:	f006 fee8 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_MspInit+0x29e>
      Error_Handler();
 8002a72:	f7ff fca7 	bl	80023c4 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7c:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002a90:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aa2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aaa:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002aac:	f043 0320 	orr.w	r3, r3, #32
 8002ab0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aba:	f003 0220 	and.w	r2, r3, #32
 8002abe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ac2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002acc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ad0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002af2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002af6:	4619      	mov	r1, r3
 8002af8:	4821      	ldr	r0, [pc, #132]	; (8002b80 <HAL_I2C_MspInit+0x3a8>)
 8002afa:	f002 faf7 	bl	80050ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b04:	2312      	movs	r3, #18
 8002b06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b1c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002b20:	4619      	mov	r1, r3
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <HAL_I2C_MspInit+0x3ac>)
 8002b24:	f002 fae2 	bl	80050ec <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b34:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_I2C_MspInit+0x38c>)
 8002b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b3e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002b42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b54:	681b      	ldr	r3, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005400 	.word	0x40005400
 8002b64:	46020c00 	.word	0x46020c00
 8002b68:	42021800 	.word	0x42021800
 8002b6c:	40005800 	.word	0x40005800
 8002b70:	42020400 	.word	0x42020400
 8002b74:	40008400 	.word	0x40008400
 8002b78:	42020c00 	.word	0x42020c00
 8002b7c:	40009c00 	.word	0x40009c00
 8002b80:	42022400 	.word	0x42022400
 8002b84:	42021400 	.word	0x42021400

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0c8      	sub	sp, #288	; 0x120
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b96:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bac:	22e0      	movs	r2, #224	; 0xe0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00b fb54 	bl	800e25e <memset>
  if(huart->Instance==LPUART1)
 8002bb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4aa1      	ldr	r2, [pc, #644]	; (8002e48 <HAL_UART_MspInit+0x2c0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d17b      	bne.n	8002cc0 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002bc8:	f04f 0220 	mov.w	r2, #32
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 fe2c 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002bea:	f7ff fbeb 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bee:	4b97      	ldr	r3, [pc, #604]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bf4:	4a95      	ldr	r2, [pc, #596]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002bfe:	4b93      	ldr	r3, [pc, #588]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c0c:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c12:	4a8e      	ldr	r2, [pc, #568]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c1c:	4b8b      	ldr	r3, [pc, #556]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c22:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002c26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c38:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c40:	4a82      	ldr	r2, [pc, #520]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c4a:	4b80      	ldr	r3, [pc, #512]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c50:	f003 0202 	and.w	r2, r3, #2
 8002c54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c66:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002c68:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c82:	2308      	movs	r3, #8
 8002c84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c88:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4870      	ldr	r0, [pc, #448]	; (8002e50 <HAL_UART_MspInit+0x2c8>)
 8002c90:	f002 fa2c 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002cac:	2308      	movs	r3, #8
 8002cae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4866      	ldr	r0, [pc, #408]	; (8002e54 <HAL_UART_MspInit+0x2cc>)
 8002cba:	f002 fa17 	bl	80050ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cbe:	e0bd      	b.n	8002e3c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002cc0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002cc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a62      	ldr	r2, [pc, #392]	; (8002e58 <HAL_UART_MspInit+0x2d0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d155      	bne.n	8002d7e <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cd2:	f04f 0201 	mov.w	r2, #1
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f006 fda8 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002cf2:	f7ff fb67 	bl	80023c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf6:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cfc:	4a53      	ldr	r2, [pc, #332]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d02:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002d06:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d0c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002d10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d22:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3a:	f003 0202 	and.w	r2, r3, #2
 8002d3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d50:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002d52:	23c0      	movs	r3, #192	; 0xc0
 8002d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002d74:	4619      	mov	r1, r3
 8002d76:	4837      	ldr	r0, [pc, #220]	; (8002e54 <HAL_UART_MspInit+0x2cc>)
 8002d78:	f002 f9b8 	bl	80050ec <HAL_GPIO_Init>
}
 8002d7c:	e05e      	b.n	8002e3c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8002d7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <HAL_UART_MspInit+0x2d4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d155      	bne.n	8002e3c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 fd48 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002db2:	f7ff fb07 	bl	80023c4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dcc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002dd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002dd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002dde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002de2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_UART_MspInit+0x2c4>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f003 0204 	and.w	r2, r3, #4
 8002dfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e10:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002e12:	230c      	movs	r3, #12
 8002e14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e30:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002e34:	4619      	mov	r1, r3
 8002e36:	480a      	ldr	r0, [pc, #40]	; (8002e60 <HAL_UART_MspInit+0x2d8>)
 8002e38:	f002 f958 	bl	80050ec <HAL_GPIO_Init>
}
 8002e3c:	bf00      	nop
 8002e3e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	46002400 	.word	0x46002400
 8002e4c:	46020c00 	.word	0x46020c00
 8002e50:	42021800 	.word	0x42021800
 8002e54:	42020400 	.word	0x42020400
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40006400 	.word	0x40006400
 8002e60:	42020800 	.word	0x42020800

08002e64 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b0bc      	sub	sp, #240	; 0xf0
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e6c:	f107 0310 	add.w	r3, r7, #16
 8002e70:	22e0      	movs	r2, #224	; 0xe0
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f00b f9f2 	bl	800e25e <memset>
  if(hltdc->Instance==LTDC)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_LTDC_MspInit+0xa4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d13d      	bne.n	8002f00 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0302 	mov.w	r3, #2
 8002e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002e90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002ea0:	2314      	movs	r3, #20
 8002ea2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002eac:	2302      	movs	r3, #2
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002eb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 fcba 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8002ece:	f7ff fa79 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_LTDC_MspInit+0xa8>)
 8002ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <HAL_LTDC_MspInit+0xa8>)
 8002eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ede:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_LTDC_MspInit+0xa8>)
 8002ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2087      	movs	r0, #135	; 0x87
 8002ef6:	f000 fcfb 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002efa:	2087      	movs	r0, #135	; 0x87
 8002efc:	f000 fd12 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f00:	bf00      	nop
 8002f02:	37f0      	adds	r7, #240	; 0xf0
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40016800 	.word	0x40016800
 8002f0c:	46020c00 	.word	0x46020c00

08002f10 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b0c8      	sub	sp, #288	; 0x120
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f1e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f34:	22e0      	movs	r2, #224	; 0xe0
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00b f990 	bl	800e25e <memset>
  if(hospi->Instance==OCTOSPI1)
 8002f3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4aaa      	ldr	r2, [pc, #680]	; (80031f4 <HAL_OSPI_MspInit+0x2e4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	f040 814c 	bne.w	80031ea <HAL_OSPI_MspInit+0x2da>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002f52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f006 fc67 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002f74:	f7ff fa26 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002f78:	4b9f      	ldr	r3, [pc, #636]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	4a9e      	ldr	r2, [pc, #632]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f88:	4b9b      	ldr	r3, [pc, #620]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002f96:	4b98      	ldr	r3, [pc, #608]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa6:	4b94      	ldr	r3, [pc, #592]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f003 0210 	and.w	r2, r3, #16
 8002fb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fc2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc4:	4b8c      	ldr	r3, [pc, #560]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fca:	4a8b      	ldr	r2, [pc, #556]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fd4:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fda:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002fde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ff0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ff2:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff8:	4a7f      	ldr	r2, [pc, #508]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8002ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003002:	4b7d      	ldr	r3, [pc, #500]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800300c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800301a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800301e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003020:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003026:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003030:	4b71      	ldr	r3, [pc, #452]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800303a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800303e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003048:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800304c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003054:	4a68      	ldr	r2, [pc, #416]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800305e:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f003 0202 	and.w	r2, r3, #2
 8003068:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800306c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003076:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800307a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 800307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003082:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800308c:	4b5a      	ldr	r3, [pc, #360]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 800308e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800309a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030a8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030aa:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 80030ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b0:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 80030b2:	f043 0310 	orr.w	r3, r3, #16
 80030b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030ba:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <HAL_OSPI_MspInit+0x2e8>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c0:	f003 0210 	and.w	r2, r3, #16
 80030c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030d6:	681b      	ldr	r3, [r3, #0]
    PH12     ------> OCTOSPIM_P2_IO7
    PA0     ------> OCTOSPIM_P2_NCS
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80030d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80030dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80030f2:	2305      	movs	r3, #5
 80030f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030f8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030fc:	4619      	mov	r1, r3
 80030fe:	483f      	ldr	r0, [pc, #252]	; (80031fc <HAL_OSPI_MspInit+0x2ec>)
 8003100:	f001 fff4 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003104:	2340      	movs	r3, #64	; 0x40
 8003106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800311c:	2303      	movs	r3, #3
 800311e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003122:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003126:	4619      	mov	r1, r3
 8003128:	4835      	ldr	r0, [pc, #212]	; (8003200 <HAL_OSPI_MspInit+0x2f0>)
 800312a:	f001 ffdf 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800312e:	230e      	movs	r3, #14
 8003130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8003146:	2306      	movs	r3, #6
 8003148:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800314c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003150:	4619      	mov	r1, r3
 8003152:	482c      	ldr	r0, [pc, #176]	; (8003204 <HAL_OSPI_MspInit+0x2f4>)
 8003154:	f001 ffca 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8003158:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800315c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003172:	230a      	movs	r3, #10
 8003174:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800317c:	4619      	mov	r1, r3
 800317e:	4822      	ldr	r0, [pc, #136]	; (8003208 <HAL_OSPI_MspInit+0x2f8>)
 8003180:	f001 ffb4 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003184:	2301      	movs	r3, #1
 8003186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 800319c:	230a      	movs	r3, #10
 800319e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80031a6:	4619      	mov	r1, r3
 80031a8:	4818      	ldr	r0, [pc, #96]	; (800320c <HAL_OSPI_MspInit+0x2fc>)
 80031aa:	f001 ff9f 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80031c8:	230a      	movs	r3, #10
 80031ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80031d2:	4619      	mov	r1, r3
 80031d4:	480e      	ldr	r0, [pc, #56]	; (8003210 <HAL_OSPI_MspInit+0x300>)
 80031d6:	f001 ff89 	bl	80050ec <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	204c      	movs	r0, #76	; 0x4c
 80031e0:	f000 fb86 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80031e4:	204c      	movs	r0, #76	; 0x4c
 80031e6:	f000 fb9d 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	420d1400 	.word	0x420d1400
 80031f8:	46020c00 	.word	0x46020c00
 80031fc:	42021c00 	.word	0x42021c00
 8003200:	42021800 	.word	0x42021800
 8003204:	42022000 	.word	0x42022000
 8003208:	42020400 	.word	0x42020400
 800320c:	42020000 	.word	0x42020000
 8003210:	42021000 	.word	0x42021000

08003214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0bc      	sub	sp, #240	; 0xf0
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	22e0      	movs	r2, #224	; 0xe0
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f00b f81a 	bl	800e25e <memset>
  if(hrtc->Instance==RTC)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_RTC_MspInit+0x90>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d132      	bne.n	800329a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003234:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4618      	mov	r0, r3
 800324e:	f006 faf5 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003258:	f7ff f8b4 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 800325e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 8003264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003268:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 800326e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 8003274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003278:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 800327e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 800328c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003290:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_RTC_MspInit+0x94>)
 8003292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003296:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800329a:	bf00      	nop
 800329c:	37f0      	adds	r7, #240	; 0xf0
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	46007800 	.word	0x46007800
 80032a8:	46020c00 	.word	0x46020c00

080032ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0c4      	sub	sp, #272	; 0x110
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	22e0      	movs	r2, #224	; 0xe0
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f00a ffc2 	bl	800e25e <memset>
  if(hspi->Instance==SPI1)
 80032da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <HAL_SPI_MspInit+0x140>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d17a      	bne.n	80033e2 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80032f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003300:	f107 0318 	add.w	r3, r7, #24
 8003304:	4618      	mov	r0, r3
 8003306:	f006 fa99 	bl	800983c <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8003310:	f7ff f858 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800331a:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 800331c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003320:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800332a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	f003 0202 	and.w	r2, r3, #2
 800334c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800335a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800335e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003366:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <HAL_SPI_MspInit+0x144>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800337e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800338c:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800338e:	2301      	movs	r3, #1
 8003390:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033a6:	2305      	movs	r3, #5
 80033a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033b0:	4619      	mov	r1, r3
 80033b2:	4810      	ldr	r0, [pc, #64]	; (80033f4 <HAL_SPI_MspInit+0x148>)
 80033b4:	f001 fe9a 	bl	80050ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80033b8:	23e0      	movs	r3, #224	; 0xe0
 80033ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033d0:	2305      	movs	r3, #5
 80033d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033da:	4619      	mov	r1, r3
 80033dc:	4806      	ldr	r0, [pc, #24]	; (80033f8 <HAL_SPI_MspInit+0x14c>)
 80033de:	f001 fe85 	bl	80050ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40013000 	.word	0x40013000
 80033f0:	46020c00 	.word	0x46020c00
 80033f4:	42020400 	.word	0x42020400
 80033f8:	42020000 	.word	0x42020000

080033fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800340c:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_InitTick+0xcc>)
 800340e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003412:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <HAL_InitTick+0xcc>)
 8003414:	f043 0310 	orr.w	r3, r3, #16
 8003418:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_InitTick+0xcc>)
 800341e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800342a:	f107 0210 	add.w	r2, r7, #16
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f006 f917 	bl	8009668 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800343a:	f006 f8d9 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800343e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <HAL_InitTick+0xd0>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	3b01      	subs	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_InitTick+0xd4>)
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_InitTick+0xd8>)
 8003452:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_InitTick+0xd4>)
 8003456:	f240 32e7 	movw	r2, #999	; 0x3e7
 800345a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_InitTick+0xd4>)
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_InitTick+0xd4>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_InitTick+0xd4>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800346e:	4818      	ldr	r0, [pc, #96]	; (80034d0 <HAL_InitTick+0xd4>)
 8003470:	f009 fe02 	bl	800d078 <HAL_TIM_Base_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800347a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003482:	4813      	ldr	r0, [pc, #76]	; (80034d0 <HAL_InitTick+0xd4>)
 8003484:	f009 fe5a 	bl	800d13c <HAL_TIM_Base_Start_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800348e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d808      	bhi.n	80034ae <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800349c:	2200      	movs	r2, #0
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	2031      	movs	r0, #49	; 0x31
 80034a2:	f000 fa25 	bl	80038f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_InitTick+0xdc>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e002      	b.n	80034b4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80034b4:	2031      	movs	r0, #49	; 0x31
 80034b6:	f000 fa35 	bl	8003924 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80034ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3738      	adds	r7, #56	; 0x38
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	46020c00 	.word	0x46020c00
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	20001424 	.word	0x20001424
 80034d4:	40001000 	.word	0x40001000
 80034d8:	20000d04 	.word	0x20000d04

080034dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80034e0:	f006 f90a 	bl	80096f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034e4:	e7fe      	b.n	80034e4 <NMI_Handler+0x8>

080034e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <HardFault_Handler+0x4>

080034ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler+0x4>

080034f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <BusFault_Handler+0x4>

080034f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <UsageFault_Handler+0x4>

080034fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <TIM6_IRQHandler+0x10>)
 800353e:	f009 fe9d 	bl	800d27c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20001424 	.word	0x20001424

0800354c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <OCTOSPI1_IRQHandler+0x10>)
 8003552:	f003 fca1 	bl	8006e98 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200012f0 	.word	0x200012f0

08003560 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <DMA2D_IRQHandler+0x10>)
 8003566:	f000 fc8e 	bl	8003e86 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000e64 	.word	0x20000e64

08003574 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <GPU2D_IRQHandler+0x10>)
 800357a:	f001 ffd1 	bl	8005520 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000f30 	.word	0x20000f30

08003588 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <GPU2D_ER_IRQHandler+0x10>)
 800358e:	f001 ffed 	bl	800556c <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000f30 	.word	0x20000f30

0800359c <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <GFXMMU_IRQHandler+0x10>)
 80035a2:	f001 fd73 	bl	800508c <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000ee8 	.word	0x20000ee8

080035b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <LTDC_IRQHandler+0x10>)
 80035b6:	f002 ff6f 	bl	8006498 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20001248 	.word	0x20001248

080035c4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DSI_IRQHandler+0x10>)
 80035ca:	f001 f8b5 	bl	8004738 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000ec4 	.word	0x20000ec4

080035d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <SystemInit+0x68>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	4a17      	ldr	r2, [pc, #92]	; (8003640 <SystemInit+0x68>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <SystemInit+0x6c>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <SystemInit+0x6c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <SystemInit+0x6c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <SystemInit+0x6c>)
 8003600:	2200      	movs	r2, #0
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <SystemInit+0x6c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <SystemInit+0x6c>)
 800360a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800360e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003612:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <SystemInit+0x6c>)
 8003616:	2200      	movs	r2, #0
 8003618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <SystemInit+0x6c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <SystemInit+0x6c>)
 8003620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <SystemInit+0x6c>)
 8003628:	2200      	movs	r2, #0
 800362a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SystemInit+0x68>)
 800362e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003632:	609a      	str	r2, [r3, #8]
  #endif
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000ed00 	.word	0xe000ed00
 8003644:	46020c00 	.word	0x46020c00

08003648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003680 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800364c:	f7ff ffc4 	bl	80035d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003650:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003652:	e003      	b.n	800365c <LoopCopyDataInit>

08003654 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003656:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003658:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800365a:	3104      	adds	r1, #4

0800365c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <LoopForever+0xa>)
	ldr	r3, =_edata
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003660:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003662:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003664:	d3f6      	bcc.n	8003654 <CopyDataInit>
	ldr	r2, =_sbss
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003668:	e002      	b.n	8003670 <LoopFillZerobss>

0800366a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800366a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800366c:	f842 3b04 	str.w	r3, [r2], #4

08003670 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <LoopForever+0x16>)
	cmp	r2, r3
 8003672:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003674:	d3f9      	bcc.n	800366a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003676:	f00a fdfb 	bl	800e270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800367a:	f7fd fd09 	bl	8001090 <main>

0800367e <LoopForever>:

LoopForever:
    b LoopForever
 800367e:	e7fe      	b.n	800367e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003680:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003684:	0800e3e0 	.word	0x0800e3e0
	ldr	r0, =_sdata
 8003688:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800368c:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8003690:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8003694:	20001498 	.word	0x20001498

08003698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003698:	e7fe      	b.n	8003698 <ADC1_2_IRQHandler>
	...

0800369c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_Init+0x4c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_Init+0x4c>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ac:	2003      	movs	r0, #3
 80036ae:	f000 f914 	bl	80038da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036b2:	f005 fe81 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_Init+0x50>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	490b      	ldr	r1, [pc, #44]	; (80036f0 <HAL_Init+0x54>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_Init+0x58>)
 80036ca:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036cc:	200f      	movs	r0, #15
 80036ce:	f7ff fe95 	bl	80033fc <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e002      	b.n	80036e2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036dc:	f7fe fe78 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40022000 	.word	0x40022000
 80036ec:	46020c00 	.word	0x46020c00
 80036f0:	0800e2d0 	.word	0x0800e2d0
 80036f4:	20000d00 	.word	0x20000d00

080036f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_IncTick+0x20>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_IncTick+0x24>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_IncTick+0x24>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000d08 	.word	0x20000d08
 800371c:	20001470 	.word	0x20001470

08003720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTick;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_GetTick+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20001470 	.word	0x20001470

08003738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7ff ffee 	bl	8003720 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d005      	beq.n	800375e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_Delay+0x44>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800375e:	bf00      	nop
 8003760:	f7ff ffde 	bl	8003720 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d8f7      	bhi.n	8003760 <HAL_Delay+0x28>
  {
  }
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000d08 	.word	0x20000d08

08003780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800379c:	4013      	ands	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b2:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60d3      	str	r3, [r2, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	f003 0307 	and.w	r3, r3, #7
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db0b      	blt.n	800380e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4907      	ldr	r1, [pc, #28]	; (800381c <__NVIC_EnableIRQ+0x38>)
 80037fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2001      	movs	r0, #1
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000e100 	.word	0xe000e100

08003820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	; (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
         );
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ff4c 	bl	8003780 <__NVIC_SetPriorityGrouping>
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038fe:	f7ff ff63 	bl	80037c8 <__NVIC_GetPriorityGrouping>
 8003902:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f7ff ffb3 	bl	8003874 <NVIC_EncodePriority>
 800390e:	4602      	mov	r2, r0
 8003910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff82 	bl	8003820 <__NVIC_SetPriority>
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff56 	bl	80037e4 <__NVIC_EnableIRQ>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e054      	b.n	80039fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7f5b      	ldrb	r3, [r3, #29]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe fdc8 	bl	80024f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	791b      	ldrb	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_CRC_Init+0xc4>)
 800397c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0218 	bic.w	r2, r2, #24
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	e00c      	b.n	80039aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	461a      	mov	r2, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f834 	bl	8003a08 <HAL_CRCEx_Polynomial_Set>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e028      	b.n	80039fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	795b      	ldrb	r3, [r3, #5]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	611a      	str	r2, [r3, #16]
 80039bc:	e004      	b.n	80039c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6912      	ldr	r2, [r2, #16]
 80039c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	04c11db7 	.word	0x04c11db7

08003a08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a18:	231f      	movs	r3, #31
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
 8003a2a:	e063      	b.n	8003af4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a2c:	bf00      	nop
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1e5a      	subs	r2, r3, #1
 8003a32:	613a      	str	r2, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_CRCEx_Polynomial_Set+0x44>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b18      	cmp	r3, #24
 8003a50:	d846      	bhi.n	8003ae0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003ae7 	.word	0x08003ae7
 8003a5c:	08003ae1 	.word	0x08003ae1
 8003a60:	08003ae1 	.word	0x08003ae1
 8003a64:	08003ae1 	.word	0x08003ae1
 8003a68:	08003ae1 	.word	0x08003ae1
 8003a6c:	08003ae1 	.word	0x08003ae1
 8003a70:	08003ae1 	.word	0x08003ae1
 8003a74:	08003ae1 	.word	0x08003ae1
 8003a78:	08003ad5 	.word	0x08003ad5
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003ae1 	.word	0x08003ae1
 8003a84:	08003ae1 	.word	0x08003ae1
 8003a88:	08003ae1 	.word	0x08003ae1
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003ae1 	.word	0x08003ae1
 8003ab4:	08003ae1 	.word	0x08003ae1
 8003ab8:	08003abd 	.word	0x08003abd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d913      	bls.n	8003aea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ac6:	e010      	b.n	8003aea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	d90f      	bls.n	8003aee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ad2:	e00c      	b.n	8003aee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d90b      	bls.n	8003af2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ade:	e008      	b.n	8003af2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e004      	b.n	8003af4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003af2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 0118 	bic.w	r1, r3, #24
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e037      	b.n	8003ba6 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_DCACHE_Init+0x8c>)
 8003b46:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_DCACHE_Init+0x90>)
 8003b4c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_DCACHE_Init+0x94>)
 8003b52:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_DCACHE_Init+0x98>)
 8003b58:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_DCACHE_Init+0x9c>)
 8003b5e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_DCACHE_Init+0xa0>)
 8003b6c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f814 	bl	8003bc8 <HAL_DCACHE_Enable>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08003c67 	.word	0x08003c67
 8003bb4:	08003c17 	.word	0x08003c17
 8003bb8:	08003c2b 	.word	0x08003c2b
 8003bbc:	08003c53 	.word	0x08003c53
 8003bc0:	08003c3f 	.word	0x08003c3f
 8003bc4:	0800253d 	.word	0x0800253d

08003bc8 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e015      	b.n	8003c0a <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0309 	and.w	r3, r3, #9
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e00a      	b.n	8003c08 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003c82:	f7ff fd4d 	bl	8003720 <HAL_GetTick>
 8003c86:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d008      	beq.n	8003cb0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e05c      	b.n	8003d6a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0204 	orr.w	r2, r2, #4
 8003cbe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003cc8:	e020      	b.n	8003d0c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003cca:	f7ff fd29 	bl	8003720 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d919      	bls.n	8003d0c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f043 0210 	orr.w	r2, r3, #16
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02e      	b.n	8003d6a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0d7      	beq.n	8003cca <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0202 	orr.w	r2, r2, #2
 8003d28:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003d3a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	2201      	movs	r2, #1
 8003d56:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e019      	b.n	8003db8 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00e      	b.n	8003db8 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e053      	b.n	8003e7e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fbe0 	bl	80025b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6851      	ldr	r1, [r2, #4]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	69d2      	ldr	r2, [r2, #28]
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6891      	ldr	r1, [r2, #8]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6992      	ldr	r2, [r2, #24]
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68d1      	ldr	r1, [r2, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	051a      	lsls	r2, r3, #20
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	055b      	lsls	r3, r3, #21
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d026      	beq.n	8003ef6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d021      	beq.n	8003ef6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d021      	beq.n	8003f4e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f18:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2204      	movs	r2, #4
 8003f32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d026      	beq.n	8003fa6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d021      	beq.n	8003fa6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d013      	beq.n	8003fd8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f853 	bl	800407e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01f      	beq.n	800402c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2202      	movs	r2, #2
 8004002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01f      	beq.n	8004076 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01a      	beq.n	8004076 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f80e 	bl	8004092 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA2D_ConfigLayer+0x20>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e084      	b.n	80041d2 <HAL_DMA2D_ConfigLayer+0x12a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80040fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_DMA2D_ConfigLayer+0x138>)
 800410a:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b0a      	cmp	r3, #10
 8004112:	d003      	beq.n	800411c <HAL_DMA2D_ConfigLayer+0x74>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b09      	cmp	r3, #9
 800411a:	d107      	bne.n	800412c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e005      	b.n	8004138 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d120      	bne.n	8004180 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	ea02 0103 	and.w	r1, r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	430a      	orrs	r2, r1
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d003      	beq.n	8004170 <HAL_DMA2D_ConfigLayer+0xc8>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b09      	cmp	r3, #9
 800416e:	d127      	bne.n	80041c0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800417c:	629a      	str	r2, [r3, #40]	; 0x28
 800417e:	e01f      	b.n	80041c0 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	ea02 0103 	and.w	r1, r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b0a      	cmp	r3, #10
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA2D_ConfigLayer+0x10a>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d106      	bne.n	80041c0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041be:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	ff33000f 	.word	0xff33000f

080041e4 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80041fc:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	00da      	lsls	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	220e      	movs	r2, #14
 800421e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 021f 	bic.w	r2, r2, #31
 8004232:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6912      	ldr	r2, [r2, #16]
 800423e:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	220e      	movs	r2, #14
 8004248:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 021f 	bic.w	r2, r2, #31
 800425c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6912      	ldr	r2, [r2, #16]
 8004268:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	220e      	movs	r2, #14
 8004272:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004286:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800429a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d007      	beq.n	80042b6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d10a      	bne.n	80042cc <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 80042ca:	e02c      	b.n	8004326 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d007      	beq.n	80042ec <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d003      	beq.n	80042ec <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80042e8:	2b06      	cmp	r3, #6
 80042ea:	d10a      	bne.n	8004302 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2210      	movs	r2, #16
 80042fc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8004300:	e011      	b.n	8004326 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b07      	cmp	r3, #7
 8004308:	d003      	beq.n	8004312 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800430e:	2b08      	cmp	r3, #8
 8004310:	d109      	bne.n	8004326 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 020f 	bic.w	r2, r2, #15
 8004336:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020f 	bic.w	r2, r2, #15
 800434a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6952      	ldr	r2, [r2, #20]
 8004356:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6952      	ldr	r2, [r2, #20]
 8004362:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800438c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	075a      	lsls	r2, r3, #29
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80043b8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	031a      	lsls	r2, r3, #12
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0c3      	b.n	8004594 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e5b      	ldrb	r3, [r3, #25]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe f8f2 	bl	8002600 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2203      	movs	r2, #3
 8004420:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004432:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8004436:	2002      	movs	r0, #2
 8004438:	f7ff f97e 	bl	8003738 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b54      	ldr	r3, [pc, #336]	; (800459c <HAL_DSI_Init+0x1a4>)
 800444a:	400b      	ands	r3, r1
 800444c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004464:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800446c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff feb3 	bl	80041e4 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ff76 	bl	8004372 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7ff f942 	bl	8003738 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b4:	f7ff f934 	bl	8003720 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80044bc:	f7ff f930 	bl	8003720 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e062      	b.n	8004594 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ee      	beq.n	80044bc <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0206 	orr.w	r2, r2, #6
 80044ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0203 	bic.w	r2, r2, #3
 8004502:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0203 	bic.w	r2, r2, #3
 8004530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004558:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6899      	ldr	r1, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	e0000003 	.word	0xe0000003

080045a0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7e1b      	ldrb	r3, [r3, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_DSI_ConfigErrorMonitor+0x16>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e0ba      	b.n	800472c <HAL_DSI_ConfigErrorMonitor+0x18c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80045f0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80045f4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004612:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0202 	orr.w	r2, r2, #2
 800464e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 020c 	orr.w	r2, r2, #12
 800466c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0210 	orr.w	r2, r2, #16
 800468a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0220 	orr.w	r2, r2, #32
 80046a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004702:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004720:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00f      	beq.n	8004770 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8b8 	bl	80048e0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2202      	movs	r2, #2
 8004796:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8aa 	bl	80048f4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047b2:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047ca:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f043 0202 	orr.w	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f043 0208 	orr.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f818 	bl	8004908 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7e1b      	ldrb	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DSI_SetGenericVCID+0x16>
 800492e:	2302      	movs	r3, #2
 8004930:	e019      	b.n	8004966 <HAL_DSI_SetGenericVCID+0x4a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7e1b      	ldrb	r3, [r3, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004984:	2302      	movs	r3, #2
 8004986:	e0c5      	b.n	8004b14 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0203 	bic.w	r2, r2, #3
 80049d4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68d9      	ldr	r1, [r3, #12]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0207 	bic.w	r2, r2, #7
 80049f6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6959      	ldr	r1, [r3, #20]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 020f 	bic.w	r2, r2, #15
 8004a24:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6919      	ldr	r1, [r3, #16]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 020e 	bic.w	r2, r2, #14
 8004a48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0202 	orr.w	r2, r2, #2
 8004b08:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7e1b      	ldrb	r3, [r3, #24]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_DSI_ConfigCommand+0x16>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e049      	b.n	8004bca <HAL_DSI_ConfigCommand+0xaa>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_DSI_ConfigCommand+0xb8>)
 8004b48:	400b      	ands	r3, r1
 8004b4a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b5a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004b60:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004b66:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004b6c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004b72:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004b78:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004b7e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004b84:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004b8a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004b90:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004b96:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0202 	bic.w	r2, r2, #2
 8004bae:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	fef080ff 	.word	0xfef080ff

08004bdc <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7e1b      	ldrb	r3, [r3, #24]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_DSI_ConfigFlowControl+0x16>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e016      	b.n	8004c20 <HAL_DSI_ConfigFlowControl+0x44>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7e1b      	ldrb	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_DSI_ConfigPhyTimer+0x16>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e084      	b.n	8004d4c <HAL_DSI_ConfigPhyTimer+0x120>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	441a      	add	r2, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	18ca      	adds	r2, r1, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	441a      	add	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4293      	cmp	r3, r2
 8004c84:	bf38      	it	cc
 8004c86:	4613      	movcc	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004c9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004cfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	021a      	lsls	r2, r3, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7e1b      	ldrb	r3, [r3, #24]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_DSI_ConfigHostTimeouts+0x16>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0b4      	b.n	8004ed8 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004d82:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6899      	ldr	r1, [r3, #8]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	021a      	lsls	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	b292      	uxth	r2, r2
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	041a      	lsls	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e06e      	b.n	8004fda <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fd fc03 	bl	8002708 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7f1b      	ldrb	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d12c      	bne.n	8004f7e <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004f32:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004f38:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004f3e:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f4a:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	d10b      	bne.n	8004f6e <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0202 	orr.w	r2, r2, #2
 8004f7c:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d108      	bne.n	8004f9a <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6819      	ldr	r1, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6892      	ldr	r2, [r2, #8]
 8004fa2:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68d2      	ldr	r2, [r2, #12]
 8004fac:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6912      	ldr	r2, [r2, #16]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6952      	ldr	r2, [r2, #20]
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6992      	ldr	r2, [r2, #24]
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b08b      	sub	sp, #44	; 0x2c
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <HAL_GFXMMU_ConfigLut+0x2a>
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4413      	add	r3, r2
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d903      	bls.n	8005016 <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005014:	e032      	b.n	800507c <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	3301      	adds	r3, #1
 800503a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8005044:	e016      	b.n	8005074 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	3304      	adds	r3, #4
 8005052:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	3304      	adds	r3, #4
 8005060:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3308      	adds	r3, #8
 8005066:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3308      	adds	r3, #8
 800506c:	617b      	str	r3, [r7, #20]
      current_line++;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d3e4      	bcc.n	8005046 <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 800507c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005080:	4618      	mov	r0, r3
 8005082:	372c      	adds	r7, #44	; 0x2c
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f804 	bl	80050d8 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 80050d0:	bf00      	nop
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80050fe:	e1ba      	b.n	8005476 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 81aa 	beq.w	8005470 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a55      	ldr	r2, [pc, #340]	; (8005274 <HAL_GPIO_Init+0x188>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d15d      	bne.n	80051e0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800512a:	2201      	movs	r2, #1
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	4013      	ands	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0201 	and.w	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	4313      	orrs	r3, r2
 800514c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005154:	4a48      	ldr	r2, [pc, #288]	; (8005278 <HAL_GPIO_Init+0x18c>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800515c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800515e:	4a46      	ldr	r2, [pc, #280]	; (8005278 <HAL_GPIO_Init+0x18c>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	08da      	lsrs	r2, r3, #3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3208      	adds	r2, #8
 8005172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005176:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	220f      	movs	r2, #15
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	4013      	ands	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	220b      	movs	r2, #11
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	08da      	lsrs	r2, r3, #3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3208      	adds	r2, #8
 80051aa:	69f9      	ldr	r1, [r7, #28]
 80051ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	2202      	movs	r2, #2
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e067      	b.n	80052b0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x104>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b12      	cmp	r3, #18
 80051ee:	d145      	bne.n	800527c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	08da      	lsrs	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3208      	adds	r2, #8
 80051f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	220f      	movs	r2, #15
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	4013      	ands	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 020f 	and.w	r2, r3, #15
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	08da      	lsrs	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3208      	adds	r2, #8
 8005236:	69f9      	ldr	r1, [r7, #28]
 8005238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	2203      	movs	r2, #3
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	4013      	ands	r3, r2
 8005252:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0203 	and.w	r2, r3, #3
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e01e      	b.n	80052b0 <HAL_GPIO_Init+0x1c4>
 8005272:	bf00      	nop
 8005274:	46020000 	.word	0x46020000
 8005278:	0800e328 	.word	0x0800e328
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	2203      	movs	r2, #3
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	4013      	ands	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 0203 	and.w	r2, r3, #3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d00b      	beq.n	80052d0 <HAL_GPIO_Init+0x1e4>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d007      	beq.n	80052d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052c4:	2b11      	cmp	r3, #17
 80052c6:	d003      	beq.n	80052d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b12      	cmp	r3, #18
 80052ce:	d130      	bne.n	8005332 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005306:	2201      	movs	r2, #1
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	4013      	ands	r3, r2
 8005314:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0201 	and.w	r2, r3, #1
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d017      	beq.n	800536a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	4013      	ands	r3, r2
 8005350:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d07c      	beq.n	8005470 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005376:	4a47      	ldr	r2, [pc, #284]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	3318      	adds	r3, #24
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	4013      	ands	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0a9a      	lsrs	r2, r3, #10
 800539e:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <HAL_GPIO_Init+0x3ac>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	f002 0203 	and.w	r2, r2, #3
 80053a8:	00d2      	lsls	r2, r2, #3
 80053aa:	4093      	lsls	r3, r2
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80053b2:	4938      	ldr	r1, [pc, #224]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	089b      	lsrs	r3, r3, #2
 80053b8:	3318      	adds	r3, #24
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80053c0:	4b34      	ldr	r3, [pc, #208]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80053ea:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005414:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 8005416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	43db      	mvns	r3, r3
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	4013      	ands	r3, r2
 8005424:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 8005444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005448:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	43db      	mvns	r3, r3
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	4013      	ands	r3, r2
 8005452:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <HAL_GPIO_Init+0x3a8>)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3301      	adds	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f ae3d 	bne.w	8005100 <HAL_GPIO_Init+0x14>
  }
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	3724      	adds	r7, #36	; 0x24
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	46022000 	.word	0x46022000
 8005498:	002f7f7f 	.word	0x002f7f7f

0800549c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
 80054a8:	4613      	mov	r3, r2
 80054aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054ac:	787b      	ldrb	r3, [r7, #1]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054b2:	887a      	ldrh	r2, [r7, #2]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80054b8:	e002      	b.n	80054c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e01c      	b.n	8005518 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	795b      	ldrb	r3, [r3, #5]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd f936 	bl	8002758 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	791b      	ldrb	r3, [r3, #4]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_GPU2D_Init+0x32>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e00c      	b.n	8005518 <HAL_GPU2D_Init+0x4c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	33f8      	adds	r3, #248	; 0xf8
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	33f8      	adds	r3, #248	; 0xf8
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 0201 	bic.w	r2, r3, #1
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800555c:	68f9      	ldr	r1, [r7, #12]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f80f 	bl	8005582 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f80f 	bl	8005598 <HAL_GPU2D_ErrorCallback>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 80055a0:	e7fe      	b.n	80055a0 <HAL_GPU2D_ErrorCallback+0x8>

080055a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e08d      	b.n	80056d0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fd f905 	bl	80027d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2224      	movs	r2, #36	; 0x24
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005602:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	e006      	b.n	800562a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005628:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d108      	bne.n	8005644 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	e007      	b.n	8005654 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005652:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005666:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005676:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69d9      	ldr	r1, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	460b      	mov	r3, r1
 80056ec:	813b      	strh	r3, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	f040 80f9 	bne.w	80058f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_I2C_Mem_Write+0x34>
 8005706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0ed      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_I2C_Mem_Write+0x4e>
 8005722:	2302      	movs	r3, #2
 8005724:	e0e6      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800572e:	f7fd fff7 	bl	8003720 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2319      	movs	r3, #25
 800573a:	2201      	movs	r2, #1
 800573c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fac3 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0d1      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	; 0x21
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	; 0x40
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005778:	88f8      	ldrh	r0, [r7, #6]
 800577a:	893a      	ldrh	r2, [r7, #8]
 800577c:	8979      	ldrh	r1, [r7, #10]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4603      	mov	r3, r0
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f9d3 	bl	8005b34 <I2C_RequestMemoryWrite>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0a9      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2bff      	cmp	r3, #255	; 0xff
 80057a8:	d90e      	bls.n	80057c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	8979      	ldrh	r1, [r7, #10]
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fc3d 	bl	8006040 <I2C_TransferConfig>
 80057c6:	e00f      	b.n	80057e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	8979      	ldrh	r1, [r7, #10]
 80057da:	2300      	movs	r3, #0
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fc2c 	bl	8006040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fabc 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e07b      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d034      	beq.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d130      	bne.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	2200      	movs	r2, #0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fa3f 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04d      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2bff      	cmp	r3, #255	; 0xff
 8005860:	d90e      	bls.n	8005880 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fbe1 	bl	8006040 <I2C_TransferConfig>
 800587e:	e00f      	b.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588e:	b2da      	uxtb	r2, r3
 8005890:	8979      	ldrh	r1, [r7, #10]
 8005892:	2300      	movs	r3, #0
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fbd0 	bl	8006040 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d19e      	bne.n	80057e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 faa2 	bl	8005df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e01a      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_I2C_Mem_Write+0x224>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	fe00e800 	.word	0xfe00e800

08005900 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	4603      	mov	r3, r0
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	460b      	mov	r3, r1
 8005914:	813b      	strh	r3, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	f040 80fd 	bne.w	8005b22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_I2C_Mem_Read+0x34>
 800592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0f1      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Mem_Read+0x4e>
 800594a:	2302      	movs	r3, #2
 800594c:	e0ea      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005956:	f7fd fee3 	bl	8003720 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2319      	movs	r3, #25
 8005962:	2201      	movs	r2, #1
 8005964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f9af 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0d5      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2222      	movs	r2, #34	; 0x22
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2240      	movs	r2, #64	; 0x40
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059a0:	88f8      	ldrh	r0, [r7, #6]
 80059a2:	893a      	ldrh	r2, [r7, #8]
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4603      	mov	r3, r0
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f913 	bl	8005bdc <I2C_RequestMemoryRead>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0ad      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2bff      	cmp	r3, #255	; 0xff
 80059d0:	d90e      	bls.n	80059f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	4b52      	ldr	r3, [pc, #328]	; (8005b2c <HAL_I2C_Mem_Read+0x22c>)
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fb29 	bl	8006040 <I2C_TransferConfig>
 80059ee:	e00f      	b.n	8005a10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	8979      	ldrh	r1, [r7, #10]
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_I2C_Mem_Read+0x22c>)
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fb18 	bl	8006040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	2104      	movs	r1, #4
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f956 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07c      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d034      	beq.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d130      	bne.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	2200      	movs	r2, #0
 8005a76:	2180      	movs	r1, #128	; 0x80
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f927 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e04d      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2bff      	cmp	r3, #255	; 0xff
 8005a90:	d90e      	bls.n	8005ab0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	8979      	ldrh	r1, [r7, #10]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fac9 	bl	8006040 <I2C_TransferConfig>
 8005aae:	e00f      	b.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fab8 	bl	8006040 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d19a      	bne.n	8005a10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f98a 	bl	8005df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e01a      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2220      	movs	r2, #32
 8005af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_I2C_Mem_Read+0x230>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	80002400 	.word	0x80002400
 8005b30:	fe00e800 	.word	0xfe00e800

08005b34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	460b      	mov	r3, r1
 8005b48:	813b      	strh	r3, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <I2C_RequestMemoryWrite+0xa4>)
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fa6f 	bl	8006040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f8ff 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e02c      	b.n	8005bd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d105      	bne.n	8005b88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7c:	893b      	ldrh	r3, [r7, #8]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
 8005b86:	e015      	b.n	8005bb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b88:	893b      	ldrh	r3, [r7, #8]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f8e5 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e012      	b.n	8005bd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005baa:	893b      	ldrh	r3, [r7, #8]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2180      	movs	r1, #128	; 0x80
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f884 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	80002000 	.word	0x80002000

08005bdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	461a      	mov	r2, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	817b      	strh	r3, [r7, #10]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	813b      	strh	r3, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <I2C_RequestMemoryRead+0xa4>)
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2300      	movs	r3, #0
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa1c 	bl	8006040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f8ac 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e02c      	b.n	8005c76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c22:	893b      	ldrh	r3, [r7, #8]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c2c:	e015      	b.n	8005c5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c2e:	893b      	ldrh	r3, [r7, #8]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	69b9      	ldr	r1, [r7, #24]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f892 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e012      	b.n	8005c76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2200      	movs	r2, #0
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f831 	bl	8005ccc <I2C_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	80002000 	.word	0x80002000

08005c84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d103      	bne.n	8005ca2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d007      	beq.n	8005cc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	619a      	str	r2, [r3, #24]
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cdc:	e031      	b.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce4:	d02d      	beq.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce6:	f7fd fd1b 	bl	8003720 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d122      	bne.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4013      	ands	r3, r2
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d113      	bne.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00f      	b.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d0be      	beq.n	8005cde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d76:	e033      	b.n	8005de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f87f 	bl	8005e80 <I2C_IsErrorOccurred>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e031      	b.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d025      	beq.n	8005de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7fd fcc4 	bl	8003720 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11a      	bne.n	8005de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d013      	beq.n	8005de0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	f043 0220 	orr.w	r2, r3, #32
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e007      	b.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d1c4      	bne.n	8005d78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e04:	e02f      	b.n	8005e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f838 	bl	8005e80 <I2C_IsErrorOccurred>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e02d      	b.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fd fc81 	bl	8003720 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d11a      	bne.n	8005e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d013      	beq.n	8005e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e007      	b.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d1c8      	bne.n	8005e06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d068      	beq.n	8005f7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eb4:	e049      	b.n	8005f4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d045      	beq.n	8005f4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fd fc2f 	bl	8003720 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_IsErrorOccurred+0x54>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d13a      	bne.n	8005f4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ede:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ee6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef6:	d121      	bne.n	8005f3c <I2C_IsErrorOccurred+0xbc>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efe:	d01d      	beq.n	8005f3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d01a      	beq.n	8005f3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f16:	f7fd fc03 	bl	8003720 <HAL_GetTick>
 8005f1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f1c:	e00e      	b.n	8005f3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f1e:	f7fd fbff 	bl	8003720 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b19      	cmp	r3, #25
 8005f2a:	d907      	bls.n	8005f3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f043 0320 	orr.w	r3, r3, #32
 8005f32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005f3a:	e006      	b.n	8005f4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d1e9      	bne.n	8005f1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d003      	beq.n	8005f60 <I2C_IsErrorOccurred+0xe0>
 8005f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0aa      	beq.n	8005eb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f043 0304 	orr.w	r3, r3, #4
 8005f76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f043 0308 	orr.w	r3, r3, #8
 8005fb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	f043 0302 	orr.w	r3, r3, #2
 8005fda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01c      	beq.n	800602e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fe45 	bl	8005c84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6859      	ldr	r1, [r3, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <I2C_IsErrorOccurred+0x1bc>)
 8006006:	400b      	ands	r3, r1
 8006008:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800602e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006032:	4618      	mov	r0, r3
 8006034:	3728      	adds	r7, #40	; 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	fe00e800 	.word	0xfe00e800

08006040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	817b      	strh	r3, [r7, #10]
 800604e:	4613      	mov	r3, r2
 8006050:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006058:	7a7b      	ldrb	r3, [r7, #9]
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006060:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	4313      	orrs	r3, r2
 800606a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800606e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	0d5b      	lsrs	r3, r3, #21
 800607a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <I2C_TransferConfig+0x60>)
 8006080:	430b      	orrs	r3, r1
 8006082:	43db      	mvns	r3, r3
 8006084:	ea02 0103 	and.w	r1, r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	03ff63ff 	.word	0x03ff63ff

080060a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d138      	bne.n	800612c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e032      	b.n	800612e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b20      	cmp	r3, #32
 800614e:	d139      	bne.n	80061c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800615a:	2302      	movs	r3, #2
 800615c:	e033      	b.n	80061c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2224      	movs	r2, #36	; 0x24
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800618c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_ICACHE_Enable+0x1c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <HAL_ICACHE_Enable+0x1c>)
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40030400 	.word	0x40030400

080061f4 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <HAL_ICACHE_Disable+0x5c>)
 8006200:	2202      	movs	r2, #2
 8006202:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <HAL_ICACHE_Disable+0x5c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <HAL_ICACHE_Disable+0x5c>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006210:	f7fd fa86 	bl	8003720 <HAL_GetTick>
 8006214:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006216:	e00f      	b.n	8006238 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8006218:	f7fd fa82 	bl	8003720 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d908      	bls.n	8006238 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <HAL_ICACHE_Disable+0x5c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	71fb      	strb	r3, [r7, #7]
        break;
 8006236:	e005      	b.n	8006244 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_ICACHE_Disable+0x5c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e9      	bne.n	8006218 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8006244:	79fb      	ldrb	r3, [r7, #7]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40030400 	.word	0x40030400

08006254 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006262:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_ICACHE_EnableRemapRegion+0x98>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
 8006272:	e034      	b.n	80062de <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	009a      	lsls	r2, r3, #2
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800627a:	4413      	add	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
 800628e:	e026      	b.n	80062de <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800629c:	4013      	ands	r3, r2
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	425b      	negs	r3, r3
 80062ae:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80062b0:	401a      	ands	r2, r3
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	025a      	lsls	r2, r3, #9
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80062cc:	4313      	orrs	r3, r2
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40030400 	.word	0x40030400
 80062f0:	40030420 	.word	0x40030420
 80062f4:	07ff0000 	.word	0x07ff0000

080062f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e0bf      	b.n	800648a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fc fda0 	bl	8002e64 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800633a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006350:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_LTDC_Init+0x19c>)
 800636c:	400b      	ands	r3, r1
 800636e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68d9      	ldr	r1, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b3e      	ldr	r3, [pc, #248]	; (8006494 <HAL_LTDC_Init+0x19c>)
 800639a:	400b      	ands	r3, r1
 800639c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68d9      	ldr	r1, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6919      	ldr	r1, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b33      	ldr	r3, [pc, #204]	; (8006494 <HAL_LTDC_Init+0x19c>)
 80063c8:	400b      	ands	r3, r1
 80063ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6919      	ldr	r1, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6959      	ldr	r1, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <HAL_LTDC_Init+0x19c>)
 80063f6:	400b      	ands	r3, r1
 80063f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0206 	orr.w	r2, r2, #6
 8006466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	f000f800 	.word	0xf000f800

08006498 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d023      	beq.n	8006502 <HAL_LTDC_IRQHandler+0x6a>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01e      	beq.n	8006502 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0204 	bic.w	r2, r2, #4
 80064d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2204      	movs	r2, #4
 80064da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064e2:	f043 0201 	orr.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f86f 	bl	80065e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d023      	beq.n	8006554 <HAL_LTDC_IRQHandler+0xbc>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01e      	beq.n	8006554 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0202 	bic.w	r2, r2, #2
 8006524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2202      	movs	r2, #2
 800652c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006534:	f043 0202 	orr.w	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f846 	bl	80065e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01b      	beq.n	8006596 <HAL_LTDC_IRQHandler+0xfe>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d016      	beq.n	8006596 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f82f 	bl	80065f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_LTDC_IRQHandler+0x140>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0208 	bic.w	r2, r2, #8
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2208      	movs	r2, #8
 80065c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f818 	bl	8006608 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800661c:	b5b0      	push	{r4, r5, r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_LTDC_ConfigLayer+0x1a>
 8006632:	2302      	movs	r3, #2
 8006634:	e02c      	b.n	8006690 <HAL_LTDC_ConfigLayer+0x74>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2134      	movs	r1, #52	; 0x34
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4614      	mov	r4, r2
 800665a:	461d      	mov	r5, r3
 800665c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f811 	bl	8006698 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2201      	movs	r2, #1
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bdb0      	pop	{r4, r5, r7, pc}

08006698 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006698:	b480      	push	{r7}
 800669a:	b089      	sub	sp, #36	; 0x24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b4:	4413      	add	r3, r2
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	4413      	add	r3, r2
 80066c6:	3384      	adds	r3, #132	; 0x84
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	4611      	mov	r1, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	01d2      	lsls	r2, r2, #7
 80066d4:	440a      	add	r2, r1
 80066d6:	3284      	adds	r2, #132	; 0x84
 80066d8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80066dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	440b      	add	r3, r1
 80066fe:	3384      	adds	r3, #132	; 0x84
 8006700:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006706:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006716:	4413      	add	r3, r2
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	4413      	add	r3, r2
 8006728:	3384      	adds	r3, #132	; 0x84
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	4611      	mov	r1, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	01d2      	lsls	r2, r2, #7
 8006736:	440a      	add	r2, r1
 8006738:	3284      	adds	r2, #132	; 0x84
 800673a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800673e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800674e:	4413      	add	r3, r2
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4619      	mov	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	01db      	lsls	r3, r3, #7
 800675c:	440b      	add	r3, r1
 800675e:	3384      	adds	r3, #132	; 0x84
 8006760:	4619      	mov	r1, r3
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4313      	orrs	r3, r2
 8006766:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4413      	add	r3, r2
 8006774:	3384      	adds	r3, #132	; 0x84
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4611      	mov	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	01d2      	lsls	r2, r2, #7
 8006782:	440a      	add	r2, r1
 8006784:	3284      	adds	r2, #132	; 0x84
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	01db      	lsls	r3, r3, #7
 8006796:	4413      	add	r3, r2
 8006798:	3384      	adds	r3, #132	; 0x84
 800679a:	461a      	mov	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	01db      	lsls	r3, r3, #7
 80067c8:	4413      	add	r3, r2
 80067ca:	3384      	adds	r3, #132	; 0x84
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	01db      	lsls	r3, r3, #7
 80067d8:	4413      	add	r3, r2
 80067da:	3384      	adds	r3, #132	; 0x84
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067e8:	461a      	mov	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	01db      	lsls	r3, r3, #7
 80067fc:	440b      	add	r3, r1
 80067fe:	3384      	adds	r3, #132	; 0x84
 8006800:	4619      	mov	r1, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	01db      	lsls	r3, r3, #7
 8006812:	4413      	add	r3, r2
 8006814:	3384      	adds	r3, #132	; 0x84
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	6812      	ldr	r2, [r2, #0]
 800681c:	4611      	mov	r1, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	01d2      	lsls	r2, r2, #7
 8006822:	440a      	add	r2, r1
 8006824:	3284      	adds	r2, #132	; 0x84
 8006826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800682a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	01db      	lsls	r3, r3, #7
 8006836:	4413      	add	r3, r2
 8006838:	3384      	adds	r3, #132	; 0x84
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	01db      	lsls	r3, r3, #7
 800684c:	4413      	add	r3, r2
 800684e:	3384      	adds	r3, #132	; 0x84
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	4611      	mov	r1, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	01d2      	lsls	r2, r2, #7
 800685c:	440a      	add	r2, r1
 800685e:	3284      	adds	r2, #132	; 0x84
 8006860:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6809      	ldr	r1, [r1, #0]
 8006876:	4608      	mov	r0, r1
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	01c9      	lsls	r1, r1, #7
 800687c:	4401      	add	r1, r0
 800687e:	3184      	adds	r1, #132	; 0x84
 8006880:	4313      	orrs	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	01db      	lsls	r3, r3, #7
 800688e:	4413      	add	r3, r2
 8006890:	3384      	adds	r3, #132	; 0x84
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	3384      	adds	r3, #132	; 0x84
 80068a2:	461a      	mov	r2, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	01db      	lsls	r3, r3, #7
 80068b2:	4413      	add	r3, r2
 80068b4:	3384      	adds	r3, #132	; 0x84
 80068b6:	461a      	mov	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068c6:	2304      	movs	r3, #4
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	e01b      	b.n	8006904 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d102      	bne.n	80068da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068d4:	2303      	movs	r3, #3
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e014      	b.n	8006904 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d00b      	beq.n	80068fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d007      	beq.n	80068fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d003      	beq.n	80068fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068f6:	2b07      	cmp	r3, #7
 80068f8:	d102      	bne.n	8006900 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80068fa:	2302      	movs	r3, #2
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e001      	b.n	8006904 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006900:	2301      	movs	r3, #1
 8006902:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	01db      	lsls	r3, r3, #7
 800690e:	4413      	add	r3, r2
 8006910:	3384      	adds	r3, #132	; 0x84
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	4611      	mov	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	01d2      	lsls	r2, r2, #7
 800691e:	440a      	add	r2, r1
 8006920:	3284      	adds	r2, #132	; 0x84
 8006922:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006926:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	1acb      	subs	r3, r1, r3
 800693e:	69f9      	ldr	r1, [r7, #28]
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6809      	ldr	r1, [r1, #0]
 800694a:	4608      	mov	r0, r1
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	01c9      	lsls	r1, r1, #7
 8006950:	4401      	add	r1, r0
 8006952:	3184      	adds	r1, #132	; 0x84
 8006954:	4313      	orrs	r3, r2
 8006956:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	4413      	add	r3, r2
 8006964:	3384      	adds	r3, #132	; 0x84
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	4611      	mov	r1, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	01d2      	lsls	r2, r2, #7
 8006972:	440a      	add	r2, r1
 8006974:	3284      	adds	r2, #132	; 0x84
 8006976:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	01db      	lsls	r3, r3, #7
 800698a:	4413      	add	r3, r2
 800698c:	3384      	adds	r3, #132	; 0x84
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	4413      	add	r3, r2
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	4611      	mov	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	01d2      	lsls	r2, r2, #7
 80069b0:	440a      	add	r2, r1
 80069b2:	3284      	adds	r2, #132	; 0x84
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
}
 80069ba:	bf00      	nop
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	73fb      	strb	r3, [r7, #15]
 80069de:	e141      	b.n	8006c64 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f947 	bl	8006c78 <MDF_GetHandleNumberFromInstance>
 80069ea:	4603      	mov	r3, r0
 80069ec:	4a86      	ldr	r2, [pc, #536]	; (8006c08 <HAL_MDF_Init+0x240>)
 80069ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e133      	b.n	8006c64 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fb fd01 	bl	8002404 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006a02:	4b82      	ldr	r3, [pc, #520]	; (8006c0c <HAL_MDF_Init+0x244>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11d      	bne.n	8006a46 <HAL_MDF_Init+0x7e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a80      	ldr	r2, [pc, #512]	; (8006c10 <HAL_MDF_Init+0x248>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d023      	beq.n	8006a5c <HAL_MDF_Init+0x94>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7e      	ldr	r2, [pc, #504]	; (8006c14 <HAL_MDF_Init+0x24c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01e      	beq.n	8006a5c <HAL_MDF_Init+0x94>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_MDF_Init+0x250>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d019      	beq.n	8006a5c <HAL_MDF_Init+0x94>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7b      	ldr	r2, [pc, #492]	; (8006c1c <HAL_MDF_Init+0x254>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d014      	beq.n	8006a5c <HAL_MDF_Init+0x94>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7a      	ldr	r2, [pc, #488]	; (8006c20 <HAL_MDF_Init+0x258>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <HAL_MDF_Init+0x94>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a78      	ldr	r2, [pc, #480]	; (8006c24 <HAL_MDF_Init+0x25c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00a      	beq.n	8006a5c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006a46:	4b78      	ldr	r3, [pc, #480]	; (8006c28 <HAL_MDF_Init+0x260>)
 8006a48:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 8090 	bne.w	8006b70 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a75      	ldr	r2, [pc, #468]	; (8006c2c <HAL_MDF_Init+0x264>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	f040 808a 	bne.w	8006b70 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a72      	ldr	r2, [pc, #456]	; (8006c2c <HAL_MDF_Init+0x264>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <HAL_MDF_Init+0xa2>
 8006a66:	4b72      	ldr	r3, [pc, #456]	; (8006c30 <HAL_MDF_Init+0x268>)
 8006a68:	e000      	b.n	8006a6c <HAL_MDF_Init+0xa4>
 8006a6a:	4b72      	ldr	r3, [pc, #456]	; (8006c34 <HAL_MDF_Init+0x26c>)
 8006a6c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da02      	bge.n	8006a7c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]
 8006a7a:	e079      	b.n	8006b70 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a63      	ldr	r2, [pc, #396]	; (8006c10 <HAL_MDF_Init+0x248>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d018      	beq.n	8006ab8 <HAL_MDF_Init+0xf0>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a62      	ldr	r2, [pc, #392]	; (8006c14 <HAL_MDF_Init+0x24c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <HAL_MDF_Init+0xf0>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a60      	ldr	r2, [pc, #384]	; (8006c18 <HAL_MDF_Init+0x250>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <HAL_MDF_Init+0xf0>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a5f      	ldr	r2, [pc, #380]	; (8006c1c <HAL_MDF_Init+0x254>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_MDF_Init+0xf0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a5d      	ldr	r2, [pc, #372]	; (8006c20 <HAL_MDF_Init+0x258>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_MDF_Init+0xf0>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a5c      	ldr	r2, [pc, #368]	; (8006c24 <HAL_MDF_Init+0x25c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	061b      	lsls	r3, r3, #24
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7b1b      	ldrb	r3, [r3, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d137      	bne.n	8006b64 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006b04:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006b0c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7e1b      	ldrb	r3, [r3, #24]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d123      	bne.n	8006b64 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a3b      	ldr	r2, [pc, #236]	; (8006c10 <HAL_MDF_Init+0x248>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d012      	beq.n	8006b4c <HAL_MDF_Init+0x184>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a3a      	ldr	r2, [pc, #232]	; (8006c14 <HAL_MDF_Init+0x24c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00d      	beq.n	8006b4c <HAL_MDF_Init+0x184>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a38      	ldr	r2, [pc, #224]	; (8006c18 <HAL_MDF_Init+0x250>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d008      	beq.n	8006b4c <HAL_MDF_Init+0x184>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a37      	ldr	r2, [pc, #220]	; (8006c1c <HAL_MDF_Init+0x254>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <HAL_MDF_Init+0x184>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a35      	ldr	r2, [pc, #212]	; (8006c20 <HAL_MDF_Init+0x258>)
 8006b4a:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f043 0210 	orr.w	r2, r3, #16
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f043 0201 	orr.w	r2, r3, #1
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d128      	bne.n	8006bc8 <HAL_MDF_Init+0x200>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d123      	bne.n	8006bc8 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da02      	bge.n	8006b90 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
 8006b8e:	e01b      	b.n	8006bc8 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006ba8:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d14a      	bne.n	8006c64 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 021f 	bic.w	r2, r2, #31
 8006bdc:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <HAL_MDF_Init+0x264>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d11e      	bne.n	8006c38 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <HAL_MDF_Init+0x260>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <HAL_MDF_Init+0x260>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e01d      	b.n	8006c42 <HAL_MDF_Init+0x27a>
 8006c06:	bf00      	nop
 8006c08:	2000147c 	.word	0x2000147c
 8006c0c:	20001474 	.word	0x20001474
 8006c10:	40025080 	.word	0x40025080
 8006c14:	40025100 	.word	0x40025100
 8006c18:	40025180 	.word	0x40025180
 8006c1c:	40025200 	.word	0x40025200
 8006c20:	40025280 	.word	0x40025280
 8006c24:	40025300 	.word	0x40025300
 8006c28:	20001478 	.word	0x20001478
 8006c2c:	46024080 	.word	0x46024080
 8006c30:	46024000 	.word	0x46024000
 8006c34:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <HAL_MDF_Init+0x2a8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <HAL_MDF_Init+0x2a8>)
 8006c40:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f816 	bl	8006c78 <MDF_GetHandleNumberFromInstance>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4909      	ldr	r1, [pc, #36]	; (8006c74 <HAL_MDF_Init+0x2ac>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20001474 	.word	0x20001474
 8006c74:	2000147c 	.word	0x2000147c

08006c78 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <MDF_GetHandleNumberFromInstance+0x70>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d102      	bne.n	8006c8e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e024      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a16      	ldr	r2, [pc, #88]	; (8006cec <MDF_GetHandleNumberFromInstance+0x74>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d102      	bne.n	8006c9c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8006c96:	2301      	movs	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e01d      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <MDF_GetHandleNumberFromInstance+0x78>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d102      	bne.n	8006caa <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e016      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <MDF_GetHandleNumberFromInstance+0x7c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d102      	bne.n	8006cb8 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e00f      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <MDF_GetHandleNumberFromInstance+0x80>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d102      	bne.n	8006cc6 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e008      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <MDF_GetHandleNumberFromInstance+0x84>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d102      	bne.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8006cce:	2305      	movs	r3, #5
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e001      	b.n	8006cd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8006cd4:	2306      	movs	r3, #6
 8006cd6:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40025080 	.word	0x40025080
 8006cec:	40025100 	.word	0x40025100
 8006cf0:	40025180 	.word	0x40025180
 8006cf4:	40025200 	.word	0x40025200
 8006cf8:	40025280 	.word	0x40025280
 8006cfc:	40025300 	.word	0x40025300

08006d00 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f043 0201 	orr.w	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006d2c:	f7fc fcf8 	bl	8003720 <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e0a5      	b.n	8006e8a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 809e 	bne.w	8006e8a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fc f8de 	bl	8002f10 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006d54:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fae3 	bl	8007324 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	4b4b      	ldr	r3, [pc, #300]	; (8006e94 <HAL_OSPI_Init+0x174>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	68d1      	ldr	r1, [r2, #12]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6912      	ldr	r2, [r2, #16]
 8006d70:	3a01      	subs	r2, #1
 8006d72:	0412      	lsls	r2, r2, #16
 8006d74:	4311      	orrs	r1, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6952      	ldr	r2, [r2, #20]
 8006d7a:	3a01      	subs	r2, #1
 8006d7c:	0212      	lsls	r2, r2, #8
 8006d7e:	4311      	orrs	r1, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d84:	4311      	orrs	r1, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	69d2      	ldr	r2, [r2, #28]
 8006d8a:	4311      	orrs	r1, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dc4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	021a      	lsls	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2200      	movs	r2, #0
 8006dea:	2120      	movs	r1, #32
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 ffd7 	bl	8007da0 <OSPI_WaitFlagStateUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d146      	bne.n	8006e8a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e32:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d107      	bne.n	8006e72 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0202 	orr.w	r2, r2, #2
 8006e70:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e7a:	d103      	bne.n	8006e84 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
 8006e82:	e002      	b.n	8006e8a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	f8e0c0f4 	.word	0xf8e0c0f4

08006e98 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3350      	adds	r3, #80	; 0x50
 8006ea6:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebc:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d03a      	beq.n	8006f3e <HAL_OSPI_IRQHandler+0xa6>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d035      	beq.n	8006f3e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b18      	cmp	r3, #24
 8006ed6:	d10f      	bne.n	8006ef8 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	649a      	str	r2, [r3, #72]	; 0x48
 8006ef6:	e012      	b.n	8006f1e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b28      	cmp	r3, #40	; 0x28
 8006efc:	d10f      	bne.n	8006f1e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	1e5a      	subs	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f34:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f943 	bl	80071c2 <HAL_OSPI_FifoThresholdCallback>
 8006f3c:	e0e7      	b.n	800710e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d067      	beq.n	8007018 <HAL_OSPI_IRQHandler+0x180>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d062      	beq.n	8007018 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b28      	cmp	r3, #40	; 0x28
 8006f56:	d131      	bne.n	8006fbc <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_OSPI_IRQHandler+0xf4>
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f84:	1e5a      	subs	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006f8a:	e0bd      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 80b9 	bne.w	8007108 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006fac:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f918 	bl	80071ea <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006fba:	e0a5      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006fd2:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b18      	cmp	r3, #24
 8006fde:	d103      	bne.n	8006fe8 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f90c 	bl	80071fe <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006fe6:	e08f      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d103      	bne.n	8006ff6 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8f1 	bl	80071d6 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006ff4:	e088      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	f040 8084 	bne.w	8007108 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8d0 	bl	80071ae <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800700e:	e07b      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8c2 	bl	800719a <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8007016:	e077      	b.n	8007108 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01e      	beq.n	8007060 <HAL_OSPI_IRQHandler+0x1c8>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d019      	beq.n	8007060 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007050:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8da 	bl	8007212 <HAL_OSPI_StatusMatchCallback>
 800705e:	e056      	b.n	800710e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d03c      	beq.n	80070e4 <HAL_OSPI_IRQHandler+0x24c>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d037      	beq.n	80070e4 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2201      	movs	r2, #1
 800707a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800708a:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0204 	bic.w	r2, r2, #4
 80070ae:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_OSPI_IRQHandler+0x280>)
 80070b6:	66da      	str	r2, [r3, #108]	; 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fc fe58 	bl	8003d72 <HAL_DMA_Abort_IT>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d021      	beq.n	800710c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f863 	bl	800719a <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80070d4:	e01a      	b.n	800710c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f85c 	bl	800719a <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80070e2:	e013      	b.n	800710c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <HAL_OSPI_IRQHandler+0x276>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2210      	movs	r2, #16
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f890 	bl	8007226 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007106:	e002      	b.n	800710e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800710c:	bf00      	nop
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	08007d29 	.word	0x08007d29

0800711c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007128:	f7fc fafa 	bl	8003720 <HAL_GetTick>
 800712c:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d002      	beq.n	8007140 <HAL_OSPI_HyperbusCfg+0x24>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d122      	bne.n	8007186 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2200      	movs	r2, #0
 8007148:	2120      	movs	r1, #32
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fe28 	bl	8007da0 <OSPI_WaitFlagStateUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11a      	bne.n	8007190 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	041a      	lsls	r2, r3, #16
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	431a      	orrs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	ea42 0103 	orr.w	r1, r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2202      	movs	r2, #2
 8007182:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007184:	e004      	b.n	8007190 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2210      	movs	r2, #16
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8007190:	7ffb      	ldrb	r3, [r7, #31]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3720      	adds	r7, #32
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af02      	add	r7, sp, #8
 8007240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007246:	f7fc fa6b 	bl	8003720 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007250:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_OSPI_Abort+0x2c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d052      	beq.n	800730c <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d014      	beq.n	800729e <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0204 	bic.w	r2, r2, #4
 8007282:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	4618      	mov	r0, r3
 800728a:	f7fc fcf6 	bl	8003c7a <HAL_DMA_Abort>
 800728e:	4603      	mov	r3, r0
 8007290:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02b      	beq.n	8007304 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0202 	orr.w	r2, r2, #2
 80072ba:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2201      	movs	r2, #1
 80072c6:	2102      	movs	r1, #2
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd69 	bl	8007da0 <OSPI_WaitFlagStateUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11f      	bne.n	8007318 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2202      	movs	r2, #2
 80072de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2120      	movs	r1, #32
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd57 	bl	8007da0 <OSPI_WaitFlagStateUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007302:	e009      	b.n	8007318 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800730a:	e005      	b.n	8007318 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2210      	movs	r2, #16
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
 8007316:	e000      	b.n	800731a <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007318:	bf00      	nop
  }

  /* Return function status */
  return status;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b094      	sub	sp, #80	; 0x50
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a9d      	ldr	r2, [pc, #628]	; (80075d8 <HAL_OSPIM_Config+0x294>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d105      	bne.n	8007372 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007370:	e004      	b.n	800737c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007372:	2301      	movs	r3, #1
 8007374:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007382:	e01d      	b.n	80073c0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007388:	3301      	adds	r3, #1
 800738a:	b2d8      	uxtb	r0, r3
 800738c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007390:	f107 0114 	add.w	r1, r7, #20
 8007394:	4613      	mov	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	4413      	add	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	440b      	add	r3, r1
 800739e:	4619      	mov	r1, r3
 80073a0:	f000 fd3e 	bl	8007e20 <OSPIM_GetConfig>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2208      	movs	r2, #8
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80073b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073ba:	3301      	adds	r3, #1
 80073bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d9dd      	bls.n	8007384 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80073c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 849e 	bne.w	8007d0e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80073d2:	4b81      	ldr	r3, [pc, #516]	; (80075d8 <HAL_OSPIM_Config+0x294>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80073de:	4b7e      	ldr	r3, [pc, #504]	; (80075d8 <HAL_OSPIM_Config+0x294>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a7d      	ldr	r2, [pc, #500]	; (80075d8 <HAL_OSPIM_Config+0x294>)
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80073ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80073f6:	4b79      	ldr	r3, [pc, #484]	; (80075dc <HAL_OSPIM_Config+0x298>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007402:	4b76      	ldr	r3, [pc, #472]	; (80075dc <HAL_OSPIM_Config+0x298>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a75      	ldr	r2, [pc, #468]	; (80075dc <HAL_OSPIM_Config+0x298>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800740e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007412:	f043 0302 	orr.w	r3, r3, #2
 8007416:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800741a:	4971      	ldr	r1, [pc, #452]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800741c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	3350      	adds	r3, #80	; 0x50
 8007428:	443b      	add	r3, r7
 800742a:	3b34      	subs	r3, #52	; 0x34
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3b01      	subs	r3, #1
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	486a      	ldr	r0, [pc, #424]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 8007438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743a:	4613      	mov	r3, r2
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4413      	add	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	3350      	adds	r3, #80	; 0x50
 8007444:	443b      	add	r3, r7
 8007446:	3b34      	subs	r3, #52	; 0x34
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4403      	add	r3, r0
 8007454:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007456:	4b62      	ldr	r3, [pc, #392]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80c0 	beq.w	80075e4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007464:	4b5e      	ldr	r3, [pc, #376]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a5d      	ldr	r2, [pc, #372]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8007470:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 8162 	bne.w	800773e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800747a:	4959      	ldr	r1, [pc, #356]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800747c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	3350      	adds	r3, #80	; 0x50
 800748a:	443b      	add	r3, r7
 800748c:	3b3c      	subs	r3, #60	; 0x3c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3b01      	subs	r3, #1
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	6859      	ldr	r1, [r3, #4]
 8007498:	4851      	ldr	r0, [pc, #324]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800749a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	3350      	adds	r3, #80	; 0x50
 80074a8:	443b      	add	r3, r7
 80074aa:	3b3c      	subs	r3, #60	; 0x3c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f041 0202 	orr.w	r2, r1, #2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4403      	add	r3, r0
 80074b8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80074ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	3350      	adds	r3, #80	; 0x50
 80074c8:	443b      	add	r3, r7
 80074ca:	3b38      	subs	r3, #56	; 0x38
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01f      	beq.n	8007512 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80074d2:	4943      	ldr	r1, [pc, #268]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 80074d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	3350      	adds	r3, #80	; 0x50
 80074e2:	443b      	add	r3, r7
 80074e4:	3b38      	subs	r3, #56	; 0x38
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	6859      	ldr	r1, [r3, #4]
 80074f0:	483b      	ldr	r0, [pc, #236]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 80074f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074f6:	4613      	mov	r3, r2
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	4413      	add	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	3350      	adds	r3, #80	; 0x50
 8007500:	443b      	add	r3, r7
 8007502:	3b38      	subs	r3, #56	; 0x38
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3b01      	subs	r3, #1
 8007508:	f041 0220 	orr.w	r2, r1, #32
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4403      	add	r3, r0
 8007510:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007512:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	3350      	adds	r3, #80	; 0x50
 8007520:	443b      	add	r3, r7
 8007522:	3b30      	subs	r3, #48	; 0x30
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d023      	beq.n	8007572 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800752a:	492d      	ldr	r1, [pc, #180]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800752c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007530:	4613      	mov	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	3350      	adds	r3, #80	; 0x50
 800753a:	443b      	add	r3, r7
 800753c:	3b30      	subs	r3, #48	; 0x30
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	4824      	ldr	r0, [pc, #144]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800754e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007552:	4613      	mov	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4413      	add	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	3350      	adds	r3, #80	; 0x50
 800755c:	443b      	add	r3, r7
 800755e:	3b30      	subs	r3, #48	; 0x30
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3b01      	subs	r3, #1
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4403      	add	r3, r0
 8007570:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007572:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	3350      	adds	r3, #80	; 0x50
 8007580:	443b      	add	r3, r7
 8007582:	3b2c      	subs	r3, #44	; 0x2c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80d9 	beq.w	800773e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800758c:	4914      	ldr	r1, [pc, #80]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 800758e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007592:	4613      	mov	r3, r2
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	4413      	add	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	3350      	adds	r3, #80	; 0x50
 800759c:	443b      	add	r3, r7
 800759e:	3b2c      	subs	r3, #44	; 0x2c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	440b      	add	r3, r1
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	480c      	ldr	r0, [pc, #48]	; (80075e0 <HAL_OSPIM_Config+0x29c>)
 80075b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075b4:	4613      	mov	r3, r2
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	4413      	add	r3, r2
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3350      	adds	r3, #80	; 0x50
 80075be:	443b      	add	r3, r7
 80075c0:	3b2c      	subs	r3, #44	; 0x2c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4403      	add	r3, r0
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e0b3      	b.n	800773e <HAL_OSPIM_Config+0x3fa>
 80075d6:	bf00      	nop
 80075d8:	420d1400 	.word	0x420d1400
 80075dc:	420d2400 	.word	0x420d2400
 80075e0:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80075e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e6:	4613      	mov	r3, r2
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	3350      	adds	r3, #80	; 0x50
 80075f0:	443b      	add	r3, r7
 80075f2:	3b3c      	subs	r3, #60	; 0x3c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80a1 	beq.w	800773e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075fc:	4993      	ldr	r1, [pc, #588]	; (800784c <HAL_OSPIM_Config+0x508>)
 80075fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	3350      	adds	r3, #80	; 0x50
 800760a:	443b      	add	r3, r7
 800760c:	3b3c      	subs	r3, #60	; 0x3c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3b01      	subs	r3, #1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	6859      	ldr	r1, [r3, #4]
 8007618:	488c      	ldr	r0, [pc, #560]	; (800784c <HAL_OSPIM_Config+0x508>)
 800761a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800761c:	4613      	mov	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	3350      	adds	r3, #80	; 0x50
 8007626:	443b      	add	r3, r7
 8007628:	3b3c      	subs	r3, #60	; 0x3c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	f021 0201 	bic.w	r2, r1, #1
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4403      	add	r3, r0
 8007636:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800763a:	4613      	mov	r3, r2
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	4413      	add	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	3350      	adds	r3, #80	; 0x50
 8007644:	443b      	add	r3, r7
 8007646:	3b38      	subs	r3, #56	; 0x38
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01d      	beq.n	800768a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800764e:	497f      	ldr	r1, [pc, #508]	; (800784c <HAL_OSPIM_Config+0x508>)
 8007650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	3350      	adds	r3, #80	; 0x50
 800765c:	443b      	add	r3, r7
 800765e:	3b38      	subs	r3, #56	; 0x38
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	4878      	ldr	r0, [pc, #480]	; (800784c <HAL_OSPIM_Config+0x508>)
 800766c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	3350      	adds	r3, #80	; 0x50
 8007678:	443b      	add	r3, r7
 800767a:	3b38      	subs	r3, #56	; 0x38
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3b01      	subs	r3, #1
 8007680:	f021 0210 	bic.w	r2, r1, #16
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4403      	add	r3, r0
 8007688:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800768a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768c:	4613      	mov	r3, r2
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	3350      	adds	r3, #80	; 0x50
 8007696:	443b      	add	r3, r7
 8007698:	3b30      	subs	r3, #48	; 0x30
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d021      	beq.n	80076e4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80076a0:	496a      	ldr	r1, [pc, #424]	; (800784c <HAL_OSPIM_Config+0x508>)
 80076a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a4:	4613      	mov	r3, r2
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	4413      	add	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	3350      	adds	r3, #80	; 0x50
 80076ae:	443b      	add	r3, r7
 80076b0:	3b30      	subs	r3, #48	; 0x30
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	4862      	ldr	r0, [pc, #392]	; (800784c <HAL_OSPIM_Config+0x508>)
 80076c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c4:	4613      	mov	r3, r2
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	4413      	add	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	3350      	adds	r3, #80	; 0x50
 80076ce:	443b      	add	r3, r7
 80076d0:	3b30      	subs	r3, #48	; 0x30
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4403      	add	r3, r0
 80076e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e6:	4613      	mov	r3, r2
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4413      	add	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	3350      	adds	r3, #80	; 0x50
 80076f0:	443b      	add	r3, r7
 80076f2:	3b2c      	subs	r3, #44	; 0x2c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d021      	beq.n	800773e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80076fa:	4954      	ldr	r1, [pc, #336]	; (800784c <HAL_OSPIM_Config+0x508>)
 80076fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	3350      	adds	r3, #80	; 0x50
 8007708:	443b      	add	r3, r7
 800770a:	3b2c      	subs	r3, #44	; 0x2c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	6859      	ldr	r1, [r3, #4]
 800771a:	484c      	ldr	r0, [pc, #304]	; (800784c <HAL_OSPIM_Config+0x508>)
 800771c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771e:	4613      	mov	r3, r2
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	4413      	add	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	3350      	adds	r3, #80	; 0x50
 8007728:	443b      	add	r3, r7
 800772a:	3b2c      	subs	r3, #44	; 0x2c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3b01      	subs	r3, #1
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4403      	add	r3, r0
 800773c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6819      	ldr	r1, [r3, #0]
 8007742:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007746:	4613      	mov	r3, r2
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	4413      	add	r3, r2
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	3350      	adds	r3, #80	; 0x50
 8007750:	443b      	add	r3, r7
 8007752:	3b3c      	subs	r3, #60	; 0x3c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4299      	cmp	r1, r3
 8007758:	d038      	beq.n	80077cc <HAL_OSPIM_Config+0x488>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007762:	4613      	mov	r3, r2
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	3350      	adds	r3, #80	; 0x50
 800776c:	443b      	add	r3, r7
 800776e:	3b38      	subs	r3, #56	; 0x38
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4299      	cmp	r1, r3
 8007774:	d02a      	beq.n	80077cc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6899      	ldr	r1, [r3, #8]
 800777a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	3350      	adds	r3, #80	; 0x50
 8007788:	443b      	add	r3, r7
 800778a:	3b34      	subs	r3, #52	; 0x34
 800778c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800778e:	4299      	cmp	r1, r3
 8007790:	d01c      	beq.n	80077cc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	68d9      	ldr	r1, [r3, #12]
 8007796:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800779a:	4613      	mov	r3, r2
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	4413      	add	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	3350      	adds	r3, #80	; 0x50
 80077a4:	443b      	add	r3, r7
 80077a6:	3b30      	subs	r3, #48	; 0x30
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d00e      	beq.n	80077cc <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6919      	ldr	r1, [r3, #16]
 80077b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077b6:	4613      	mov	r3, r2
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	3350      	adds	r3, #80	; 0x50
 80077c0:	443b      	add	r3, r7
 80077c2:	3b2c      	subs	r3, #44	; 0x2c
 80077c4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077c6:	4299      	cmp	r1, r3
 80077c8:	f040 810e 	bne.w	80079e8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077d4:	4613      	mov	r3, r2
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	4413      	add	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	3350      	adds	r3, #80	; 0x50
 80077de:	443b      	add	r3, r7
 80077e0:	3b3c      	subs	r3, #60	; 0x3c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d133      	bne.n	8007850 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077f0:	4613      	mov	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	3350      	adds	r3, #80	; 0x50
 80077fa:	443b      	add	r3, r7
 80077fc:	3b38      	subs	r3, #56	; 0x38
 80077fe:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007800:	4299      	cmp	r1, r3
 8007802:	d125      	bne.n	8007850 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	68d9      	ldr	r1, [r3, #12]
 8007808:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	3350      	adds	r3, #80	; 0x50
 8007816:	443b      	add	r3, r7
 8007818:	3b30      	subs	r3, #48	; 0x30
 800781a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800781c:	4299      	cmp	r1, r3
 800781e:	d117      	bne.n	8007850 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6919      	ldr	r1, [r3, #16]
 8007824:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007828:	4613      	mov	r3, r2
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	4413      	add	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	3350      	adds	r3, #80	; 0x50
 8007832:	443b      	add	r3, r7
 8007834:	3b2c      	subs	r3, #44	; 0x2c
 8007836:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007838:	4299      	cmp	r1, r3
 800783a:	d109      	bne.n	8007850 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800783c:	4b03      	ldr	r3, [pc, #12]	; (800784c <HAL_OSPIM_Config+0x508>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a02      	ldr	r2, [pc, #8]	; (800784c <HAL_OSPIM_Config+0x508>)
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	e0ce      	b.n	80079e8 <HAL_OSPIM_Config+0x6a4>
 800784a:	bf00      	nop
 800784c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007850:	49a4      	ldr	r1, [pc, #656]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007852:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007856:	4613      	mov	r3, r2
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	3350      	adds	r3, #80	; 0x50
 8007860:	443b      	add	r3, r7
 8007862:	3b3c      	subs	r3, #60	; 0x3c
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	489d      	ldr	r0, [pc, #628]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007870:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007874:	4613      	mov	r3, r2
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	3350      	adds	r3, #80	; 0x50
 800787e:	443b      	add	r3, r7
 8007880:	3b3c      	subs	r3, #60	; 0x3c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3b01      	subs	r3, #1
 8007886:	f021 0201 	bic.w	r2, r1, #1
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4403      	add	r3, r0
 800788e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007890:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	3350      	adds	r3, #80	; 0x50
 800789e:	443b      	add	r3, r7
 80078a0:	3b38      	subs	r3, #56	; 0x38
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01f      	beq.n	80078e8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80078a8:	498e      	ldr	r1, [pc, #568]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80078aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	3350      	adds	r3, #80	; 0x50
 80078b8:	443b      	add	r3, r7
 80078ba:	3b38      	subs	r3, #56	; 0x38
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3b01      	subs	r3, #1
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	6859      	ldr	r1, [r3, #4]
 80078c6:	4887      	ldr	r0, [pc, #540]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80078c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	3350      	adds	r3, #80	; 0x50
 80078d6:	443b      	add	r3, r7
 80078d8:	3b38      	subs	r3, #56	; 0x38
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	f021 0210 	bic.w	r2, r1, #16
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4403      	add	r3, r0
 80078e6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80078e8:	497e      	ldr	r1, [pc, #504]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80078ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	3350      	adds	r3, #80	; 0x50
 80078f8:	443b      	add	r3, r7
 80078fa:	3b34      	subs	r3, #52	; 0x34
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3b01      	subs	r3, #1
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	6859      	ldr	r1, [r3, #4]
 8007906:	4877      	ldr	r0, [pc, #476]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007908:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800790c:	4613      	mov	r3, r2
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	4413      	add	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	3350      	adds	r3, #80	; 0x50
 8007916:	443b      	add	r3, r7
 8007918:	3b34      	subs	r3, #52	; 0x34
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4403      	add	r3, r0
 8007926:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007928:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800792c:	4613      	mov	r3, r2
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	4413      	add	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	3350      	adds	r3, #80	; 0x50
 8007936:	443b      	add	r3, r7
 8007938:	3b30      	subs	r3, #48	; 0x30
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d023      	beq.n	8007988 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007940:	4968      	ldr	r1, [pc, #416]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007942:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007946:	4613      	mov	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4413      	add	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	3350      	adds	r3, #80	; 0x50
 8007950:	443b      	add	r3, r7
 8007952:	3b30      	subs	r3, #48	; 0x30
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3b01      	subs	r3, #1
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	6859      	ldr	r1, [r3, #4]
 8007962:	4860      	ldr	r0, [pc, #384]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007964:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007968:	4613      	mov	r3, r2
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	4413      	add	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	3350      	adds	r3, #80	; 0x50
 8007972:	443b      	add	r3, r7
 8007974:	3b30      	subs	r3, #48	; 0x30
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4403      	add	r3, r0
 8007986:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007988:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800798c:	4613      	mov	r3, r2
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	4413      	add	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	3350      	adds	r3, #80	; 0x50
 8007996:	443b      	add	r3, r7
 8007998:	3b2c      	subs	r3, #44	; 0x2c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d023      	beq.n	80079e8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80079a0:	4950      	ldr	r1, [pc, #320]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80079a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079a6:	4613      	mov	r3, r2
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	3350      	adds	r3, #80	; 0x50
 80079b0:	443b      	add	r3, r7
 80079b2:	3b2c      	subs	r3, #44	; 0x2c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	6859      	ldr	r1, [r3, #4]
 80079c2:	4848      	ldr	r0, [pc, #288]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80079c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079c8:	4613      	mov	r3, r2
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	3350      	adds	r3, #80	; 0x50
 80079d2:	443b      	add	r3, r7
 80079d4:	3b2c      	subs	r3, #44	; 0x2c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3b01      	subs	r3, #1
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4403      	add	r3, r0
 80079e6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80079e8:	4a3e      	ldr	r2, [pc, #248]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fc:	025b      	lsls	r3, r3, #9
 80079fe:	431a      	orrs	r2, r3
 8007a00:	4938      	ldr	r1, [pc, #224]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d018      	beq.n	8007a4c <HAL_OSPIM_Config+0x708>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a22:	d813      	bhi.n	8007a4c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	1e5a      	subs	r2, r3, #1
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d90a      	bls.n	8007a4c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	4927      	ldr	r1, [pc, #156]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 809a 	beq.w	8007b8e <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007a5a:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f023 0203 	bic.w	r2, r3, #3
 8007a6c:	491d      	ldr	r1, [pc, #116]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a98:	4912      	ldr	r1, [pc, #72]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	f042 0210 	orr.w	r2, r2, #16
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d018      	beq.n	8007ae8 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ab6:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007acc:	4905      	ldr	r1, [pc, #20]	; (8007ae4 <HAL_OSPIM_Config+0x7a0>)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	e01b      	b.n	8007b1c <HAL_OSPIM_Config+0x7d8>
 8007ae4:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d015      	beq.n	8007b1c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007af0:	4a8a      	ldr	r2, [pc, #552]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b06:	4985      	ldr	r1, [pc, #532]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d016      	beq.n	8007b56 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b28:	4a7c      	ldr	r2, [pc, #496]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b3e:	4977      	ldr	r1, [pc, #476]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	e0c3      	b.n	8007cde <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80bf 	beq.w	8007cde <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b60:	4a6e      	ldr	r2, [pc, #440]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b76:	4969      	ldr	r1, [pc, #420]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	605a      	str	r2, [r3, #4]
 8007b8c:	e0a7      	b.n	8007cde <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007b8e:	4a63      	ldr	r2, [pc, #396]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f023 0203 	bic.w	r2, r3, #3
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	495d      	ldr	r1, [pc, #372]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d014      	beq.n	8007bea <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007bc0:	4a56      	ldr	r2, [pc, #344]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd4:	015b      	lsls	r3, r3, #5
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	4950      	ldr	r1, [pc, #320]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	f042 0210 	orr.w	r2, r2, #16
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d019      	beq.n	8007c2a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bf6:	4a49      	ldr	r2, [pc, #292]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0e:	049b      	lsls	r3, r3, #18
 8007c10:	431a      	orrs	r2, r3
 8007c12:	4942      	ldr	r1, [pc, #264]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	e01c      	b.n	8007c64 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d018      	beq.n	8007c64 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c32:	4a3a      	ldr	r2, [pc, #232]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c4a:	069b      	lsls	r3, r3, #26
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	4933      	ldr	r1, [pc, #204]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d019      	beq.n	8007ca4 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c70:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c88:	049b      	lsls	r3, r3, #18
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	4923      	ldr	r1, [pc, #140]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	e01c      	b.n	8007cde <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d018      	beq.n	8007cde <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007cac:	4a1b      	ldr	r2, [pc, #108]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc4:	069b      	lsls	r3, r3, #26
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	4914      	ldr	r1, [pc, #80]	; (8007d1c <HAL_OSPIM_Config+0x9d8>)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007cde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007cea:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <HAL_OSPIM_Config+0x9dc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a0c      	ldr	r2, [pc, #48]	; (8007d20 <HAL_OSPIM_Config+0x9dc>)
 8007cf0:	f043 0301 	orr.w	r3, r3, #1
 8007cf4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007cf6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007d02:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <HAL_OSPIM_Config+0x9e0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <HAL_OSPIM_Config+0x9e0>)
 8007d08:	f043 0301 	orr.w	r3, r3, #1
 8007d0c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3750      	adds	r7, #80	; 0x50
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	420c4000 	.word	0x420c4000
 8007d20:	420d1400 	.word	0x420d1400
 8007d24:	420d2400 	.word	0x420d2400

08007d28 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d44:	d122      	bne.n	8007d8c <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d014      	beq.n	8007d7e <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d6a:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0202 	orr.w	r2, r2, #2
 8007d7a:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8007d7c:	e00c      	b.n	8007d98 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2202      	movs	r2, #2
 8007d82:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fa12 	bl	80071ae <HAL_OSPI_AbortCpltCallback>
}
 8007d8a:	e005      	b.n	8007d98 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fa01 	bl	800719a <HAL_OSPI_ErrorCallback>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007db0:	e022      	b.n	8007df8 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d01e      	beq.n	8007df8 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dba:	f7fb fcb1 	bl	8003720 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d302      	bcc.n	8007dd0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d113      	bne.n	8007df8 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6a1a      	ldr	r2, [r3, #32]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	401a      	ands	r2, r3
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d00b      	beq.n	8007df8 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de6:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dec:	f043 0201 	orr.w	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e00e      	b.n	8007e16 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6a1a      	ldr	r2, [r3, #32]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d1ce      	bne.n	8007db2 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <OSPIM_GetConfig+0x26>
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d802      	bhi.n	8007e46 <OSPIM_GetConfig+0x26>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
 8007e4a:	e098      	b.n	8007f7e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2200      	movs	r2, #0
 8007e62:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d10b      	bne.n	8007e88 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007e70:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <OSPIM_GetConfig+0x16c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007e7c:	4b44      	ldr	r3, [pc, #272]	; (8007f90 <OSPIM_GetConfig+0x170>)
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	e002      	b.n	8007e88 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e86:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e074      	b.n	8007f78 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007e8e:	4a3f      	ldr	r2, [pc, #252]	; (8007f8c <OSPIM_GetConfig+0x16c>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4053      	eors	r3, r2
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4053      	eors	r3, r2
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4053      	eors	r3, r2
 8007eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d018      	beq.n	8007f36 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4053      	eors	r3, r2
 8007f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d111      	bne.n	8007f36 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d106      	bne.n	8007f2a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	e005      	b.n	8007f36 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d018      	beq.n	8007f72 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	4053      	eors	r3, r2
 8007f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d111      	bne.n	8007f72 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d106      	bne.n	8007f66 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	611a      	str	r2, [r3, #16]
 8007f64:	e005      	b.n	8007f72 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d987      	bls.n	8007e8e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	420c4000 	.word	0x420c4000
 8007f90:	04040222 	.word	0x04040222

08007f94 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0202 	orr.w	r2, r2, #2
 8007fb0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a15      	ldr	r2, [pc, #84]	; (8008014 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d109      	bne.n	8007fd6 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007fc2:	4815      	ldr	r0, [pc, #84]	; (8008018 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fc4:	f7fe fe9c 	bl	8006d00 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	4813      	ldr	r0, [pc, #76]	; (8008018 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fcc:	f006 f928 	bl	800e220 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	e00d      	b.n	8007ff2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d108      	bne.n	8007ff2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007fe0:	480f      	ldr	r0, [pc, #60]	; (8008020 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fe2:	f7fe fe8d 	bl	8006d00 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fea:	f006 f919 	bl	800e220 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff f921 	bl	800723a <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0202 	bic.w	r2, r2, #2
 8008006:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	420d1400 	.word	0x420d1400
 8008018:	420cf000 	.word	0x420cf000
 800801c:	420d2400 	.word	0x420d2400
 8008020:	420cf400 	.word	0x420cf400

08008024 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	4a04      	ldr	r2, [pc, #16]	; (8008040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	46020800 	.word	0x46020800

08008044 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800804c:	4b39      	ldr	r3, [pc, #228]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800804e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008054:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d10b      	bne.n	8008076 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d905      	bls.n	8008072 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008066:	4b33      	ldr	r3, [pc, #204]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	4a32      	ldr	r2, [pc, #200]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800806c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008070:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	e057      	b.n	8008126 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807c:	d90a      	bls.n	8008094 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800807e:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4313      	orrs	r3, r2
 800808a:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800808c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008090:	60d3      	str	r3, [r2, #12]
 8008092:	e007      	b.n	80080a4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008094:	4b27      	ldr	r3, [pc, #156]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800809c:	4925      	ldr	r1, [pc, #148]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a24      	ldr	r2, [pc, #144]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	099b      	lsrs	r3, r3, #6
 80080b0:	2232      	movs	r2, #50	; 0x32
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	4a21      	ldr	r2, [pc, #132]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	099b      	lsrs	r3, r3, #6
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080c2:	e002      	b.n	80080ca <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080ca:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <HAL_PWREx_ControlVoltageScaling+0x98>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f3      	bne.n	80080c4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01b      	beq.n	800811a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080e8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ec:	099b      	lsrs	r3, r3, #6
 80080ee:	2232      	movs	r2, #50	; 0x32
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	4a11      	ldr	r2, [pc, #68]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	3301      	adds	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008100:	e002      	b.n	8008108 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b01      	subs	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800810a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f3      	bne.n	8008102 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e000      	b.n	8008126 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	46020800 	.word	0x46020800
 8008138:	20000d00 	.word	0x20000d00
 800813c:	10624dd3 	.word	0x10624dd3

08008140 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008144:	4b04      	ldr	r3, [pc, #16]	; (8008158 <HAL_PWREx_GetVoltageRange+0x18>)
 8008146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	46020800 	.word	0x46020800

0800815c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008164:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <HAL_PWREx_ConfigSupply+0x94>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a22      	ldr	r2, [pc, #136]	; (80081f4 <HAL_PWREx_ConfigSupply+0x98>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	099b      	lsrs	r3, r3, #6
 8008170:	2232      	movs	r2, #50	; 0x32
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <HAL_PWREx_ConfigSupply+0x98>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	099b      	lsrs	r3, r3, #6
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d113      	bne.n	80081b0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008188:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800818e:	f023 0302 	bic.w	r3, r3, #2
 8008192:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008194:	e002      	b.n	800819c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3b01      	subs	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d116      	bne.n	80081d6 <HAL_PWREx_ConfigSupply+0x7a>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f3      	bne.n	8008196 <HAL_PWREx_ConfigSupply+0x3a>
 80081ae:	e012      	b.n	80081d6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a10      	ldr	r2, [pc, #64]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80081b6:	f043 0302 	orr.w	r3, r3, #2
 80081ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081bc:	e002      	b.n	80081c4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <HAL_PWREx_ConfigSupply+0x7a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f3      	bne.n	80081be <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e000      	b.n	80081e2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000d00 	.word	0x20000d00
 80081f4:	10624dd3 	.word	0x10624dd3
 80081f8:	46020800 	.word	0x46020800

080081fc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	4a04      	ldr	r2, [pc, #16]	; (8008218 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800820a:	6113      	str	r3, [r2, #16]
}
 800820c:	bf00      	nop
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	46020800 	.word	0x46020800

0800821c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	; 0x38
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f000 bec8 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008236:	4b99      	ldr	r3, [pc, #612]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f003 030c 	and.w	r3, r3, #12
 800823e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008240:	4b96      	ldr	r3, [pc, #600]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 816c 	beq.w	8008530 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_RCC_OscConfig+0x52>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	2b0c      	cmp	r3, #12
 8008262:	f040 80de 	bne.w	8008422 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 80da 	bne.w	8008422 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f000 bea5 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008280:	4b86      	ldr	r3, [pc, #536]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d004      	beq.n	8008296 <HAL_RCC_OscConfig+0x7a>
 800828c:	4b83      	ldr	r3, [pc, #524]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008294:	e005      	b.n	80082a2 <HAL_RCC_OscConfig+0x86>
 8008296:	4b81      	ldr	r3, [pc, #516]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800829c:	041b      	lsls	r3, r3, #16
 800829e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d255      	bcs.n	8008352 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fa3d 	bl	8009730 <RCC_SetFlashLatencyFromMSIRange>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f000 be82 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80082c2:	4b76      	ldr	r3, [pc, #472]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	4a75      	ldr	r2, [pc, #468]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082cc:	6093      	str	r3, [r2, #8]
 80082ce:	4b73      	ldr	r3, [pc, #460]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	4970      	ldr	r1, [pc, #448]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80082e8:	d309      	bcc.n	80082fe <HAL_RCC_OscConfig+0xe2>
 80082ea:	4b6c      	ldr	r3, [pc, #432]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f023 021f 	bic.w	r2, r3, #31
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	4969      	ldr	r1, [pc, #420]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60cb      	str	r3, [r1, #12]
 80082fc:	e07e      	b.n	80083fc <HAL_RCC_OscConfig+0x1e0>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	da0a      	bge.n	800831c <HAL_RCC_OscConfig+0x100>
 8008306:	4b65      	ldr	r3, [pc, #404]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	015b      	lsls	r3, r3, #5
 8008314:	4961      	ldr	r1, [pc, #388]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008316:	4313      	orrs	r3, r2
 8008318:	60cb      	str	r3, [r1, #12]
 800831a:	e06f      	b.n	80083fc <HAL_RCC_OscConfig+0x1e0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008324:	d30a      	bcc.n	800833c <HAL_RCC_OscConfig+0x120>
 8008326:	4b5d      	ldr	r3, [pc, #372]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	029b      	lsls	r3, r3, #10
 8008334:	4959      	ldr	r1, [pc, #356]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008336:	4313      	orrs	r3, r2
 8008338:	60cb      	str	r3, [r1, #12]
 800833a:	e05f      	b.n	80083fc <HAL_RCC_OscConfig+0x1e0>
 800833c:	4b57      	ldr	r3, [pc, #348]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	03db      	lsls	r3, r3, #15
 800834a:	4954      	ldr	r1, [pc, #336]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800834c:	4313      	orrs	r3, r2
 800834e:	60cb      	str	r3, [r1, #12]
 8008350:	e054      	b.n	80083fc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008352:	4b52      	ldr	r3, [pc, #328]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	4a51      	ldr	r2, [pc, #324]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800835c:	6093      	str	r3, [r2, #8]
 800835e:	4b4f      	ldr	r3, [pc, #316]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	494c      	ldr	r1, [pc, #304]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800836c:	4313      	orrs	r3, r2
 800836e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008378:	d309      	bcc.n	800838e <HAL_RCC_OscConfig+0x172>
 800837a:	4b48      	ldr	r3, [pc, #288]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f023 021f 	bic.w	r2, r3, #31
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	4945      	ldr	r1, [pc, #276]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008388:	4313      	orrs	r3, r2
 800838a:	60cb      	str	r3, [r1, #12]
 800838c:	e028      	b.n	80083e0 <HAL_RCC_OscConfig+0x1c4>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	da0a      	bge.n	80083ac <HAL_RCC_OscConfig+0x190>
 8008396:	4b41      	ldr	r3, [pc, #260]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	015b      	lsls	r3, r3, #5
 80083a4:	493d      	ldr	r1, [pc, #244]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60cb      	str	r3, [r1, #12]
 80083aa:	e019      	b.n	80083e0 <HAL_RCC_OscConfig+0x1c4>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b4:	d30a      	bcc.n	80083cc <HAL_RCC_OscConfig+0x1b0>
 80083b6:	4b39      	ldr	r3, [pc, #228]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	4935      	ldr	r1, [pc, #212]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60cb      	str	r3, [r1, #12]
 80083ca:	e009      	b.n	80083e0 <HAL_RCC_OscConfig+0x1c4>
 80083cc:	4b33      	ldr	r3, [pc, #204]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	03db      	lsls	r3, r3, #15
 80083da:	4930      	ldr	r1, [pc, #192]	; (800849c <HAL_RCC_OscConfig+0x280>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 f9a0 	bl	8009730 <RCC_SetFlashLatencyFromMSIRange>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f000 bde5 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80083fc:	f001 f8de 	bl	80095bc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <HAL_RCC_OscConfig+0x284>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f7fa fff9 	bl	80033fc <HAL_InitTick>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 808a 	beq.w	800852e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800841a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800841e:	f000 bdd2 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d066      	beq.n	80084f8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800842a:	4b1c      	ldr	r3, [pc, #112]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1b      	ldr	r2, [pc, #108]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008436:	f7fb f973 	bl	8003720 <HAL_GetTick>
 800843a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800843c:	e009      	b.n	8008452 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800843e:	f7fb f96f 	bl	8003720 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d902      	bls.n	8008452 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	f000 bdba 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ef      	beq.n	800843e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	4a0e      	ldr	r2, [pc, #56]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008464:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008468:	6093      	str	r3, [r2, #8]
 800846a:	4b0c      	ldr	r3, [pc, #48]	; (800849c <HAL_RCC_OscConfig+0x280>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	4909      	ldr	r1, [pc, #36]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008478:	4313      	orrs	r3, r2
 800847a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008484:	d30e      	bcc.n	80084a4 <HAL_RCC_OscConfig+0x288>
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f023 021f 	bic.w	r2, r3, #31
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	4902      	ldr	r1, [pc, #8]	; (800849c <HAL_RCC_OscConfig+0x280>)
 8008494:	4313      	orrs	r3, r2
 8008496:	60cb      	str	r3, [r1, #12]
 8008498:	e04a      	b.n	8008530 <HAL_RCC_OscConfig+0x314>
 800849a:	bf00      	nop
 800849c:	46020c00 	.word	0x46020c00
 80084a0:	20000d04 	.word	0x20000d04
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da0a      	bge.n	80084c2 <HAL_RCC_OscConfig+0x2a6>
 80084ac:	4b98      	ldr	r3, [pc, #608]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	015b      	lsls	r3, r3, #5
 80084ba:	4995      	ldr	r1, [pc, #596]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	60cb      	str	r3, [r1, #12]
 80084c0:	e036      	b.n	8008530 <HAL_RCC_OscConfig+0x314>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d30a      	bcc.n	80084e2 <HAL_RCC_OscConfig+0x2c6>
 80084cc:	4b90      	ldr	r3, [pc, #576]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	029b      	lsls	r3, r3, #10
 80084da:	498d      	ldr	r1, [pc, #564]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	60cb      	str	r3, [r1, #12]
 80084e0:	e026      	b.n	8008530 <HAL_RCC_OscConfig+0x314>
 80084e2:	4b8b      	ldr	r3, [pc, #556]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	03db      	lsls	r3, r3, #15
 80084f0:	4987      	ldr	r1, [pc, #540]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60cb      	str	r3, [r1, #12]
 80084f6:	e01b      	b.n	8008530 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80084f8:	4b85      	ldr	r3, [pc, #532]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a84      	ldr	r2, [pc, #528]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008504:	f7fb f90c 	bl	8003720 <HAL_GetTick>
 8008508:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800850a:	e009      	b.n	8008520 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800850c:	f7fb f908 	bl	8003720 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d902      	bls.n	8008520 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	f000 bd53 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008520:	4b7b      	ldr	r3, [pc, #492]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1ef      	bne.n	800850c <HAL_RCC_OscConfig+0x2f0>
 800852c:	e000      	b.n	8008530 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800852e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 808b 	beq.w	8008654 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	2b08      	cmp	r3, #8
 8008542:	d005      	beq.n	8008550 <HAL_RCC_OscConfig+0x334>
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2b0c      	cmp	r3, #12
 8008548:	d109      	bne.n	800855e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	2b03      	cmp	r3, #3
 800854e:	d106      	bne.n	800855e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d17d      	bne.n	8008654 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f000 bd34 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008566:	d106      	bne.n	8008576 <HAL_RCC_OscConfig+0x35a>
 8008568:	4b69      	ldr	r3, [pc, #420]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a68      	ldr	r2, [pc, #416]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800856e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e041      	b.n	80085fa <HAL_RCC_OscConfig+0x3de>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800857e:	d112      	bne.n	80085a6 <HAL_RCC_OscConfig+0x38a>
 8008580:	4b63      	ldr	r3, [pc, #396]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a62      	ldr	r2, [pc, #392]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	4b60      	ldr	r3, [pc, #384]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a5f      	ldr	r2, [pc, #380]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4b5d      	ldr	r3, [pc, #372]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a5c      	ldr	r2, [pc, #368]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800859e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	e029      	b.n	80085fa <HAL_RCC_OscConfig+0x3de>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80085ae:	d112      	bne.n	80085d6 <HAL_RCC_OscConfig+0x3ba>
 80085b0:	4b57      	ldr	r3, [pc, #348]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a56      	ldr	r2, [pc, #344]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b54      	ldr	r3, [pc, #336]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a53      	ldr	r2, [pc, #332]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	4b51      	ldr	r3, [pc, #324]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a50      	ldr	r2, [pc, #320]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	e011      	b.n	80085fa <HAL_RCC_OscConfig+0x3de>
 80085d6:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a4d      	ldr	r2, [pc, #308]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4b4b      	ldr	r3, [pc, #300]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a4a      	ldr	r2, [pc, #296]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b48      	ldr	r3, [pc, #288]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a47      	ldr	r2, [pc, #284]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80085f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008602:	f7fb f88d 	bl	8003720 <HAL_GetTick>
 8008606:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008608:	e009      	b.n	800861e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800860a:	f7fb f889 	bl	8003720 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	2b64      	cmp	r3, #100	; 0x64
 8008616:	d902      	bls.n	800861e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	f000 bcd4 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800861e:	4b3c      	ldr	r3, [pc, #240]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0ef      	beq.n	800860a <HAL_RCC_OscConfig+0x3ee>
 800862a:	e013      	b.n	8008654 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800862c:	f7fb f878 	bl	8003720 <HAL_GetTick>
 8008630:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008632:	e009      	b.n	8008648 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008634:	f7fb f874 	bl	8003720 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b64      	cmp	r3, #100	; 0x64
 8008640:	d902      	bls.n	8008648 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	f000 bcbf 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008648:	4b31      	ldr	r3, [pc, #196]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ef      	bne.n	8008634 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d05f      	beq.n	8008720 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2b04      	cmp	r3, #4
 8008664:	d005      	beq.n	8008672 <HAL_RCC_OscConfig+0x456>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2b0c      	cmp	r3, #12
 800866a:	d114      	bne.n	8008696 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	2b02      	cmp	r3, #2
 8008670:	d111      	bne.n	8008696 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	f000 bca3 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008680:	4b23      	ldr	r3, [pc, #140]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	4920      	ldr	r1, [pc, #128]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 8008690:	4313      	orrs	r3, r2
 8008692:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008694:	e044      	b.n	8008720 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d024      	beq.n	80086e8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800869e:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086aa:	f7fb f839 	bl	8003720 <HAL_GetTick>
 80086ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086b0:	e009      	b.n	80086c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086b2:	f7fb f835 	bl	8003720 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d902      	bls.n	80086c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	f000 bc80 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0ef      	beq.n	80086b2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	490b      	ldr	r1, [pc, #44]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	610b      	str	r3, [r1, #16]
 80086e6:	e01b      	b.n	8008720 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a08      	ldr	r2, [pc, #32]	; (8008710 <HAL_RCC_OscConfig+0x4f4>)
 80086ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086f4:	f7fb f814 	bl	8003720 <HAL_GetTick>
 80086f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086fa:	e00b      	b.n	8008714 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086fc:	f7fb f810 	bl	8003720 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d904      	bls.n	8008714 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	f000 bc5b 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
 8008710:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008714:	4baf      	ldr	r3, [pc, #700]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ed      	bne.n	80086fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80c8 	beq.w	80088be <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800872e:	2300      	movs	r3, #0
 8008730:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008734:	4ba7      	ldr	r3, [pc, #668]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d111      	bne.n	8008766 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008742:	4ba4      	ldr	r3, [pc, #656]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008748:	4aa2      	ldr	r2, [pc, #648]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800874a:	f043 0304 	orr.w	r3, r3, #4
 800874e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008752:	4ba0      	ldr	r3, [pc, #640]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008766:	4b9c      	ldr	r3, [pc, #624]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d119      	bne.n	80087a6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008772:	4b99      	ldr	r3, [pc, #612]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	4a98      	ldr	r2, [pc, #608]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800877e:	f7fa ffcf 	bl	8003720 <HAL_GetTick>
 8008782:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008784:	e009      	b.n	800879a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008786:	f7fa ffcb 	bl	8003720 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d902      	bls.n	800879a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	f000 bc16 	b.w	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800879a:	4b8f      	ldr	r3, [pc, #572]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0ef      	beq.n	8008786 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d05f      	beq.n	800886e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80087ae:	4b89      	ldr	r3, [pc, #548]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80087b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087b4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d037      	beq.n	8008834 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d006      	beq.n	80087dc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e3f4      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01b      	beq.n	800881e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80087e6:	4b7b      	ldr	r3, [pc, #492]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80087e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087ec:	4a79      	ldr	r2, [pc, #484]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80087ee:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80087f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80087f6:	f7fa ff93 	bl	8003720 <HAL_GetTick>
 80087fa:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087fe:	f7fa ff8f 	bl	8003720 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b05      	cmp	r3, #5
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e3da      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008810:	4b70      	ldr	r3, [pc, #448]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ef      	bne.n	80087fe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800881e:	4b6d      	ldr	r3, [pc, #436]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008824:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	4969      	ldr	r1, [pc, #420]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008834:	4b67      	ldr	r3, [pc, #412]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800883a:	4a66      	ldr	r2, [pc, #408]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800883c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008840:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008844:	f7fa ff6c 	bl	8003720 <HAL_GetTick>
 8008848:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884c:	f7fa ff68 	bl	8003720 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b05      	cmp	r3, #5
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e3b3      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800885e:	4b5d      	ldr	r3, [pc, #372]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0ef      	beq.n	800884c <HAL_RCC_OscConfig+0x630>
 800886c:	e01b      	b.n	80088a6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800886e:	4b59      	ldr	r3, [pc, #356]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008874:	4a57      	ldr	r2, [pc, #348]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008876:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800887a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800887e:	f7fa ff4f 	bl	8003720 <HAL_GetTick>
 8008882:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008884:	e008      	b.n	8008898 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008886:	f7fa ff4b 	bl	8003720 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b05      	cmp	r3, #5
 8008892:	d901      	bls.n	8008898 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e396      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008898:	4b4e      	ldr	r3, [pc, #312]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800889a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800889e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1ef      	bne.n	8008886 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d107      	bne.n	80088be <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088ae:	4b49      	ldr	r3, [pc, #292]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088b4:	4a47      	ldr	r2, [pc, #284]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088b6:	f023 0304 	bic.w	r3, r3, #4
 80088ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8111 	beq.w	8008aee <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088d2:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d111      	bne.n	8008904 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e0:	4b3c      	ldr	r3, [pc, #240]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e6:	4a3b      	ldr	r2, [pc, #236]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088e8:	f043 0304 	orr.w	r3, r3, #4
 80088ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80088f0:	4b38      	ldr	r3, [pc, #224]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80088f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008904:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d118      	bne.n	8008942 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008910:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800891c:	f7fa ff00 	bl	8003720 <HAL_GetTick>
 8008920:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008924:	f7fa fefc 	bl	8003720 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e347      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008936:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <HAL_RCC_OscConfig+0x7bc>)
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f0      	beq.n	8008924 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01f      	beq.n	800898e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d010      	beq.n	800897c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800895a:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800895c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008960:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008962:	f043 0304 	orr.w	r3, r3, #4
 8008966:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800896a:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800896c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008970:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800897a:	e018      	b.n	80089ae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 800897e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008982:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008984:	f043 0301 	orr.w	r3, r3, #1
 8008988:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800898c:	e00f      	b.n	80089ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008994:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800899e:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80089a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089a4:	4a0b      	ldr	r2, [pc, #44]	; (80089d4 <HAL_RCC_OscConfig+0x7b8>)
 80089a6:	f023 0304 	bic.w	r3, r3, #4
 80089aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d057      	beq.n	8008a66 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80089b6:	f7fa feb3 	bl	8003720 <HAL_GetTick>
 80089ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089bc:	e00e      	b.n	80089dc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089be:	f7fa feaf 	bl	8003720 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d905      	bls.n	80089dc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e2f8      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
 80089d4:	46020c00 	.word	0x46020c00
 80089d8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089dc:	4b9c      	ldr	r3, [pc, #624]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 80089de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0e9      	beq.n	80089be <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d01b      	beq.n	8008a2e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80089f6:	4b96      	ldr	r3, [pc, #600]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 80089f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089fc:	4a94      	ldr	r2, [pc, #592]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 80089fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a06:	e00a      	b.n	8008a1e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a08:	f7fa fe8a 	bl	8003720 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e2d3      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a1e:	4b8c      	ldr	r3, [pc, #560]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0ed      	beq.n	8008a08 <HAL_RCC_OscConfig+0x7ec>
 8008a2c:	e053      	b.n	8008ad6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a2e:	4b88      	ldr	r3, [pc, #544]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a34:	4a86      	ldr	r2, [pc, #536]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fa fe6e 	bl	8003720 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e2b7      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a56:	4b7e      	ldr	r3, [pc, #504]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1ed      	bne.n	8008a40 <HAL_RCC_OscConfig+0x824>
 8008a64:	e037      	b.n	8008ad6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008a66:	f7fa fe5b 	bl	8003720 <HAL_GetTick>
 8008a6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a6c:	e00a      	b.n	8008a84 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6e:	f7fa fe57 	bl	8003720 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e2a0      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a84:	4b72      	ldr	r3, [pc, #456]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1ed      	bne.n	8008a6e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008a92:	4b6f      	ldr	r3, [pc, #444]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01a      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008aa0:	4b6b      	ldr	r3, [pc, #428]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008aa6:	4a6a      	ldr	r2, [pc, #424]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ab0:	e00a      	b.n	8008ac8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab2:	f7fa fe35 	bl	8003720 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e27e      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ac8:	4b61      	ldr	r3, [pc, #388]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1ed      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ad6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d107      	bne.n	8008aee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ade:	4b5c      	ldr	r3, [pc, #368]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ae4:	4a5a      	ldr	r2, [pc, #360]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008ae6:	f023 0304 	bic.w	r3, r3, #4
 8008aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d036      	beq.n	8008b68 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d019      	beq.n	8008b36 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008b02:	4b53      	ldr	r3, [pc, #332]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a52      	ldr	r2, [pc, #328]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b0c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b0e:	f7fa fe07 	bl	8003720 <HAL_GetTick>
 8008b12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b16:	f7fa fe03 	bl	8003720 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e24e      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b28:	4b49      	ldr	r3, [pc, #292]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0f0      	beq.n	8008b16 <HAL_RCC_OscConfig+0x8fa>
 8008b34:	e018      	b.n	8008b68 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a45      	ldr	r2, [pc, #276]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b40:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b42:	f7fa fded 	bl	8003720 <HAL_GetTick>
 8008b46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b48:	e008      	b.n	8008b5c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b4a:	f7fa fde9 	bl	8003720 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e234      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b5c:	4b3c      	ldr	r3, [pc, #240]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1f0      	bne.n	8008b4a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d036      	beq.n	8008be2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d019      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008b7c:	4b34      	ldr	r3, [pc, #208]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a33      	ldr	r2, [pc, #204]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b88:	f7fa fdca 	bl	8003720 <HAL_GetTick>
 8008b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008b90:	f7fa fdc6 	bl	8003720 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e211      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008ba2:	4b2b      	ldr	r3, [pc, #172]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0f0      	beq.n	8008b90 <HAL_RCC_OscConfig+0x974>
 8008bae:	e018      	b.n	8008be2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008bb0:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a26      	ldr	r2, [pc, #152]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bbc:	f7fa fdb0 	bl	8003720 <HAL_GetTick>
 8008bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008bc4:	f7fa fdac 	bl	8003720 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e1f7      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bd6:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f0      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d07f      	beq.n	8008cee <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d062      	beq.n	8008cbc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008bf6:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c00:	6093      	str	r3, [r2, #8]
 8008c02:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	4910      	ldr	r1, [pc, #64]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008c1c:	d309      	bcc.n	8008c32 <HAL_RCC_OscConfig+0xa16>
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f023 021f 	bic.w	r2, r3, #31
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	4909      	ldr	r1, [pc, #36]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60cb      	str	r3, [r1, #12]
 8008c30:	e02a      	b.n	8008c88 <HAL_RCC_OscConfig+0xa6c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da0c      	bge.n	8008c54 <HAL_RCC_OscConfig+0xa38>
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	015b      	lsls	r3, r3, #5
 8008c48:	4901      	ldr	r1, [pc, #4]	; (8008c50 <HAL_RCC_OscConfig+0xa34>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60cb      	str	r3, [r1, #12]
 8008c4e:	e01b      	b.n	8008c88 <HAL_RCC_OscConfig+0xa6c>
 8008c50:	46020c00 	.word	0x46020c00
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5c:	d30a      	bcc.n	8008c74 <HAL_RCC_OscConfig+0xa58>
 8008c5e:	4ba1      	ldr	r3, [pc, #644]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	029b      	lsls	r3, r3, #10
 8008c6c:	499d      	ldr	r1, [pc, #628]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60cb      	str	r3, [r1, #12]
 8008c72:	e009      	b.n	8008c88 <HAL_RCC_OscConfig+0xa6c>
 8008c74:	4b9b      	ldr	r3, [pc, #620]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	03db      	lsls	r3, r3, #15
 8008c82:	4998      	ldr	r1, [pc, #608]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008c88:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a95      	ldr	r2, [pc, #596]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008c8e:	f043 0310 	orr.w	r3, r3, #16
 8008c92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c94:	f7fa fd44 	bl	8003720 <HAL_GetTick>
 8008c98:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008c9c:	f7fa fd40 	bl	8003720 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e18b      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008cae:	4b8d      	ldr	r3, [pc, #564]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0f0      	beq.n	8008c9c <HAL_RCC_OscConfig+0xa80>
 8008cba:	e018      	b.n	8008cee <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008cbc:	4b89      	ldr	r3, [pc, #548]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a88      	ldr	r2, [pc, #544]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008cc2:	f023 0310 	bic.w	r3, r3, #16
 8008cc6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008cc8:	f7fa fd2a 	bl	8003720 <HAL_GetTick>
 8008ccc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008cd0:	f7fa fd26 	bl	8003720 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e171      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008ce2:	4b80      	ldr	r3, [pc, #512]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f0      	bne.n	8008cd0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8166 	beq.w	8008fc4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cfe:	4b79      	ldr	r3, [pc, #484]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f003 030c 	and.w	r3, r3, #12
 8008d06:	2b0c      	cmp	r3, #12
 8008d08:	f000 80f2 	beq.w	8008ef0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	f040 80c5 	bne.w	8008ea0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008d16:	4b73      	ldr	r3, [pc, #460]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a72      	ldr	r2, [pc, #456]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d22:	f7fa fcfd 	bl	8003720 <HAL_GetTick>
 8008d26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d28:	e008      	b.n	8008d3c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d2a:	f7fa fcf9 	bl	8003720 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e144      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d3c:	4b69      	ldr	r3, [pc, #420]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f0      	bne.n	8008d2a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d48:	4b66      	ldr	r3, [pc, #408]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d111      	bne.n	8008d7a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008d56:	4b63      	ldr	r3, [pc, #396]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d5c:	4a61      	ldr	r2, [pc, #388]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008d66:	4b5f      	ldr	r3, [pc, #380]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008d7a:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <HAL_RCC_OscConfig+0xccc>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d86:	d102      	bne.n	8008d8e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008d8e:	4b56      	ldr	r3, [pc, #344]	; (8008ee8 <HAL_RCC_OscConfig+0xccc>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	4a55      	ldr	r2, [pc, #340]	; (8008ee8 <HAL_RCC_OscConfig+0xccc>)
 8008d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d98:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008d9a:	4b52      	ldr	r3, [pc, #328]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008da2:	f023 0303 	bic.w	r3, r3, #3
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008dae:	3a01      	subs	r2, #1
 8008db0:	0212      	lsls	r2, r2, #8
 8008db2:	4311      	orrs	r1, r2
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008db8:	430a      	orrs	r2, r1
 8008dba:	494a      	ldr	r1, [pc, #296]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8008dc0:	4b48      	ldr	r3, [pc, #288]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc4:	4b49      	ldr	r3, [pc, #292]	; (8008eec <HAL_RCC_OscConfig+0xcd0>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dcc:	3a01      	subs	r2, #1
 8008dce:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008dd6:	3a01      	subs	r2, #1
 8008dd8:	0252      	lsls	r2, r2, #9
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	4311      	orrs	r1, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008de2:	3a01      	subs	r2, #1
 8008de4:	0412      	lsls	r2, r2, #16
 8008de6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008dea:	4311      	orrs	r1, r2
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008df0:	3a01      	subs	r2, #1
 8008df2:	0612      	lsls	r2, r2, #24
 8008df4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	493a      	ldr	r1, [pc, #232]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008e00:	4b38      	ldr	r3, [pc, #224]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	4a37      	ldr	r2, [pc, #220]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e10:	4a34      	ldr	r2, [pc, #208]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008e16:	4b33      	ldr	r3, [pc, #204]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	4a32      	ldr	r2, [pc, #200]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e1c:	f043 0310 	orr.w	r3, r3, #16
 8008e20:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008e22:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	f023 020c 	bic.w	r2, r3, #12
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	492d      	ldr	r1, [pc, #180]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d105      	bne.n	8008e48 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <HAL_RCC_OscConfig+0xccc>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	4a29      	ldr	r2, [pc, #164]	; (8008ee8 <HAL_RCC_OscConfig+0xccc>)
 8008e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e46:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008e48:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d107      	bne.n	8008e60 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008e50:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e56:	4a23      	ldr	r2, [pc, #140]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e58:	f023 0304 	bic.w	r3, r3, #4
 8008e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e60:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1c      	ldr	r2, [pc, #112]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008e78:	f7fa fc52 	bl	8003720 <HAL_GetTick>
 8008e7c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e7e:	e008      	b.n	8008e92 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e80:	f7fa fc4e 	bl	8003720 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e099      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCC_OscConfig+0xc64>
 8008e9e:	e091      	b.n	8008fc4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008ea0:	4b10      	ldr	r3, [pc, #64]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a0f      	ldr	r2, [pc, #60]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008eac:	f7fa fc38 	bl	8003720 <HAL_GetTick>
 8008eb0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7fa fc34 	bl	8003720 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e07f      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008ed2:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	4a03      	ldr	r2, [pc, #12]	; (8008ee4 <HAL_RCC_OscConfig+0xcc8>)
 8008ed8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008edc:	f023 0303 	bic.w	r3, r3, #3
 8008ee0:	6293      	str	r3, [r2, #40]	; 0x28
 8008ee2:	e06f      	b.n	8008fc4 <HAL_RCC_OscConfig+0xda8>
 8008ee4:	46020c00 	.word	0x46020c00
 8008ee8:	46020800 	.word	0x46020800
 8008eec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008ef0:	4b37      	ldr	r3, [pc, #220]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ef6:	4b36      	ldr	r3, [pc, #216]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d039      	beq.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f003 0203 	and.w	r2, r3, #3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d132      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d129      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d122      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f3c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d11a      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	0a5b      	lsrs	r3, r3, #9
 8008f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d111      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d108      	bne.n	8008f78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d001      	beq.n	8008f7c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e024      	b.n	8008fc6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f7c:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	08db      	lsrs	r3, r3, #3
 8008f82:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d01a      	beq.n	8008fc4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008f8e:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	4a0f      	ldr	r2, [pc, #60]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008f94:	f023 0310 	bic.w	r3, r3, #16
 8008f98:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fa fbc1 	bl	8003720 <HAL_GetTick>
 8008f9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008fa0:	bf00      	nop
 8008fa2:	f7fa fbbd 	bl	8003720 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d0f9      	beq.n	8008fa2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	4a07      	ldr	r2, [pc, #28]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbc:	4a04      	ldr	r2, [pc, #16]	; (8008fd0 <HAL_RCC_OscConfig+0xdb4>)
 8008fbe:	f043 0310 	orr.w	r3, r3, #16
 8008fc2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3738      	adds	r7, #56	; 0x38
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	46020c00 	.word	0x46020c00

08008fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e1d9      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fe8:	4b9b      	ldr	r3, [pc, #620]	; (8009258 <HAL_RCC_ClockConfig+0x284>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d910      	bls.n	8009018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff6:	4b98      	ldr	r3, [pc, #608]	; (8009258 <HAL_RCC_ClockConfig+0x284>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f023 020f 	bic.w	r2, r3, #15
 8008ffe:	4996      	ldr	r1, [pc, #600]	; (8009258 <HAL_RCC_ClockConfig+0x284>)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	4313      	orrs	r3, r2
 8009004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009006:	4b94      	ldr	r3, [pc, #592]	; (8009258 <HAL_RCC_ClockConfig+0x284>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d001      	beq.n	8009018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e1c1      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b00      	cmp	r3, #0
 8009022:	d010      	beq.n	8009046 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	695a      	ldr	r2, [r3, #20]
 8009028:	4b8c      	ldr	r3, [pc, #560]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009030:	429a      	cmp	r2, r3
 8009032:	d908      	bls.n	8009046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009034:	4b89      	ldr	r3, [pc, #548]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	4986      	ldr	r1, [pc, #536]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009042:	4313      	orrs	r3, r2
 8009044:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d012      	beq.n	8009078 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	4b81      	ldr	r3, [pc, #516]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	091b      	lsrs	r3, r3, #4
 800905c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009060:	429a      	cmp	r2, r3
 8009062:	d909      	bls.n	8009078 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009064:	4b7d      	ldr	r3, [pc, #500]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	497a      	ldr	r1, [pc, #488]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009074:	4313      	orrs	r3, r2
 8009076:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d010      	beq.n	80090a6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	4b74      	ldr	r3, [pc, #464]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009090:	429a      	cmp	r2, r3
 8009092:	d908      	bls.n	80090a6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009094:	4b71      	ldr	r3, [pc, #452]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	496e      	ldr	r1, [pc, #440]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d010      	beq.n	80090d4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	4b69      	ldr	r3, [pc, #420]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	429a      	cmp	r2, r3
 80090c0:	d908      	bls.n	80090d4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80090c2:	4b66      	ldr	r3, [pc, #408]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 020f 	bic.w	r2, r3, #15
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	4963      	ldr	r1, [pc, #396]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 80d2 	beq.w	8009286 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d143      	bne.n	8009176 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ee:	4b5b      	ldr	r3, [pc, #364]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d110      	bne.n	800911e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090fc:	4b57      	ldr	r3, [pc, #348]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80090fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009102:	4a56      	ldr	r2, [pc, #344]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009104:	f043 0304 	orr.w	r3, r3, #4
 8009108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800910c:	4b53      	ldr	r3, [pc, #332]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800910e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	60bb      	str	r3, [r7, #8]
 8009118:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800911a:	2301      	movs	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800911e:	f7fa faff 	bl	8003720 <HAL_GetTick>
 8009122:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009124:	4b4e      	ldr	r3, [pc, #312]	; (8009260 <HAL_RCC_ClockConfig+0x28c>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00f      	beq.n	8009150 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009130:	e008      	b.n	8009144 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009132:	f7fa faf5 	bl	8003720 <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	2b02      	cmp	r3, #2
 800913e:	d901      	bls.n	8009144 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e12b      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009144:	4b46      	ldr	r3, [pc, #280]	; (8009260 <HAL_RCC_ClockConfig+0x28c>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0f0      	beq.n	8009132 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d107      	bne.n	8009166 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009156:	4b41      	ldr	r3, [pc, #260]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800915c:	4a3f      	ldr	r2, [pc, #252]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800915e:	f023 0304 	bic.w	r3, r3, #4
 8009162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009166:	4b3d      	ldr	r3, [pc, #244]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d121      	bne.n	80091b6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e112      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d107      	bne.n	800918e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800917e:	4b37      	ldr	r3, [pc, #220]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d115      	bne.n	80091b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e106      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009196:	4b31      	ldr	r3, [pc, #196]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e0fa      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a6:	4b2d      	ldr	r3, [pc, #180]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e0f2      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f023 0203 	bic.w	r2, r3, #3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4926      	ldr	r1, [pc, #152]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80091c8:	f7fa faaa 	bl	8003720 <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d112      	bne.n	80091fc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091d6:	e00a      	b.n	80091ee <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d8:	f7fa faa2 	bl	8003720 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e0d6      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f003 030c 	and.w	r3, r3, #12
 80091f6:	2b0c      	cmp	r3, #12
 80091f8:	d1ee      	bne.n	80091d8 <HAL_RCC_ClockConfig+0x204>
 80091fa:	e044      	b.n	8009286 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d112      	bne.n	800922a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009204:	e00a      	b.n	800921c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009206:	f7fa fa8b 	bl	8003720 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	f241 3288 	movw	r2, #5000	; 0x1388
 8009214:	4293      	cmp	r3, r2
 8009216:	d901      	bls.n	800921c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e0bf      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f003 030c 	and.w	r3, r3, #12
 8009224:	2b08      	cmp	r3, #8
 8009226:	d1ee      	bne.n	8009206 <HAL_RCC_ClockConfig+0x232>
 8009228:	e02d      	b.n	8009286 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d123      	bne.n	800927a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009232:	e00a      	b.n	800924a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009234:	f7fa fa74 	bl	8003720 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009242:	4293      	cmp	r3, r2
 8009244:	d901      	bls.n	800924a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e0a8      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800924a:	4b04      	ldr	r3, [pc, #16]	; (800925c <HAL_RCC_ClockConfig+0x288>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 030c 	and.w	r3, r3, #12
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1ee      	bne.n	8009234 <HAL_RCC_ClockConfig+0x260>
 8009256:	e016      	b.n	8009286 <HAL_RCC_ClockConfig+0x2b2>
 8009258:	40022000 	.word	0x40022000
 800925c:	46020c00 	.word	0x46020c00
 8009260:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009264:	f7fa fa5c 	bl	8003720 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009272:	4293      	cmp	r3, r2
 8009274:	d901      	bls.n	800927a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e090      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800927a:	4b4a      	ldr	r3, [pc, #296]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	f003 030c 	and.w	r3, r3, #12
 8009282:	2b04      	cmp	r3, #4
 8009284:	d1ee      	bne.n	8009264 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d010      	beq.n	80092b4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	4b43      	ldr	r3, [pc, #268]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	429a      	cmp	r2, r3
 80092a0:	d208      	bcs.n	80092b4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80092a2:	4b40      	ldr	r3, [pc, #256]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	f023 020f 	bic.w	r2, r3, #15
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	493d      	ldr	r1, [pc, #244]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092b4:	4b3c      	ldr	r3, [pc, #240]	; (80093a8 <HAL_RCC_ClockConfig+0x3d4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 030f 	and.w	r3, r3, #15
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d210      	bcs.n	80092e4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c2:	4b39      	ldr	r3, [pc, #228]	; (80093a8 <HAL_RCC_ClockConfig+0x3d4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f023 020f 	bic.w	r2, r3, #15
 80092ca:	4937      	ldr	r1, [pc, #220]	; (80093a8 <HAL_RCC_ClockConfig+0x3d4>)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092d2:	4b35      	ldr	r3, [pc, #212]	; (80093a8 <HAL_RCC_ClockConfig+0x3d4>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d001      	beq.n	80092e4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e05b      	b.n	800939c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d010      	beq.n	8009312 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d208      	bcs.n	8009312 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	4925      	ldr	r1, [pc, #148]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 800930e:	4313      	orrs	r3, r2
 8009310:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0308 	and.w	r3, r3, #8
 800931a:	2b00      	cmp	r3, #0
 800931c:	d012      	beq.n	8009344 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	4b20      	ldr	r3, [pc, #128]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800932c:	429a      	cmp	r2, r3
 800932e:	d209      	bcs.n	8009344 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009330:	4b1c      	ldr	r3, [pc, #112]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	4919      	ldr	r1, [pc, #100]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009340:	4313      	orrs	r3, r2
 8009342:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695a      	ldr	r2, [r3, #20]
 8009354:	4b13      	ldr	r3, [pc, #76]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800935c:	429a      	cmp	r2, r3
 800935e:	d208      	bcs.n	8009372 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009360:	4b10      	ldr	r3, [pc, #64]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	490d      	ldr	r1, [pc, #52]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 800936e:	4313      	orrs	r3, r2
 8009370:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009372:	f000 f821 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 8009376:	4602      	mov	r2, r0
 8009378:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <HAL_RCC_ClockConfig+0x3d0>)
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	490a      	ldr	r1, [pc, #40]	; (80093ac <HAL_RCC_ClockConfig+0x3d8>)
 8009382:	5ccb      	ldrb	r3, [r1, r3]
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <HAL_RCC_ClockConfig+0x3dc>)
 800938a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <HAL_RCC_ClockConfig+0x3e0>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f7fa f833 	bl	80033fc <HAL_InitTick>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

  return status;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	46020c00 	.word	0x46020c00
 80093a8:	40022000 	.word	0x40022000
 80093ac:	0800e2d0 	.word	0x0800e2d0
 80093b0:	20000d00 	.word	0x20000d00
 80093b4:	20000d04 	.word	0x20000d04

080093b8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b08b      	sub	sp, #44	; 0x2c
 80093bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093c6:	4b78      	ldr	r3, [pc, #480]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f003 030c 	and.w	r3, r3, #12
 80093ce:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093d0:	4b75      	ldr	r3, [pc, #468]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_RCC_GetSysClockFreq+0x34>
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b0c      	cmp	r3, #12
 80093e4:	d121      	bne.n	800942a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d11e      	bne.n	800942a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80093ec:	4b6e      	ldr	r3, [pc, #440]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d107      	bne.n	8009408 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80093f8:	4b6b      	ldr	r3, [pc, #428]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093fe:	0b1b      	lsrs	r3, r3, #12
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
 8009406:	e005      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009408:	4b67      	ldr	r3, [pc, #412]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	0f1b      	lsrs	r3, r3, #28
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009414:	4a65      	ldr	r2, [pc, #404]	; (80095ac <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d110      	bne.n	8009446 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009428:	e00d      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800942a:	4b5f      	ldr	r3, [pc, #380]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 030c 	and.w	r3, r3, #12
 8009432:	2b04      	cmp	r3, #4
 8009434:	d102      	bne.n	800943c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009436:	4b5e      	ldr	r3, [pc, #376]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009438:	623b      	str	r3, [r7, #32]
 800943a:	e004      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b08      	cmp	r3, #8
 8009440:	d101      	bne.n	8009446 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009442:	4b5b      	ldr	r3, [pc, #364]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009444:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b0c      	cmp	r3, #12
 800944a:	f040 80a5 	bne.w	8009598 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800944e:	4b56      	ldr	r3, [pc, #344]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009458:	4b53      	ldr	r3, [pc, #332]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	0a1b      	lsrs	r3, r3, #8
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	3301      	adds	r3, #1
 8009464:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009466:	4b50      	ldr	r3, [pc, #320]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	091b      	lsrs	r3, r3, #4
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009472:	4b4d      	ldr	r3, [pc, #308]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	08db      	lsrs	r3, r3, #3
 8009478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d003      	beq.n	800949c <HAL_RCC_GetSysClockFreq+0xe4>
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b03      	cmp	r3, #3
 8009498:	d022      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0x128>
 800949a:	e043      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80094aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ae:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094be:	ed97 6a01 	vldr	s12, [r7, #4]
 80094c2:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x200>
 80094c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094de:	e046      	b.n	800956e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	eddf 6a32 	vldr	s13, [pc, #200]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80094ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f2:	4b2d      	ldr	r3, [pc, #180]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009502:	ed97 6a01 	vldr	s12, [r7, #4]
 8009506:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x200>
 800950a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800950e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009516:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800951a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009522:	e024      	b.n	800956e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	ee07 3a90 	vmov	s15, r3
 8009534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953c:	4b1a      	ldr	r3, [pc, #104]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800954c:	ed97 6a01 	vldr	s12, [r7, #4]
 8009550:	eddf 5a19 	vldr	s11, [pc, #100]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x200>
 8009554:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009558:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800955c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009560:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800956c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800956e:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	0e1b      	lsrs	r3, r3, #24
 8009574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009578:	3301      	adds	r3, #1
 800957a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009586:	edd7 6a07 	vldr	s13, [r7, #28]
 800958a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800958e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009592:	ee17 3a90 	vmov	r3, s15
 8009596:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009598:	6a3b      	ldr	r3, [r7, #32]
}
 800959a:	4618      	mov	r0, r3
 800959c:	372c      	adds	r7, #44	; 0x2c
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	46020c00 	.word	0x46020c00
 80095ac:	0800e2e8 	.word	0x0800e2e8
 80095b0:	00f42400 	.word	0x00f42400
 80095b4:	4b742400 	.word	0x4b742400
 80095b8:	46000000 	.word	0x46000000

080095bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80095c0:	f7ff fefa 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 80095c4:	4602      	mov	r2, r0
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <HAL_RCC_GetHCLKFreq+0x28>)
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	4906      	ldr	r1, [pc, #24]	; (80095e8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80095d0:	5ccb      	ldrb	r3, [r1, r3]
 80095d2:	fa22 f303 	lsr.w	r3, r2, r3
 80095d6:	4a05      	ldr	r2, [pc, #20]	; (80095ec <HAL_RCC_GetHCLKFreq+0x30>)
 80095d8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80095da:	4b04      	ldr	r3, [pc, #16]	; (80095ec <HAL_RCC_GetHCLKFreq+0x30>)
 80095dc:	681b      	ldr	r3, [r3, #0]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	46020c00 	.word	0x46020c00
 80095e8:	0800e2d0 	.word	0x0800e2d0
 80095ec:	20000d00 	.word	0x20000d00

080095f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80095f4:	f7ff ffe2 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 80095f8:	4602      	mov	r2, r0
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	091b      	lsrs	r3, r3, #4
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	4903      	ldr	r1, [pc, #12]	; (8009614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009606:	5ccb      	ldrb	r3, [r1, r3]
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	46020c00 	.word	0x46020c00
 8009614:	0800e2e0 	.word	0x0800e2e0

08009618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800961c:	f7ff ffce 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 8009620:	4602      	mov	r2, r0
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	4903      	ldr	r1, [pc, #12]	; (800963c <HAL_RCC_GetPCLK2Freq+0x24>)
 800962e:	5ccb      	ldrb	r3, [r1, r3]
 8009630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009634:	4618      	mov	r0, r3
 8009636:	bd80      	pop	{r7, pc}
 8009638:	46020c00 	.word	0x46020c00
 800963c:	0800e2e0 	.word	0x0800e2e0

08009640 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009644:	f7ff ffba 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 8009648:	4602      	mov	r2, r0
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <HAL_RCC_GetPCLK3Freq+0x20>)
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	4903      	ldr	r1, [pc, #12]	; (8009664 <HAL_RCC_GetPCLK3Freq+0x24>)
 8009656:	5ccb      	ldrb	r3, [r1, r3]
 8009658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800965c:	4618      	mov	r0, r3
 800965e:	bd80      	pop	{r7, pc}
 8009660:	46020c00 	.word	0x46020c00
 8009664:	0800e2e0 	.word	0x0800e2e0

08009668 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	221f      	movs	r2, #31
 8009676:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8009678:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <HAL_RCC_GetClockConfig+0x68>)
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f003 0203 	and.w	r2, r3, #3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <HAL_RCC_GetClockConfig+0x68>)
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f003 020f 	and.w	r2, r3, #15
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8009690:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <HAL_RCC_GetClockConfig+0x68>)
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_RCC_GetClockConfig+0x68>)
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	091b      	lsrs	r3, r3, #4
 80096a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <HAL_RCC_GetClockConfig+0x68>)
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <HAL_RCC_GetClockConfig+0x6c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 020f 	and.w	r2, r3, #15
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	601a      	str	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	46020c00 	.word	0x46020c00
 80096d4:	40022000 	.word	0x40022000

080096d8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <HAL_RCC_EnableCSS+0x1c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <HAL_RCC_EnableCSS+0x1c>)
 80096e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096e6:	6013      	str	r3, [r2, #0]
}
 80096e8:	bf00      	nop
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	46020c00 	.word	0x46020c00

080096f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80096fc:	4b07      	ldr	r3, [pc, #28]	; (800971c <HAL_RCC_NMI_IRQHandler+0x24>)
 80096fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009708:	d105      	bne.n	8009716 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800970a:	f000 f809 	bl	8009720 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <HAL_RCC_NMI_IRQHandler+0x24>)
 8009710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009714:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8009716:	bf00      	nop
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	46020c00 	.word	0x46020c00

08009720 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009738:	4b3e      	ldr	r3, [pc, #248]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800973a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009746:	f7fe fcfb 	bl	8008140 <HAL_PWREx_GetVoltageRange>
 800974a:	6178      	str	r0, [r7, #20]
 800974c:	e019      	b.n	8009782 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800974e:	4b39      	ldr	r3, [pc, #228]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009754:	4a37      	ldr	r2, [pc, #220]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009756:	f043 0304 	orr.w	r3, r3, #4
 800975a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800975e:	4b35      	ldr	r3, [pc, #212]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800976c:	f7fe fce8 	bl	8008140 <HAL_PWREx_GetVoltageRange>
 8009770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009772:	4b30      	ldr	r3, [pc, #192]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009778:	4a2e      	ldr	r2, [pc, #184]	; (8009834 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800977a:	f023 0304 	bic.w	r3, r3, #4
 800977e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009788:	d003      	beq.n	8009792 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009790:	d109      	bne.n	80097a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009798:	d202      	bcs.n	80097a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800979a:	2301      	movs	r3, #1
 800979c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800979e:	e033      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80097a0:	2300      	movs	r3, #0
 80097a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80097a4:	e030      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ac:	d208      	bcs.n	80097c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b4:	d102      	bne.n	80097bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80097b6:	2303      	movs	r3, #3
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	e025      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e035      	b.n	800982c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c6:	d90f      	bls.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097d4:	d902      	bls.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e015      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80097dc:	2301      	movs	r3, #1
 80097de:	613b      	str	r3, [r7, #16]
 80097e0:	e012      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80097e2:	2300      	movs	r3, #0
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e00f      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ee:	d109      	bne.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f6:	d102      	bne.n	80097fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80097f8:	2301      	movs	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]
 80097fc:	e004      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80097fe:	2302      	movs	r3, #2
 8009800:	613b      	str	r3, [r7, #16]
 8009802:	e001      	b.n	8009808 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009804:	2301      	movs	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009808:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f023 020f 	bic.w	r2, r3, #15
 8009810:	4909      	ldr	r1, [pc, #36]	; (8009838 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4313      	orrs	r3, r2
 8009816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	429a      	cmp	r2, r3
 8009824:	d001      	beq.n	800982a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	46020c00 	.word	0x46020c00
 8009838:	40022000 	.word	0x40022000

0800983c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800983c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009840:	b0c8      	sub	sp, #288	; 0x120
 8009842:	af00      	add	r7, sp, #0
 8009844:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009848:	2300      	movs	r3, #0
 800984a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800984e:	2300      	movs	r3, #0
 8009850:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f002 0401 	and.w	r4, r2, #1
 8009860:	2500      	movs	r5, #0
 8009862:	ea54 0305 	orrs.w	r3, r4, r5
 8009866:	d00b      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009868:	4bd5      	ldr	r3, [pc, #852]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800986a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800986e:	f023 0103 	bic.w	r1, r3, #3
 8009872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	4ad1      	ldr	r2, [pc, #836]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800987a:	430b      	orrs	r3, r1
 800987c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f002 0802 	and.w	r8, r2, #2
 800988c:	f04f 0900 	mov.w	r9, #0
 8009890:	ea58 0309 	orrs.w	r3, r8, r9
 8009894:	d00b      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009896:	4bca      	ldr	r3, [pc, #808]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800989c:	f023 010c 	bic.w	r1, r3, #12
 80098a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a6:	4ac6      	ldr	r2, [pc, #792]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098a8:	430b      	orrs	r3, r1
 80098aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f002 0a04 	and.w	sl, r2, #4
 80098ba:	f04f 0b00 	mov.w	fp, #0
 80098be:	ea5a 030b 	orrs.w	r3, sl, fp
 80098c2:	d00b      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80098c4:	4bbe      	ldr	r3, [pc, #760]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ca:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80098ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d4:	4aba      	ldr	r2, [pc, #744]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098d6:	430b      	orrs	r3, r1
 80098d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f002 0308 	and.w	r3, r2, #8
 80098e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80098f2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d00b      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80098fc:	4bb0      	ldr	r3, [pc, #704]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	4aac      	ldr	r2, [pc, #688]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800990e:	430b      	orrs	r3, r1
 8009910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f002 0310 	and.w	r3, r2, #16
 8009920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009924:	2300      	movs	r3, #0
 8009926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800992a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800992e:	460b      	mov	r3, r1
 8009930:	4313      	orrs	r3, r2
 8009932:	d00b      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009934:	4ba2      	ldr	r3, [pc, #648]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800993a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800993e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009944:	4a9e      	ldr	r2, [pc, #632]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009946:	430b      	orrs	r3, r1
 8009948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009958:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009962:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d00b      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800996c:	4b94      	ldr	r3, [pc, #592]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800996e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009972:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800997c:	4a90      	ldr	r2, [pc, #576]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800997e:	430b      	orrs	r3, r1
 8009980:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f002 0320 	and.w	r3, r2, #32
 8009990:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009994:	2300      	movs	r3, #0
 8009996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800999a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800999e:	460b      	mov	r3, r1
 80099a0:	4313      	orrs	r3, r2
 80099a2:	d00b      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80099a4:	4b86      	ldr	r3, [pc, #536]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099aa:	f023 0107 	bic.w	r1, r3, #7
 80099ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b4:	4a82      	ldr	r2, [pc, #520]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099b6:	430b      	orrs	r3, r1
 80099b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80099c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099cc:	2300      	movs	r3, #0
 80099ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d00b      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80099dc:	4b78      	ldr	r3, [pc, #480]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80099e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ec:	4a74      	ldr	r2, [pc, #464]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099ee:	430b      	orrs	r3, r1
 80099f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a04:	2300      	movs	r3, #0
 8009a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4313      	orrs	r3, r2
 8009a12:	d00b      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009a14:	4b6a      	ldr	r3, [pc, #424]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a24:	4a66      	ldr	r2, [pc, #408]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a26:	430b      	orrs	r3, r1
 8009a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	d00b      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009a4c:	4b5c      	ldr	r3, [pc, #368]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a5c:	4a58      	ldr	r2, [pc, #352]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4313      	orrs	r3, r2
 8009a82:	d00b      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009a84:	4b4e      	ldr	r3, [pc, #312]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a8a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8009a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a94:	4a4a      	ldr	r2, [pc, #296]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a96:	430b      	orrs	r3, r1
 8009a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ab2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	d00b      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009abc:	4b40      	ldr	r3, [pc, #256]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009abe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009ac2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009acc:	4a3c      	ldr	r2, [pc, #240]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009aea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d00c      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009af4:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009af6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009afa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b06:	4a2e      	ldr	r2, [pc, #184]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b24:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d00c      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009b2e:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b34:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b40:	4a1f      	ldr	r2, [pc, #124]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b42:	430b      	orrs	r3, r1
 8009b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b62:	460b      	mov	r3, r1
 8009b64:	4313      	orrs	r3, r2
 8009b66:	d00c      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009b68:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b6e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	4a11      	ldr	r2, [pc, #68]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	d010      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ba8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb4:	4a02      	ldr	r2, [pc, #8]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009bbe:	bf00      	nop
 8009bc0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009bde:	460b      	mov	r3, r1
 8009be0:	4313      	orrs	r3, r2
 8009be2:	d04c      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bec:	2b80      	cmp	r3, #128	; 0x80
 8009bee:	d02d      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009bf0:	2b80      	cmp	r3, #128	; 0x80
 8009bf2:	d827      	bhi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf4:	2b60      	cmp	r3, #96	; 0x60
 8009bf6:	d02b      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bf8:	2b60      	cmp	r3, #96	; 0x60
 8009bfa:	d823      	bhi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d006      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009c00:	2b40      	cmp	r3, #64	; 0x40
 8009c02:	d81f      	bhi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d009      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d011      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c0c:	e01a      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c0e:	4bc0      	ldr	r3, [pc, #768]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c12:	4abf      	ldr	r2, [pc, #764]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c18:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c1a:	e01a      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c20:	3308      	adds	r3, #8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f002 fce8 	bl	800c5f8 <RCCEx_PLL2_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c2e:	e010      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c34:	332c      	adds	r3, #44	; 0x2c
 8009c36:	4618      	mov	r0, r3
 8009c38:	f002 fd76 	bl	800c728 <RCCEx_PLL3_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c42:	e006      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009c4a:	e002      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e000      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c52:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10d      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009c5a:	4bad      	ldr	r3, [pc, #692]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c60:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8009c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c6c:	4aa8      	ldr	r2, [pc, #672]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c74:	e003      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c76:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c7a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c94:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	d053      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009caa:	d033      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb0:	d82c      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb6:	d02f      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cbc:	d826      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc2:	d008      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc8:	d820      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd2:	d011      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cd4:	e01a      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cd6:	4b8e      	ldr	r3, [pc, #568]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	4a8d      	ldr	r2, [pc, #564]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ce0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009ce2:	e01a      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce8:	3308      	adds	r3, #8
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 fc84 	bl	800c5f8 <RCCEx_PLL2_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cf6:	e010      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cfc:	332c      	adds	r3, #44	; 0x2c
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f002 fd12 	bl	800c728 <RCCEx_PLL3_Config>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d0a:	e006      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009d12:	e002      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d14:	bf00      	nop
 8009d16:	e000      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009d22:	4b7b      	ldr	r3, [pc, #492]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d28:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d34:	4a76      	ldr	r2, [pc, #472]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d36:	430b      	orrs	r3, r1
 8009d38:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009d3c:	e003      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d42:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d56:	2300      	movs	r3, #0
 8009d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009d60:	460b      	mov	r3, r1
 8009d62:	4313      	orrs	r3, r2
 8009d64:	d046      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d6e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d72:	d028      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d74:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d78:	d821      	bhi.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d7e:	d022      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d84:	d81b      	bhi.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d8a:	d01c      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d90:	d815      	bhi.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d96:	d008      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9c:	d80f      	bhi.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da6:	d00e      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009da8:	e009      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dae:	3308      	adds	r3, #8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f002 fc21 	bl	800c5f8 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009dbc:	e004      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009dc4:	e000      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10d      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009dd0:	4b4f      	ldr	r3, [pc, #316]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009dd6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009de2:	4a4b      	ldr	r2, [pc, #300]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009dea:	e003      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009df0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e04:	2300      	movs	r3, #0
 8009e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d03f      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d81e      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e67 	.word	0x08009e67
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e4b 	.word	0x08009e4b
 8009e34:	08009e67 	.word	0x08009e67
 8009e38:	08009e67 	.word	0x08009e67
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e3c:	4b34      	ldr	r3, [pc, #208]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	4a33      	ldr	r2, [pc, #204]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e46:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009e48:	e00e      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e4e:	332c      	adds	r3, #44	; 0x2c
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 fc69 	bl	800c728 <RCCEx_PLL3_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e5c:	e004      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e64:	e000      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009e66:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e68:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10d      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009e70:	4b27      	ldr	r3, [pc, #156]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e76:	f023 0107 	bic.w	r1, r3, #7
 8009e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e82:	4a23      	ldr	r2, [pc, #140]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e84:	430b      	orrs	r3, r1
 8009e86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e90:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ea6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4313      	orrs	r3, r2
 8009eae:	d04c      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ebc:	d02a      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ec2:	d821      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ec4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ec8:	d026      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ece:	d81b      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed4:	d00e      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eda:	d815      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01d      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee4:	d110      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009ef2:	e014      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ef8:	332c      	adds	r3, #44	; 0x2c
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 fc14 	bl	800c728 <RCCEx_PLL3_Config>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009f06:	e00a      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009f0e:	e006      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009f10:	46020c00 	.word	0x46020c00
        break;
 8009f14:	bf00      	nop
 8009f16:	e002      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f18:	bf00      	nop
 8009f1a:	e000      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009f1e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10d      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009f26:	4baf      	ldr	r3, [pc, #700]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f38:	4aaa      	ldr	r2, [pc, #680]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009f40:	e003      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f42:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f46:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009f56:	673b      	str	r3, [r7, #112]	; 0x70
 8009f58:	2300      	movs	r3, #0
 8009f5a:	677b      	str	r3, [r7, #116]	; 0x74
 8009f5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009f60:	460b      	mov	r3, r1
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f000 80b5 	beq.w	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f6e:	4b9d      	ldr	r3, [pc, #628]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d113      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7c:	4b99      	ldr	r3, [pc, #612]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f82:	4a98      	ldr	r2, [pc, #608]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f84:	f043 0304 	orr.w	r3, r3, #4
 8009f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009f8c:	4b95      	ldr	r3, [pc, #596]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009fa4:	4b90      	ldr	r3, [pc, #576]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	4a8f      	ldr	r2, [pc, #572]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fb0:	f7f9 fbb6 	bl	8003720 <HAL_GetTick>
 8009fb4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fb8:	e00b      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fba:	f7f9 fbb1 	bl	8003720 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d903      	bls.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009fd0:	e005      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fd2:	4b85      	ldr	r3, [pc, #532]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0ed      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009fde:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d165      	bne.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fe6:	4b7f      	ldr	r3, [pc, #508]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d023      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a000:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a004:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a008:	4293      	cmp	r3, r2
 800a00a:	d01b      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a00c:	4b75      	ldr	r3, [pc, #468]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a00e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a016:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a01a:	4b72      	ldr	r3, [pc, #456]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a01c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a020:	4a70      	ldr	r2, [pc, #448]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a026:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a02a:	4b6e      	ldr	r3, [pc, #440]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a030:	4a6c      	ldr	r2, [pc, #432]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a036:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a03a:	4a6a      	ldr	r2, [pc, #424]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d019      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a050:	f7f9 fb66 	bl	8003720 <HAL_GetTick>
 800a054:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a058:	e00d      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a05a:	f7f9 fb61 	bl	8003720 <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a064:	1ad2      	subs	r2, r2, r3
 800a066:	f241 3388 	movw	r3, #5000	; 0x1388
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d903      	bls.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a076:	4b5b      	ldr	r3, [pc, #364]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0ea      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a084:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10d      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a08c:	4b55      	ldr	r3, [pc, #340]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a08e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a09a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a09e:	4a51      	ldr	r2, [pc, #324]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a0a6:	e008      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0a8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0ac:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800a0b0:	e003      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0b6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0ba:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d107      	bne.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0c2:	4b48      	ldr	r3, [pc, #288]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c8:	4a46      	ldr	r2, [pc, #280]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0ca:	f023 0304 	bic.w	r3, r3, #4
 800a0ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a0de:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	d042      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a0fa:	d022      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a0fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a100:	d81b      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a106:	d011      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a10c:	d815      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d019      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a116:	d110      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a11c:	3308      	adds	r3, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 fa6a 	bl	800c5f8 <RCCEx_PLL2_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a12a:	e00d      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12c:	4b2d      	ldr	r3, [pc, #180]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a130:	4a2c      	ldr	r2, [pc, #176]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a136:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a138:	e006      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a140:	e002      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a142:	bf00      	nop
 800a144:	e000      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a146:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a148:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10d      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a150:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a156:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a15e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a162:	4a20      	ldr	r2, [pc, #128]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a164:	430b      	orrs	r3, r1
 800a166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a16a:	e003      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a170:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a180:	663b      	str	r3, [r7, #96]	; 0x60
 800a182:	2300      	movs	r3, #0
 800a184:	667b      	str	r3, [r7, #100]	; 0x64
 800a186:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a18a:	460b      	mov	r3, r1
 800a18c:	4313      	orrs	r3, r2
 800a18e:	d031      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a194:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a19c:	d00b      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a2:	d804      	bhi.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ac:	d007      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a1b4:	e004      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b6:	bf00      	nop
 800a1b8:	e002      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1be:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1c0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d111      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a1ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1da:	4a02      	ldr	r2, [pc, #8]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a1e2:	e007      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a1e4:	46020c00 	.word	0x46020c00
 800a1e8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a1f0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a200:	65bb      	str	r3, [r7, #88]	; 0x58
 800a202:	2300      	movs	r3, #0
 800a204:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a206:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	d00c      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a210:	4bb2      	ldr	r3, [pc, #712]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a216:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800a21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a21e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a222:	4aae      	ldr	r2, [pc, #696]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a224:	430b      	orrs	r3, r1
 800a226:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a236:	653b      	str	r3, [r7, #80]	; 0x50
 800a238:	2300      	movs	r3, #0
 800a23a:	657b      	str	r3, [r7, #84]	; 0x54
 800a23c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d019      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a24a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a24e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a252:	d105      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a254:	4ba1      	ldr	r3, [pc, #644]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	4aa0      	ldr	r2, [pc, #640]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a25a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a25e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a260:	4b9e      	ldr	r3, [pc, #632]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a266:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a26e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a272:	4a9a      	ldr	r2, [pc, #616]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a274:	430b      	orrs	r3, r1
 800a276:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a286:	64bb      	str	r3, [r7, #72]	; 0x48
 800a288:	2300      	movs	r3, #0
 800a28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a28c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d00c      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a296:	4b91      	ldr	r3, [pc, #580]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a29c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a2a8:	4a8c      	ldr	r2, [pc, #560]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2bc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2be:	2300      	movs	r3, #0
 800a2c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a2c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a2cc:	4b83      	ldr	r3, [pc, #524]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a2de:	4a7f      	ldr	r2, [pc, #508]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a2f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4313      	orrs	r3, r2
 800a300:	d00c      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a302:	4b76      	ldr	r3, [pc, #472]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a308:	f023 0118 	bic.w	r1, r3, #24
 800a30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a310:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a314:	4a71      	ldr	r2, [pc, #452]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a316:	430b      	orrs	r3, r1
 800a318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a328:	633b      	str	r3, [r7, #48]	; 0x30
 800a32a:	2300      	movs	r3, #0
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
 800a32e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a332:	460b      	mov	r3, r1
 800a334:	4313      	orrs	r3, r2
 800a336:	d032      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a33c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a344:	d105      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a346:	4b65      	ldr	r3, [pc, #404]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	4a64      	ldr	r2, [pc, #400]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a34c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a350:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a356:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a35a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a35e:	d108      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a364:	3308      	adds	r3, #8
 800a366:	4618      	mov	r0, r3
 800a368:	f002 f946 	bl	800c5f8 <RCCEx_PLL2_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800a372:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a37a:	4b58      	ldr	r3, [pc, #352]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a37c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a380:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a388:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a38c:	4a53      	ldr	r2, [pc, #332]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a38e:	430b      	orrs	r3, r1
 800a390:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a394:	e003      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a396:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a39a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d04a      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a3c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3c6:	d01e      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a3c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3cc:	d825      	bhi.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d2:	d00e      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a3d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d8:	d81f      	bhi.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d021      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a3de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3e2:	d11a      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e4:	4b3d      	ldr	r3, [pc, #244]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	4a3c      	ldr	r2, [pc, #240]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ee:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3f0:	e018      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f002 f8fd 	bl	800c5f8 <RCCEx_PLL2_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a404:	e00e      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a40a:	332c      	adds	r3, #44	; 0x2c
 800a40c:	4618      	mov	r0, r3
 800a40e:	f002 f98b 	bl	800c728 <RCCEx_PLL3_Config>
 800a412:	4603      	mov	r3, r0
 800a414:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a418:	e004      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a424:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10d      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a42c:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a42e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a43a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a43e:	4927      	ldr	r1, [pc, #156]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a440:	4313      	orrs	r3, r2
 800a442:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a44c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a45c:	623b      	str	r3, [r7, #32]
 800a45e:	2300      	movs	r3, #0
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
 800a462:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d03d      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a478:	d00e      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a47a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a47e:	d815      	bhi.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d017      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a488:	d110      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48a:	4b14      	ldr	r3, [pc, #80]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48e:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a494:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a496:	e00e      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a49c:	3308      	adds	r3, #8
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f002 f8aa 	bl	800c5f8 <RCCEx_PLL2_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a4b6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d110      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	4902      	ldr	r1, [pc, #8]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a4d8:	e006      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a4da:	bf00      	nop
 800a4dc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a4e4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	d00c      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a504:	4b68      	ldr	r3, [pc, #416]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a50a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a512:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a516:	4964      	ldr	r1, [pc, #400]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	2100      	movs	r1, #0
 800a528:	6139      	str	r1, [r7, #16]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a534:	460b      	mov	r3, r1
 800a536:	4313      	orrs	r3, r2
 800a538:	d036      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a53e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00c      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a54a:	d113      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a550:	3308      	adds	r3, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f002 f850 	bl	800c5f8 <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a55e:	e00d      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a564:	332c      	adds	r3, #44	; 0x2c
 800a566:	4618      	mov	r0, r3
 800a568:	f002 f8de 	bl	800c728 <RCCEx_PLL3_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a57a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a57c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10d      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a584:	4b48      	ldr	r3, [pc, #288]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a58a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a596:	4944      	ldr	r1, [pc, #272]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a59e:	e003      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a5a4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	d024      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d108      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5d4:	332c      	adds	r3, #44	; 0x2c
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f002 f8a6 	bl	800c728 <RCCEx_PLL3_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800a5e2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10d      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5f0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5fc:	492a      	ldr	r1, [pc, #168]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a604:	e003      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a606:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a60a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	2100      	movs	r1, #0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	607b      	str	r3, [r7, #4]
 800a620:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d036      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a62e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a632:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a636:	d00d      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a638:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a63c:	d811      	bhi.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a63e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a642:	d012      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a648:	d80b      	bhi.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a652:	d106      	bne.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a654:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a658:	4a13      	ldr	r2, [pc, #76]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a65a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a65e:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a660:	e004      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a668:	e000      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a66a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10d      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a67a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a67e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a682:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a686:	4908      	ldr	r1, [pc, #32]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a68e:	e003      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a694:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a698:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a8:	46020c00 	.word	0x46020c00

0800a6ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a6b4:	4ba6      	ldr	r3, [pc, #664]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6bc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a6be:	4ba4      	ldr	r3, [pc, #656]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a6c8:	4ba1      	ldr	r3, [pc, #644]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	0a1b      	lsrs	r3, r3, #8
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a6d6:	4b9e      	ldr	r3, [pc, #632]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6da:	091b      	lsrs	r3, r3, #4
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6e2:	4b9b      	ldr	r3, [pc, #620]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e6:	08db      	lsrs	r3, r3, #3
 800a6e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d062      	beq.n	800a7ca <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2b03      	cmp	r3, #3
 800a708:	f200 8081 	bhi.w	800a80e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d024      	beq.n	800a75c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d17a      	bne.n	800a80e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a722:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a72a:	4b89      	ldr	r3, [pc, #548]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a732:	ee07 3a90 	vmov	s15, r3
 800a736:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a73e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a742:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a746:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a75a:	e08f      	b.n	800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a75c:	4b7c      	ldr	r3, [pc, #496]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a768:	4b79      	ldr	r3, [pc, #484]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	0f1b      	lsrs	r3, r3, #28
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	e006      	b.n	800a782 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a774:	4b76      	ldr	r3, [pc, #472]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a77a:	041b      	lsls	r3, r3, #16
 800a77c:	0f1b      	lsrs	r3, r3, #28
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	4a76      	ldr	r2, [pc, #472]	; (800a95c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a788:	ee07 3a90 	vmov	s15, r3
 800a78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ac:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7c8:	e058      	b.n	800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	ee07 3a90 	vmov	s15, r3
 800a7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a7d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7dc:	4b5c      	ldr	r3, [pc, #368]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e4:	ee07 3a90 	vmov	s15, r3
 800a7e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7f0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a800:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a804:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a808:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a80c:	e036      	b.n	800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a80e:	4b50      	ldr	r3, [pc, #320]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a81a:	4b4d      	ldr	r3, [pc, #308]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	0f1b      	lsrs	r3, r3, #28
 800a820:	f003 030f 	and.w	r3, r3, #15
 800a824:	e006      	b.n	800a834 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a826:	4b4a      	ldr	r3, [pc, #296]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a82c:	041b      	lsls	r3, r3, #16
 800a82e:	0f1b      	lsrs	r3, r3, #28
 800a830:	f003 030f 	and.w	r3, r3, #15
 800a834:	4a49      	ldr	r2, [pc, #292]	; (800a95c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	ee07 3a90 	vmov	s15, r3
 800a848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a85e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a87a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a87c:	4b34      	ldr	r3, [pc, #208]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d017      	beq.n	800a8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a888:	4b31      	ldr	r3, [pc, #196]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88c:	0a5b      	lsrs	r3, r3, #9
 800a88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a89e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ae:	ee17 2a90 	vmov	r2, s15
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	e002      	b.n	800a8be <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d017      	beq.n	800a8fa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8ca:	4b21      	ldr	r3, [pc, #132]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ce:	0c1b      	lsrs	r3, r3, #16
 800a8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a8dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f0:	ee17 2a90 	vmov	r2, s15
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	605a      	str	r2, [r3, #4]
 800a8f8:	e002      	b.n	800a900 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a900:	4b13      	ldr	r3, [pc, #76]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d017      	beq.n	800a93c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a90c:	4b10      	ldr	r3, [pc, #64]	; (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a910:	0e1b      	lsrs	r3, r3, #24
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a922:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a926:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a932:	ee17 2a90 	vmov	r2, s15
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a93a:	e002      	b.n	800a942 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	609a      	str	r2, [r3, #8]
}
 800a942:	bf00      	nop
 800a944:	3724      	adds	r7, #36	; 0x24
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	46020c00 	.word	0x46020c00
 800a954:	4b742400 	.word	0x4b742400
 800a958:	46000000 	.word	0x46000000
 800a95c:	0800e2e8 	.word	0x0800e2e8

0800a960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a960:	b480      	push	{r7}
 800a962:	b089      	sub	sp, #36	; 0x24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a968:	4ba6      	ldr	r3, [pc, #664]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a970:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a972:	4ba4      	ldr	r3, [pc, #656]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a97c:	4ba1      	ldr	r3, [pc, #644]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	0a1b      	lsrs	r3, r3, #8
 800a982:	f003 030f 	and.w	r3, r3, #15
 800a986:	3301      	adds	r3, #1
 800a988:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a98a:	4b9e      	ldr	r3, [pc, #632]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	091b      	lsrs	r3, r3, #4
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a996:	4b9b      	ldr	r3, [pc, #620]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	08db      	lsrs	r3, r3, #3
 800a99c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d062      	beq.n	800aa7e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	f200 8081 	bhi.w	800aac2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d024      	beq.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d17a      	bne.n	800aac2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9de:	4b89      	ldr	r3, [pc, #548]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9f2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa0e:	e08f      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa10:	4b7c      	ldr	r3, [pc, #496]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800aa1c:	4b79      	ldr	r3, [pc, #484]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	0f1b      	lsrs	r3, r3, #28
 800aa22:	f003 030f 	and.w	r3, r3, #15
 800aa26:	e006      	b.n	800aa36 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800aa28:	4b76      	ldr	r3, [pc, #472]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa2e:	041b      	lsls	r3, r3, #16
 800aa30:	0f1b      	lsrs	r3, r3, #28
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	4a76      	ldr	r2, [pc, #472]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa60:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa7c:	e058      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa88:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aa8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa90:	4b5c      	ldr	r3, [pc, #368]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaa0:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaa4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aaa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aabc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aac0:	e036      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aac2:	4b50      	ldr	r3, [pc, #320]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800aace:	4b4d      	ldr	r3, [pc, #308]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	0f1b      	lsrs	r3, r3, #28
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	e006      	b.n	800aae8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800aada:	4b4a      	ldr	r3, [pc, #296]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aadc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aae0:	041b      	lsls	r3, r3, #16
 800aae2:	0f1b      	lsrs	r3, r3, #28
 800aae4:	f003 030f 	and.w	r3, r3, #15
 800aae8:	4a49      	ldr	r2, [pc, #292]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aaea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	ee07 3a90 	vmov	s15, r3
 800aafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab12:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab30:	4b34      	ldr	r3, [pc, #208]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab3c:	4b31      	ldr	r3, [pc, #196]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab40:	0a5b      	lsrs	r3, r3, #9
 800ab42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ab4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab62:	ee17 2a90 	vmov	r2, s15
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	e002      	b.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ab72:	4b24      	ldr	r3, [pc, #144]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d017      	beq.n	800abae <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab7e:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	0c1b      	lsrs	r3, r3, #16
 800ab84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab88:	ee07 3a90 	vmov	s15, r3
 800ab8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ab90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab94:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba4:	ee17 2a90 	vmov	r2, s15
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	e002      	b.n	800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800abb4:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d017      	beq.n	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc4:	0e1b      	lsrs	r3, r3, #24
 800abc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800abd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abda:	edd7 6a07 	vldr	s13, [r7, #28]
 800abde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe6:	ee17 2a90 	vmov	r2, s15
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abee:	e002      	b.n	800abf6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	609a      	str	r2, [r3, #8]
}
 800abf6:	bf00      	nop
 800abf8:	3724      	adds	r7, #36	; 0x24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	46020c00 	.word	0x46020c00
 800ac08:	4b742400 	.word	0x4b742400
 800ac0c:	46000000 	.word	0x46000000
 800ac10:	0800e2e8 	.word	0x0800e2e8

0800ac14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b089      	sub	sp, #36	; 0x24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac1c:	4ba6      	ldr	r3, [pc, #664]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac24:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac26:	4ba4      	ldr	r3, [pc, #656]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ac30:	4ba1      	ldr	r3, [pc, #644]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac34:	0a1b      	lsrs	r3, r3, #8
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ac3e:	4b9e      	ldr	r3, [pc, #632]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	091b      	lsrs	r3, r3, #4
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ac4a:	4b9b      	ldr	r3, [pc, #620]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4e:	08db      	lsrs	r3, r3, #3
 800ac50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d062      	beq.n	800ad32 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	f200 8081 	bhi.w	800ad76 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d024      	beq.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d17a      	bne.n	800ad76 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b89      	ldr	r3, [pc, #548]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aca6:	eddf 5a86 	vldr	s11, [pc, #536]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800acc2:	e08f      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800acc4:	4b7c      	ldr	r3, [pc, #496]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800acd0:	4b79      	ldr	r3, [pc, #484]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	0f1b      	lsrs	r3, r3, #28
 800acd6:	f003 030f 	and.w	r3, r3, #15
 800acda:	e006      	b.n	800acea <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800acdc:	4b76      	ldr	r3, [pc, #472]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	0f1b      	lsrs	r3, r3, #28
 800ace6:	f003 030f 	and.w	r3, r3, #15
 800acea:	4a76      	ldr	r2, [pc, #472]	; (800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800acec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	ee07 3a90 	vmov	s15, r3
 800ad0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad10:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad14:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad30:	e058      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ad40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad44:	4b5c      	ldr	r3, [pc, #368]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	ee07 3a90 	vmov	s15, r3
 800ad50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad54:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad58:	eddf 5a59 	vldr	s11, [pc, #356]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad68:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad74:	e036      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad76:	4b50      	ldr	r3, [pc, #320]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800ad82:	4b4d      	ldr	r3, [pc, #308]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	0f1b      	lsrs	r3, r3, #28
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	e006      	b.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ad8e:	4b4a      	ldr	r3, [pc, #296]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad94:	041b      	lsls	r3, r3, #16
 800ad96:	0f1b      	lsrs	r3, r3, #28
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	4a49      	ldr	r2, [pc, #292]	; (800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ad9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800adc6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800adca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800add6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ade2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ade4:	4b34      	ldr	r3, [pc, #208]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d017      	beq.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adf0:	4b31      	ldr	r3, [pc, #196]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf4:	0a5b      	lsrs	r3, r3, #9
 800adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ae02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae16:	ee17 2a90 	vmov	r2, s15
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e002      	b.n	800ae26 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae26:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d017      	beq.n	800ae62 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae32:	4b21      	ldr	r3, [pc, #132]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae36:	0c1b      	lsrs	r3, r3, #16
 800ae38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae3c:	ee07 3a90 	vmov	s15, r3
 800ae40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ae44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae48:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae58:	ee17 2a90 	vmov	r2, s15
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	605a      	str	r2, [r3, #4]
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae74:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae78:	0e1b      	lsrs	r3, r3, #24
 800ae7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ae86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae8a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae9a:	ee17 2a90 	vmov	r2, s15
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aea2:	e002      	b.n	800aeaa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
}
 800aeaa:	bf00      	nop
 800aeac:	3724      	adds	r7, #36	; 0x24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	46020c00 	.word	0x46020c00
 800aebc:	4b742400 	.word	0x4b742400
 800aec0:	46000000 	.word	0x46000000
 800aec4:	0800e2e8 	.word	0x0800e2e8

0800aec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08e      	sub	sp, #56	; 0x38
 800aecc:	af00      	add	r7, sp, #0
 800aece:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800aeda:	430b      	orrs	r3, r1
 800aedc:	d145      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aede:	4ba7      	ldr	r3, [pc, #668]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aee8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aeea:	4ba4      	ldr	r3, [pc, #656]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aeec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d108      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aefe:	d104      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800af00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af04:	637b      	str	r3, [r7, #52]	; 0x34
 800af06:	f001 bb5a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af0a:	4b9c      	ldr	r3, [pc, #624]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af18:	d114      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af20:	d110      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af22:	4b96      	ldr	r3, [pc, #600]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af30:	d103      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800af32:	23fa      	movs	r3, #250	; 0xfa
 800af34:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af36:	f001 bb42 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af40:	f001 bb3d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800af44:	4b8d      	ldr	r3, [pc, #564]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af50:	d107      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af58:	d103      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800af5a:	4b89      	ldr	r3, [pc, #548]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
 800af5e:	f001 bb2e 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	637b      	str	r3, [r7, #52]	; 0x34
 800af66:	f001 bb2a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800af72:	430b      	orrs	r3, r1
 800af74:	d151      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800af76:	4b81      	ldr	r3, [pc, #516]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af7c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800af80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	2b80      	cmp	r3, #128	; 0x80
 800af86:	d035      	beq.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	2b80      	cmp	r3, #128	; 0x80
 800af8c:	d841      	bhi.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	2b60      	cmp	r3, #96	; 0x60
 800af92:	d02a      	beq.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	2b60      	cmp	r3, #96	; 0x60
 800af98:	d83b      	bhi.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	2b40      	cmp	r3, #64	; 0x40
 800af9e:	d009      	beq.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	2b40      	cmp	r3, #64	; 0x40
 800afa4:	d835      	bhi.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00c      	beq.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2b20      	cmp	r3, #32
 800afb0:	d012      	beq.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800afb2:	e02e      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fb77 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afc2:	f001 bafc 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc6:	f107 0318 	add.w	r3, r7, #24
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff fcc8 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afd4:	f001 baf3 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd8:	f107 030c 	add.w	r3, r7, #12
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fe19 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe6:	f001 baea 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800afea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800afee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aff0:	f001 bae5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aff4:	4b61      	ldr	r3, [pc, #388]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800affc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b000:	d103      	bne.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b002:	4b60      	ldr	r3, [pc, #384]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b006:	f001 bada 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b00e:	f001 bad6 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b012:	2300      	movs	r3, #0
 800b014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b016:	f001 bad2 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b01e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b022:	430b      	orrs	r3, r1
 800b024:	d158      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b026:	4b55      	ldr	r3, [pc, #340]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b02c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b030:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b038:	d03b      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b040:	d846      	bhi.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b048:	d02e      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b050:	d83e      	bhi.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b058:	d00b      	beq.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b060:	d836      	bhi.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00d      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b06e:	d012      	beq.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b070:	e02e      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fb18 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b080:	f001 ba9d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b084:	f107 0318 	add.w	r3, r7, #24
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fc69 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b092:	f001 ba94 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fdba 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0a4:	f001 ba8b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b0ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0ae:	f001 ba86 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0b2:	4b32      	ldr	r3, [pc, #200]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0be:	d103      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b0c0:	4b30      	ldr	r3, [pc, #192]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0c4:	f001 ba7b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0cc:	f001 ba77 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0d4:	f001 ba73 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0dc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	d126      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b0e4:	4b25      	ldr	r3, [pc, #148]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b0f0:	4b22      	ldr	r3, [pc, #136]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0fc:	d106      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	2b00      	cmp	r3, #0
 800b102:	d103      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b104:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
 800b108:	f001 ba59 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b10c:	4b1b      	ldr	r3, [pc, #108]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b118:	d107      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b120:	d103      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b122:	4b19      	ldr	r3, [pc, #100]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b124:	637b      	str	r3, [r7, #52]	; 0x34
 800b126:	f001 ba4a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
 800b12e:	f001 ba46 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b136:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800b13a:	430b      	orrs	r3, r1
 800b13c:	d16e      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b144:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b148:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b150:	d03d      	beq.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b158:	d85c      	bhi.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b160:	d014      	beq.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b168:	d854      	bhi.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d01f      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b176:	d012      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b178:	e04c      	b.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b17a:	bf00      	nop
 800b17c:	46020c00 	.word	0x46020c00
 800b180:	0007a120 	.word	0x0007a120
 800b184:	00f42400 	.word	0x00f42400
 800b188:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fa8b 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b19a:	f001 ba10 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fbdc 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ac:	f001 ba07 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b1b0:	4ba7      	ldr	r3, [pc, #668]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1bc:	d103      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b1be:	4ba5      	ldr	r3, [pc, #660]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1c2:	f001 b9fc 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ca:	f001 b9f8 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1ce:	4ba0      	ldr	r3, [pc, #640]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0320 	and.w	r3, r3, #32
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	d118      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1da:	4b9d      	ldr	r3, [pc, #628]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d005      	beq.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b1e6:	4b9a      	ldr	r3, [pc, #616]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	0e1b      	lsrs	r3, r3, #24
 800b1ec:	f003 030f 	and.w	r3, r3, #15
 800b1f0:	e006      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b1f2:	4b97      	ldr	r3, [pc, #604]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1f8:	041b      	lsls	r3, r3, #16
 800b1fa:	0e1b      	lsrs	r3, r3, #24
 800b1fc:	f003 030f 	and.w	r3, r3, #15
 800b200:	4a95      	ldr	r2, [pc, #596]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b208:	f001 b9d9 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b210:	f001 b9d5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b218:	f001 b9d1 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b220:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800b224:	430b      	orrs	r3, r1
 800b226:	d17f      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b228:	4b89      	ldr	r3, [pc, #548]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b22a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b232:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	2b00      	cmp	r3, #0
 800b238:	d165      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b23a:	4b85      	ldr	r3, [pc, #532]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b23c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b240:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b244:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b24c:	d034      	beq.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b254:	d853      	bhi.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b25c:	d00b      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b264:	d84b      	bhi.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d016      	beq.n	800b29a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b272:	d009      	beq.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b274:	e043      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fa16 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b284:	f001 b99b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b288:	f107 0318 	add.w	r3, r7, #24
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff fb67 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b296:	f001 b992 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b29a:	4b6d      	ldr	r3, [pc, #436]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a6:	d103      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b2a8:	4b6a      	ldr	r3, [pc, #424]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2ac:	f001 b987 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b2b4:	f001 b983 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2b8:	4b65      	ldr	r3, [pc, #404]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d118      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2c4:	4b62      	ldr	r3, [pc, #392]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b2d0:	4b5f      	ldr	r3, [pc, #380]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	0e1b      	lsrs	r3, r3, #24
 800b2d6:	f003 030f 	and.w	r3, r3, #15
 800b2da:	e006      	b.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b2dc:	4b5c      	ldr	r3, [pc, #368]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b2e2:	041b      	lsls	r3, r3, #16
 800b2e4:	0e1b      	lsrs	r3, r3, #24
 800b2e6:	f003 030f 	and.w	r3, r3, #15
 800b2ea:	4a5b      	ldr	r2, [pc, #364]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2f2:	f001 b964 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b2fa:	f001 b960 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b302:	f001 b95c 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b30c:	d108      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f9ca 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	637b      	str	r3, [r7, #52]	; 0x34
 800b31c:	f001 b94f 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b320:	2300      	movs	r3, #0
 800b322:	637b      	str	r3, [r7, #52]	; 0x34
 800b324:	f001 b94b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32c:	1e51      	subs	r1, r2, #1
 800b32e:	430b      	orrs	r3, r1
 800b330:	d136      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b332:	4b47      	ldr	r3, [pc, #284]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	2b00      	cmp	r3, #0
 800b342:	d104      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b344:	f7fe f968 	bl	8009618 <HAL_RCC_GetPCLK2Freq>
 800b348:	6378      	str	r0, [r7, #52]	; 0x34
 800b34a:	f001 b938 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2b01      	cmp	r3, #1
 800b352:	d104      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b354:	f7fe f830 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b358:	6378      	str	r0, [r7, #52]	; 0x34
 800b35a:	f001 b930 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b35e:	4b3c      	ldr	r3, [pc, #240]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b36a:	d106      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d103      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b372:	4b3a      	ldr	r3, [pc, #232]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b374:	637b      	str	r3, [r7, #52]	; 0x34
 800b376:	f001 b922 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b37a:	4b35      	ldr	r3, [pc, #212]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b37c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b380:	f003 0302 	and.w	r3, r3, #2
 800b384:	2b02      	cmp	r3, #2
 800b386:	d107      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d104      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b38e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
 800b394:	f001 b913 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
 800b39c:	f001 b90f 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a4:	1e91      	subs	r1, r2, #2
 800b3a6:	430b      	orrs	r3, r1
 800b3a8:	d136      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b3aa:	4b29      	ldr	r3, [pc, #164]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3b0:	f003 030c 	and.w	r3, r3, #12
 800b3b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b3bc:	f7fe f918 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b3c0:	6378      	str	r0, [r7, #52]	; 0x34
 800b3c2:	f001 b8fc 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d104      	bne.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3cc:	f7fd fff4 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b3d0:	6378      	str	r0, [r7, #52]	; 0x34
 800b3d2:	f001 b8f4 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b3d6:	4b1e      	ldr	r3, [pc, #120]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3e2:	d106      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	2b08      	cmp	r3, #8
 800b3e8:	d103      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b3ea:	4b1c      	ldr	r3, [pc, #112]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ee:	f001 b8e6 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b3f2:	4b17      	ldr	r3, [pc, #92]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3f8:	f003 0302 	and.w	r3, r3, #2
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d107      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	2b0c      	cmp	r3, #12
 800b404:	d104      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
 800b40c:	f001 b8d7 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
 800b414:	f001 b8d3 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	1f11      	subs	r1, r2, #4
 800b41e:	430b      	orrs	r3, r1
 800b420:	d13f      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b422:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b42c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b434:	f7fe f8dc 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b438:	6378      	str	r0, [r7, #52]	; 0x34
 800b43a:	f001 b8c0 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	2b10      	cmp	r3, #16
 800b442:	d10d      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b444:	f7fd ffb8 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b448:	6378      	str	r0, [r7, #52]	; 0x34
 800b44a:	f001 b8b8 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b44e:	bf00      	nop
 800b450:	46020c00 	.word	0x46020c00
 800b454:	02dc6c00 	.word	0x02dc6c00
 800b458:	0800e2e8 	.word	0x0800e2e8
 800b45c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b460:	4ba8      	ldr	r3, [pc, #672]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b46c:	d106      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	2b20      	cmp	r3, #32
 800b472:	d103      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b474:	4ba4      	ldr	r3, [pc, #656]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
 800b478:	f001 b8a1 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b47c:	4ba1      	ldr	r3, [pc, #644]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b47e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b02      	cmp	r3, #2
 800b488:	d107      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	2b30      	cmp	r3, #48	; 0x30
 800b48e:	d104      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b494:	637b      	str	r3, [r7, #52]	; 0x34
 800b496:	f001 b892 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34
 800b49e:	f001 b88e 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a6:	f1a2 0108 	sub.w	r1, r2, #8
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	d136      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b4ae:	4b95      	ldr	r3, [pc, #596]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d104      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4c0:	f7fe f896 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b4c4:	6378      	str	r0, [r7, #52]	; 0x34
 800b4c6:	f001 b87a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	2b40      	cmp	r3, #64	; 0x40
 800b4ce:	d104      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4d0:	f7fd ff72 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b4d4:	6378      	str	r0, [r7, #52]	; 0x34
 800b4d6:	f001 b872 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b4da:	4b8a      	ldr	r3, [pc, #552]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e6:	d106      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	2b80      	cmp	r3, #128	; 0x80
 800b4ec:	d103      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b4ee:	4b86      	ldr	r3, [pc, #536]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f2:	f001 b864 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b4f6:	4b83      	ldr	r3, [pc, #524]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b02      	cmp	r3, #2
 800b502:	d107      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	2bc0      	cmp	r3, #192	; 0xc0
 800b508:	d104      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b50a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
 800b510:	f001 b855 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	637b      	str	r3, [r7, #52]	; 0x34
 800b518:	f001 b851 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b51c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b520:	f1a2 0110 	sub.w	r1, r2, #16
 800b524:	430b      	orrs	r3, r1
 800b526:	d139      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b528:	4b76      	ldr	r3, [pc, #472]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b52e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b532:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	2b00      	cmp	r3, #0
 800b538:	d104      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b53a:	f7fe f859 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b53e:	6378      	str	r0, [r7, #52]	; 0x34
 800b540:	f001 b83d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b54a:	d104      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b54c:	f7fd ff34 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b550:	6378      	str	r0, [r7, #52]	; 0x34
 800b552:	f001 b834 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b556:	4b6b      	ldr	r3, [pc, #428]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b562:	d107      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b56a:	d103      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b56c:	4b66      	ldr	r3, [pc, #408]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b56e:	637b      	str	r3, [r7, #52]	; 0x34
 800b570:	f001 b825 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b574:	4b63      	ldr	r3, [pc, #396]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b57a:	f003 0302 	and.w	r3, r3, #2
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d108      	bne.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b588:	d104      	bne.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b58e:	637b      	str	r3, [r7, #52]	; 0x34
 800b590:	f001 b815 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
 800b598:	f001 b811 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b59c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5a0:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	d139      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b5a8:	4b56      	ldr	r3, [pc, #344]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d104      	bne.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5ba:	f7fe f819 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b5be:	6378      	str	r0, [r7, #52]	; 0x34
 800b5c0:	f000 bffd 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ca:	d104      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5cc:	f7fd fef4 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b5d0:	6378      	str	r0, [r7, #52]	; 0x34
 800b5d2:	f000 bff4 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b5d6:	4b4b      	ldr	r3, [pc, #300]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e2:	d107      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ea:	d103      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b5ec:	4b46      	ldr	r3, [pc, #280]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f0:	f000 bfe5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b5f4:	4b43      	ldr	r3, [pc, #268]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d108      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b608:	d104      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b60e:	637b      	str	r3, [r7, #52]	; 0x34
 800b610:	f000 bfd5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
 800b618:	f000 bfd1 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b620:	f1a2 0120 	sub.w	r1, r2, #32
 800b624:	430b      	orrs	r3, r1
 800b626:	d158      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b628:	4b36      	ldr	r3, [pc, #216]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b62a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b63a:	f7fe f801 	bl	8009640 <HAL_RCC_GetPCLK3Freq>
 800b63e:	6378      	str	r0, [r7, #52]	; 0x34
 800b640:	f000 bfbd 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	2b01      	cmp	r3, #1
 800b648:	d104      	bne.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b64a:	f7fd feb5 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b64e:	6378      	str	r0, [r7, #52]	; 0x34
 800b650:	f000 bfb5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b654:	4b2b      	ldr	r3, [pc, #172]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b65c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b660:	d106      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	2b02      	cmp	r3, #2
 800b666:	d103      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b668:	4b27      	ldr	r3, [pc, #156]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
 800b66c:	f000 bfa7 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b670:	4b24      	ldr	r3, [pc, #144]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d107      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	2b03      	cmp	r3, #3
 800b682:	d104      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
 800b68a:	f000 bf98 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b68e:	4b1d      	ldr	r3, [pc, #116]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b20      	cmp	r3, #32
 800b698:	d11b      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d118      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6a0:	4b18      	ldr	r3, [pc, #96]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d005      	beq.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b6ac:	4b15      	ldr	r3, [pc, #84]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	0e1b      	lsrs	r3, r3, #24
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	e006      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b6b8:	4b12      	ldr	r3, [pc, #72]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	0e1b      	lsrs	r3, r3, #24
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	4a11      	ldr	r2, [pc, #68]	; (800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ce:	f000 bf76 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6d6:	f000 bf72 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6de:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b6e2:	430b      	orrs	r3, r1
 800b6e4:	d172      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b6ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b6f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f8:	d10a      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6fa:	f7fd fe5d 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b6fe:	6378      	str	r0, [r7, #52]	; 0x34
 800b700:	f000 bf5d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b704:	46020c00 	.word	0x46020c00
 800b708:	00f42400 	.word	0x00f42400
 800b70c:	0800e2e8 	.word	0x0800e2e8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b716:	d108      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b718:	f107 0318 	add.w	r3, r7, #24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff f91f 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b722:	6a3b      	ldr	r3, [r7, #32]
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
 800b726:	f000 bf4a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d104      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b730:	f7fd ff44 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 800b734:	6378      	str	r0, [r7, #52]	; 0x34
 800b736:	f000 bf42 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b740:	d122      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b742:	4bb0      	ldr	r3, [pc, #704]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	d118      	bne.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b74e:	4bad      	ldr	r3, [pc, #692]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b75a:	4baa      	ldr	r3, [pc, #680]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	0e1b      	lsrs	r3, r3, #24
 800b760:	f003 030f 	and.w	r3, r3, #15
 800b764:	e006      	b.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b766:	4ba7      	ldr	r3, [pc, #668]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b76c:	041b      	lsls	r3, r3, #16
 800b76e:	0e1b      	lsrs	r3, r3, #24
 800b770:	f003 030f 	and.w	r3, r3, #15
 800b774:	4aa4      	ldr	r2, [pc, #656]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
 800b77c:	f000 bf1f 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	637b      	str	r3, [r7, #52]	; 0x34
 800b784:	f000 bf1b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b788:	4b9e      	ldr	r3, [pc, #632]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b794:	d107      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b79c:	d103      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b79e:	4b9b      	ldr	r3, [pc, #620]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7a2:	f000 bf0c 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b7a6:	4b97      	ldr	r3, [pc, #604]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b2:	d107      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ba:	d103      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b7bc:	4b93      	ldr	r3, [pc, #588]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34
 800b7c0:	f000 befd 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7c8:	f000 bef9 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b7cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	d158      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b7d8:	4b8a      	ldr	r3, [pc, #552]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	d84b      	bhi.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b829 	.word	0x0800b829
 800b7f4:	0800b805 	.word	0x0800b805
 800b7f8:	0800b817 	.word	0x0800b817
 800b7fc:	0800b833 	.word	0x0800b833
 800b800:	0800b83d 	.word	0x0800b83d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe ff4f 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b812:	f000 bed4 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b816:	f107 030c 	add.w	r3, r7, #12
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff f9fa 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b824:	f000 becb 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b828:	f7fd fec8 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 800b82c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b82e:	f000 bec6 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b832:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b838:	f000 bec1 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b83c:	4b71      	ldr	r3, [pc, #452]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0320 	and.w	r3, r3, #32
 800b844:	2b20      	cmp	r3, #32
 800b846:	d118      	bne.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b848:	4b6e      	ldr	r3, [pc, #440]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b854:	4b6b      	ldr	r3, [pc, #428]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	0e1b      	lsrs	r3, r3, #24
 800b85a:	f003 030f 	and.w	r3, r3, #15
 800b85e:	e006      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b860:	4b68      	ldr	r3, [pc, #416]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b866:	041b      	lsls	r3, r3, #16
 800b868:	0e1b      	lsrs	r3, r3, #24
 800b86a:	f003 030f 	and.w	r3, r3, #15
 800b86e:	4a66      	ldr	r2, [pc, #408]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b876:	f000 bea2 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b87e:	f000 be9e 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b886:	f000 be9a 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b892:	430b      	orrs	r3, r1
 800b894:	d167      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b896:	4b5b      	ldr	r3, [pc, #364]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b89c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b8a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8a8:	d036      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8b0:	d855      	bhi.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8b8:	d029      	beq.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8c0:	d84d      	bhi.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c8:	d013      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d0:	d845      	bhi.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d015      	beq.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8de:	d13e      	bne.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fee1 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8ee:	f000 be66 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f2:	f107 030c 	add.w	r3, r7, #12
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff f98c 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b900:	f000 be5d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b904:	f7fd fe5a 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 800b908:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b90a:	f000 be58 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b90e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b914:	f000 be53 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b918:	4b3a      	ldr	r3, [pc, #232]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b20      	cmp	r3, #32
 800b922:	d118      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b924:	4b37      	ldr	r3, [pc, #220]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b930:	4b34      	ldr	r3, [pc, #208]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	0e1b      	lsrs	r3, r3, #24
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	e006      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b93c:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b93e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b942:	041b      	lsls	r3, r3, #16
 800b944:	0e1b      	lsrs	r3, r3, #24
 800b946:	f003 030f 	and.w	r3, r3, #15
 800b94a:	4a2f      	ldr	r2, [pc, #188]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b952:	f000 be34 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b95a:	f000 be30 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b962:	f000 be2c 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b96e:	430b      	orrs	r3, r1
 800b970:	d152      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b972:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b97c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b984:	f7fd fe34 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800b988:	6378      	str	r0, [r7, #52]	; 0x34
 800b98a:	f000 be18 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b994:	d104      	bne.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b996:	f7fd fd0f 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800b99a:	6378      	str	r0, [r7, #52]	; 0x34
 800b99c:	f000 be0f 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b9a0:	4b18      	ldr	r3, [pc, #96]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ac:	d107      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b4:	d103      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b9b6:	4b15      	ldr	r3, [pc, #84]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ba:	f000 be00 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b9be:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0320 	and.w	r3, r3, #32
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d122      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9d0:	d11e      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	0e1b      	lsrs	r3, r3, #24
 800b9e4:	f003 030f 	and.w	r3, r3, #15
 800b9e8:	e006      	b.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b9ea:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9f0:	041b      	lsls	r3, r3, #16
 800b9f2:	0e1b      	lsrs	r3, r3, #24
 800b9f4:	f003 030f 	and.w	r3, r3, #15
 800b9f8:	4a03      	ldr	r2, [pc, #12]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800ba00:	f000 bddd 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ba04:	46020c00 	.word	0x46020c00
 800ba08:	0800e2e8 	.word	0x0800e2e8
 800ba0c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	637b      	str	r3, [r7, #52]	; 0x34
 800ba14:	f000 bdd3 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ba18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba1c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800ba20:	430b      	orrs	r3, r1
 800ba22:	d14c      	bne.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ba24:	4ba8      	ldr	r3, [pc, #672]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba2e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d104      	bne.n	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba36:	f7fd fddb 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800ba3a:	6378      	str	r0, [r7, #52]	; 0x34
 800ba3c:	f000 bdbf 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba46:	d104      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba48:	f7fd fcb6 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800ba4c:	6378      	str	r0, [r7, #52]	; 0x34
 800ba4e:	f000 bdb6 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ba52:	4b9d      	ldr	r3, [pc, #628]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba5e:	d107      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba66:	d103      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ba68:	4b98      	ldr	r3, [pc, #608]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ba6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba6c:	f000 bda7 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ba70:	4b95      	ldr	r3, [pc, #596]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0320 	and.w	r3, r3, #32
 800ba78:	2b20      	cmp	r3, #32
 800ba7a:	d11c      	bne.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba82:	d118      	bne.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba84:	4b90      	ldr	r3, [pc, #576]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d005      	beq.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ba90:	4b8d      	ldr	r3, [pc, #564]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	0e1b      	lsrs	r3, r3, #24
 800ba96:	f003 030f 	and.w	r3, r3, #15
 800ba9a:	e006      	b.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ba9c:	4b8a      	ldr	r3, [pc, #552]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	0e1b      	lsrs	r3, r3, #24
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	4a89      	ldr	r2, [pc, #548]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800baac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
 800bab2:	f000 bd84 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bab6:	2300      	movs	r3, #0
 800bab8:	637b      	str	r3, [r7, #52]	; 0x34
 800baba:	f000 bd80 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800babe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bac6:	430b      	orrs	r3, r1
 800bac8:	d158      	bne.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800baca:	4b7f      	ldr	r3, [pc, #508]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bacc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bad4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	2bc0      	cmp	r3, #192	; 0xc0
 800bada:	d028      	beq.n	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	2bc0      	cmp	r3, #192	; 0xc0
 800bae0:	d848      	bhi.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	2b80      	cmp	r3, #128	; 0x80
 800bae6:	d00e      	beq.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	2b80      	cmp	r3, #128	; 0x80
 800baec:	d842      	bhi.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d014      	beq.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800bafa:	e03b      	b.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bafc:	f7fd fda0 	bl	8009640 <HAL_RCC_GetPCLK3Freq>
 800bb00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bb02:	f000 bd5c 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb06:	4b70      	ldr	r3, [pc, #448]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb12:	d103      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bb14:	4b6d      	ldr	r3, [pc, #436]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb18:	f000 bd51 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb20:	f000 bd4d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bb24:	f7fd fc48 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800bb28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bb2a:	f000 bd48 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb2e:	4b66      	ldr	r3, [pc, #408]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	d118      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb3a:	4b63      	ldr	r3, [pc, #396]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bb46:	4b60      	ldr	r3, [pc, #384]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	0e1b      	lsrs	r3, r3, #24
 800bb4c:	f003 030f 	and.w	r3, r3, #15
 800bb50:	e006      	b.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bb52:	4b5d      	ldr	r3, [pc, #372]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb58:	041b      	lsls	r3, r3, #16
 800bb5a:	0e1b      	lsrs	r3, r3, #24
 800bb5c:	f003 030f 	and.w	r3, r3, #15
 800bb60:	4a5b      	ldr	r2, [pc, #364]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb68:	f000 bd29 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb70:	f000 bd25 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb78:	f000 bd21 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bb7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb80:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800bb84:	430b      	orrs	r3, r1
 800bb86:	d14c      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bb88:	4b4f      	ldr	r3, [pc, #316]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bb92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d104      	bne.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb9a:	f7fd fd29 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800bb9e:	6378      	str	r0, [r7, #52]	; 0x34
 800bba0:	f000 bd0d 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbaa:	d104      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bbac:	f7fd fc04 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800bbb0:	6378      	str	r0, [r7, #52]	; 0x34
 800bbb2:	f000 bd04 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bbb6:	4b44      	ldr	r3, [pc, #272]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbc2:	d107      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbca:	d103      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bbcc:	4b3f      	ldr	r3, [pc, #252]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bbce:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd0:	f000 bcf5 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bbd4:	4b3c      	ldr	r3, [pc, #240]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0320 	and.w	r3, r3, #32
 800bbdc:	2b20      	cmp	r3, #32
 800bbde:	d11c      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bbe6:	d118      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbe8:	4b37      	ldr	r3, [pc, #220]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bbf4:	4b34      	ldr	r3, [pc, #208]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	0e1b      	lsrs	r3, r3, #24
 800bbfa:	f003 030f 	and.w	r3, r3, #15
 800bbfe:	e006      	b.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bc00:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc06:	041b      	lsls	r3, r3, #16
 800bc08:	0e1b      	lsrs	r3, r3, #24
 800bc0a:	f003 030f 	and.w	r3, r3, #15
 800bc0e:	4a30      	ldr	r2, [pc, #192]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
 800bc16:	f000 bcd2 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc1e:	f000 bcce 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bc22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc26:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	d152      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bc2e:	4b26      	ldr	r3, [pc, #152]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc34:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bc38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc40:	f7fd fcd6 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800bc44:	6378      	str	r0, [r7, #52]	; 0x34
 800bc46:	f000 bcba 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc50:	d104      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc52:	f7fd fbb1 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800bc56:	6378      	str	r0, [r7, #52]	; 0x34
 800bc58:	f000 bcb1 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bc5c:	4b1a      	ldr	r3, [pc, #104]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc68:	d107      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc70:	d103      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bc72:	4b16      	ldr	r3, [pc, #88]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc74:	637b      	str	r3, [r7, #52]	; 0x34
 800bc76:	f000 bca2 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bc7a:	4b13      	ldr	r3, [pc, #76]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b20      	cmp	r3, #32
 800bc84:	d11c      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc8c:	d118      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc8e:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bc9a:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	0e1b      	lsrs	r3, r3, #24
 800bca0:	f003 030f 	and.w	r3, r3, #15
 800bca4:	e006      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bca6:	4b08      	ldr	r3, [pc, #32]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bcac:	041b      	lsls	r3, r3, #16
 800bcae:	0e1b      	lsrs	r3, r3, #24
 800bcb0:	f003 030f 	and.w	r3, r3, #15
 800bcb4:	4a06      	ldr	r2, [pc, #24]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34
 800bcbc:	f000 bc7f 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc4:	f000 bc7b 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bcc8:	46020c00 	.word	0x46020c00
 800bccc:	00f42400 	.word	0x00f42400
 800bcd0:	0800e2e8 	.word	0x0800e2e8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bcd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	d14c      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bce0:	4ba6      	ldr	r3, [pc, #664]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bce6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bcf2:	f7fd fc7d 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800bcf6:	6378      	str	r0, [r7, #52]	; 0x34
 800bcf8:	f000 bc61 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd02:	d104      	bne.n	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd04:	f7fd fb58 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800bd08:	6378      	str	r0, [r7, #52]	; 0x34
 800bd0a:	f000 bc58 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bd0e:	4b9b      	ldr	r3, [pc, #620]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd1a:	d107      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd22:	d103      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bd24:	4b96      	ldr	r3, [pc, #600]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
 800bd28:	f000 bc49 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bd2c:	4b93      	ldr	r3, [pc, #588]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0320 	and.w	r3, r3, #32
 800bd34:	2b20      	cmp	r3, #32
 800bd36:	d11c      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd3e:	d118      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd40:	4b8e      	ldr	r3, [pc, #568]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d005      	beq.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bd4c:	4b8b      	ldr	r3, [pc, #556]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	0e1b      	lsrs	r3, r3, #24
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	e006      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bd58:	4b88      	ldr	r3, [pc, #544]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd5e:	041b      	lsls	r3, r3, #16
 800bd60:	0e1b      	lsrs	r3, r3, #24
 800bd62:	f003 030f 	and.w	r3, r3, #15
 800bd66:	4a87      	ldr	r2, [pc, #540]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6e:	f000 bc26 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
 800bd76:	f000 bc22 	b.w	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bd7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd7e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd82:	430b      	orrs	r3, r1
 800bd84:	d164      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bd86:	4b7d      	ldr	r3, [pc, #500]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d120      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd98:	4b78      	ldr	r3, [pc, #480]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0320 	and.w	r3, r3, #32
 800bda0:	2b20      	cmp	r3, #32
 800bda2:	d117      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bda4:	4b75      	ldr	r3, [pc, #468]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d005      	beq.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bdb0:	4b72      	ldr	r3, [pc, #456]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	0e1b      	lsrs	r3, r3, #24
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	e006      	b.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bdbc:	4b6f      	ldr	r3, [pc, #444]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bdc2:	041b      	lsls	r3, r3, #16
 800bdc4:	0e1b      	lsrs	r3, r3, #24
 800bdc6:	f003 030f 	and.w	r3, r3, #15
 800bdca:	4a6e      	ldr	r2, [pc, #440]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd0:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd2:	e3f4      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd8:	e3f1      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bdda:	4b68      	ldr	r3, [pc, #416]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bde0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bde4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bde8:	d112      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf0:	d10e      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdf2:	4b62      	ldr	r3, [pc, #392]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be00:	d102      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800be02:	23fa      	movs	r3, #250	; 0xfa
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be06:	e3da      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800be0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be0e:	e3d6      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800be10:	4b5a      	ldr	r3, [pc, #360]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be1c:	d106      	bne.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be24:	d102      	bne.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800be26:	4b56      	ldr	r3, [pc, #344]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be28:	637b      	str	r3, [r7, #52]	; 0x34
 800be2a:	e3c8      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be2c:	4b53      	ldr	r3, [pc, #332]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b02      	cmp	r3, #2
 800be38:	d107      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be40:	d103      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800be42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be46:	637b      	str	r3, [r7, #52]	; 0x34
 800be48:	e3b9      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	637b      	str	r3, [r7, #52]	; 0x34
 800be4e:	e3b6      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800be50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be54:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be58:	430b      	orrs	r3, r1
 800be5a:	d164      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be5c:	4b47      	ldr	r3, [pc, #284]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be66:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d120      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be6e:	4b43      	ldr	r3, [pc, #268]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b20      	cmp	r3, #32
 800be78:	d117      	bne.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be7a:	4b40      	ldr	r3, [pc, #256]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800be86:	4b3d      	ldr	r3, [pc, #244]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	0e1b      	lsrs	r3, r3, #24
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	e006      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800be92:	4b3a      	ldr	r3, [pc, #232]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be98:	041b      	lsls	r3, r3, #16
 800be9a:	0e1b      	lsrs	r3, r3, #24
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	4a38      	ldr	r2, [pc, #224]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34
 800bea8:	e389      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	637b      	str	r3, [r7, #52]	; 0x34
 800beae:	e386      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800beb0:	4b32      	ldr	r3, [pc, #200]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bebe:	d112      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec6:	d10e      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bec8:	4b2c      	ldr	r3, [pc, #176]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bed6:	d102      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800bed8:	23fa      	movs	r3, #250	; 0xfa
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bedc:	e36f      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bede:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bee4:	e36b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bee6:	4b25      	ldr	r3, [pc, #148]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef2:	d106      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800befa:	d102      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800befc:	4b20      	ldr	r3, [pc, #128]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800befe:	637b      	str	r3, [r7, #52]	; 0x34
 800bf00:	e35d      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bf02:	4b1e      	ldr	r3, [pc, #120]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d107      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf16:	d103      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bf18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1e:	e34e      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf20:	2300      	movs	r3, #0
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	e34b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf2e:	430b      	orrs	r3, r1
 800bf30:	d14e      	bne.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bf3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf44:	f7fd fb54 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800bf48:	6378      	str	r0, [r7, #52]	; 0x34
 800bf4a:	e338      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bf4c:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf5a:	d119      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf62:	d115      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf72:	d109      	bne.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bf74:	23fa      	movs	r3, #250	; 0xfa
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf78:	e321      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bf7a:	bf00      	nop
 800bf7c:	46020c00 	.word	0x46020c00
 800bf80:	00f42400 	.word	0x00f42400
 800bf84:	0800e2e8 	.word	0x0800e2e8
      }
      else
      {
        frequency = LSI_VALUE;
 800bf88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf8e:	e316      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bf90:	4ba8      	ldr	r3, [pc, #672]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf9c:	d106      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bfa4:	d102      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bfa6:	4ba4      	ldr	r3, [pc, #656]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bfa8:	637b      	str	r3, [r7, #52]	; 0x34
 800bfaa:	e308      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bfac:	4ba1      	ldr	r3, [pc, #644]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d107      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bfc0:	d103      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bfc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc8:	e2f9      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
 800bfce:	e2f6      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfd4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	d12d      	bne.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bfdc:	4b95      	ldr	r3, [pc, #596]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfe2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bfe6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bfe8:	4b92      	ldr	r3, [pc, #584]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff4:	d105      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bffc:	4b8e      	ldr	r3, [pc, #568]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
 800c000:	e2dd      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c008:	d107      	bne.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c00a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fb4c 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	637b      	str	r3, [r7, #52]	; 0x34
 800c018:	e2d1      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c020:	d107      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c022:	f107 0318 	add.w	r3, r7, #24
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fc9a 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34
 800c030:	e2c5      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c032:	2300      	movs	r3, #0
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
 800c036:	e2c2      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c03c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800c040:	430b      	orrs	r3, r1
 800c042:	d156      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c044:	4b7b      	ldr	r3, [pc, #492]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c04a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c04e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c056:	d028      	beq.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c05e:	d845      	bhi.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c066:	d013      	beq.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c06e:	d83d      	bhi.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c07c:	d004      	beq.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c07e:	e035      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c080:	f7fd faca 	bl	8009618 <HAL_RCC_GetPCLK2Freq>
 800c084:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c086:	e29a      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c088:	f7fd f996 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800c08c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c08e:	e296      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c090:	4b68      	ldr	r3, [pc, #416]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c09c:	d102      	bne.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c09e:	4b66      	ldr	r3, [pc, #408]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0a2:	e28c      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0a8:	e289      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c0aa:	4b62      	ldr	r3, [pc, #392]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 0320 	and.w	r3, r3, #32
 800c0b2:	2b20      	cmp	r3, #32
 800c0b4:	d117      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0b6:	4b5f      	ldr	r3, [pc, #380]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d005      	beq.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c0c2:	4b5c      	ldr	r3, [pc, #368]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	0e1b      	lsrs	r3, r3, #24
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	e006      	b.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c0ce:	4b59      	ldr	r3, [pc, #356]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	0e1b      	lsrs	r3, r3, #24
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	4a57      	ldr	r2, [pc, #348]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0e4:	e26b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0ea:	e268      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0f0:	e265      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c0f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f6:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c0fa:	430b      	orrs	r3, r1
 800c0fc:	d156      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c0fe:	4b4d      	ldr	r3, [pc, #308]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c108:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c110:	d028      	beq.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c118:	d845      	bhi.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c120:	d013      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c128:	d83d      	bhi.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c136:	d004      	beq.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c138:	e035      	b.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c13a:	f7fd fa59 	bl	80095f0 <HAL_RCC_GetPCLK1Freq>
 800c13e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c140:	e23d      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c142:	f7fd f939 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800c146:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c148:	e239      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c14a:	4b3a      	ldr	r3, [pc, #232]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c156:	d102      	bne.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c158:	4b37      	ldr	r3, [pc, #220]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c15a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c15c:	e22f      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c162:	e22c      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c164:	4b33      	ldr	r3, [pc, #204]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0320 	and.w	r3, r3, #32
 800c16c:	2b20      	cmp	r3, #32
 800c16e:	d117      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c170:	4b30      	ldr	r3, [pc, #192]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c17c:	4b2d      	ldr	r3, [pc, #180]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	0e1b      	lsrs	r3, r3, #24
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	e006      	b.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c188:	4b2a      	ldr	r3, [pc, #168]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c18a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	0e1b      	lsrs	r3, r3, #24
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c19c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c19e:	e20e      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1a4:	e20b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1aa:	e208      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b0:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	d17c      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1be:	f003 0318 	and.w	r3, r3, #24
 800c1c2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	2b18      	cmp	r3, #24
 800c1c8:	d870      	bhi.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c241 	.word	0x0800c241
 800c1d4:	0800c2ad 	.word	0x0800c2ad
 800c1d8:	0800c2ad 	.word	0x0800c2ad
 800c1dc:	0800c2ad 	.word	0x0800c2ad
 800c1e0:	0800c2ad 	.word	0x0800c2ad
 800c1e4:	0800c2ad 	.word	0x0800c2ad
 800c1e8:	0800c2ad 	.word	0x0800c2ad
 800c1ec:	0800c2ad 	.word	0x0800c2ad
 800c1f0:	0800c249 	.word	0x0800c249
 800c1f4:	0800c2ad 	.word	0x0800c2ad
 800c1f8:	0800c2ad 	.word	0x0800c2ad
 800c1fc:	0800c2ad 	.word	0x0800c2ad
 800c200:	0800c2ad 	.word	0x0800c2ad
 800c204:	0800c2ad 	.word	0x0800c2ad
 800c208:	0800c2ad 	.word	0x0800c2ad
 800c20c:	0800c2ad 	.word	0x0800c2ad
 800c210:	0800c251 	.word	0x0800c251
 800c214:	0800c2ad 	.word	0x0800c2ad
 800c218:	0800c2ad 	.word	0x0800c2ad
 800c21c:	0800c2ad 	.word	0x0800c2ad
 800c220:	0800c2ad 	.word	0x0800c2ad
 800c224:	0800c2ad 	.word	0x0800c2ad
 800c228:	0800c2ad 	.word	0x0800c2ad
 800c22c:	0800c2ad 	.word	0x0800c2ad
 800c230:	0800c26b 	.word	0x0800c26b
 800c234:	46020c00 	.word	0x46020c00
 800c238:	00f42400 	.word	0x00f42400
 800c23c:	0800e2e8 	.word	0x0800e2e8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c240:	f7fd f9fe 	bl	8009640 <HAL_RCC_GetPCLK3Freq>
 800c244:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c246:	e1ba      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c248:	f7fd f8b6 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800c24c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c24e:	e1b6      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c250:	4b9f      	ldr	r3, [pc, #636]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c25c:	d102      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c25e:	4b9d      	ldr	r3, [pc, #628]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c260:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c262:	e1ac      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c268:	e1a9      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c26a:	4b99      	ldr	r3, [pc, #612]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0320 	and.w	r3, r3, #32
 800c272:	2b20      	cmp	r3, #32
 800c274:	d117      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c276:	4b96      	ldr	r3, [pc, #600]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d005      	beq.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c282:	4b93      	ldr	r3, [pc, #588]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	0e1b      	lsrs	r3, r3, #24
 800c288:	f003 030f 	and.w	r3, r3, #15
 800c28c:	e006      	b.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c28e:	4b90      	ldr	r3, [pc, #576]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c294:	041b      	lsls	r3, r3, #16
 800c296:	0e1b      	lsrs	r3, r3, #24
 800c298:	f003 030f 	and.w	r3, r3, #15
 800c29c:	4a8e      	ldr	r2, [pc, #568]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2a4:	e18b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2aa:	e188      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2b0:	e185      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b6:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	d155      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c2be:	4b84      	ldr	r3, [pc, #528]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2d0:	d013      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2d8:	d844      	bhi.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e0:	d013      	beq.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e8:	d83c      	bhi.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d014      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2f6:	d014      	beq.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c2f8:	e034      	b.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2fa:	f107 0318 	add.w	r3, r7, #24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fe fb2e 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c308:	e159      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c30a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe f9cc 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c318:	e151      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c31a:	f7fd f84d 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800c31e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c320:	e14d      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c322:	4b6b      	ldr	r3, [pc, #428]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d117      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c32e:	4b68      	ldr	r3, [pc, #416]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d005      	beq.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c33a:	4b65      	ldr	r3, [pc, #404]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	0e1b      	lsrs	r3, r3, #24
 800c340:	f003 030f 	and.w	r3, r3, #15
 800c344:	e006      	b.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c346:	4b62      	ldr	r3, [pc, #392]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c34c:	041b      	lsls	r3, r3, #16
 800c34e:	0e1b      	lsrs	r3, r3, #24
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	4a60      	ldr	r2, [pc, #384]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c35c:	e12f      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c35e:	2300      	movs	r3, #0
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c362:	e12c      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c368:	e129      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c36e:	1e59      	subs	r1, r3, #1
 800c370:	ea52 0301 	orrs.w	r3, r2, r1
 800c374:	d13c      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c376:	4b56      	ldr	r3, [pc, #344]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c37c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c380:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c388:	d027      	beq.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c390:	d82b      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c398:	d017      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3a0:	d823      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3ae:	d004      	beq.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c3b0:	e01b      	b.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c3b2:	f7fd f801 	bl	80093b8 <HAL_RCC_GetSysClockFreq>
 800c3b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c3b8:	e101      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe f974 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3c8:	e0f9      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ca:	f107 0318 	add.w	r3, r7, #24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fac6 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3d8:	e0f1      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3da:	f107 030c 	add.w	r3, r7, #12
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fc18 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3e8:	e0e9      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3ee:	e0e6      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f4:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	d131      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c3fc:	4b34      	ldr	r3, [pc, #208]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c406:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c408:	4b31      	ldr	r3, [pc, #196]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c40a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c40e:	f003 0302 	and.w	r3, r3, #2
 800c412:	2b02      	cmp	r3, #2
 800c414:	d106      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d103      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
 800c422:	e0cc      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c424:	4b2a      	ldr	r3, [pc, #168]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c42a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c432:	d112      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c43a:	d10e      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c43c:	4b24      	ldr	r3, [pc, #144]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c43e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c44a:	d102      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c44c:	23fa      	movs	r3, #250	; 0xfa
 800c44e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c450:	e0b5      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c452:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c456:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c458:	e0b1      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	637b      	str	r3, [r7, #52]	; 0x34
 800c45e:	e0ae      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c464:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c468:	430b      	orrs	r3, r1
 800c46a:	d13b      	bne.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c46c:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c46e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c472:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c476:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c478:	4b15      	ldr	r3, [pc, #84]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c484:	d105      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d102      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c48c:	4b13      	ldr	r3, [pc, #76]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c48e:	637b      	str	r3, [r7, #52]	; 0x34
 800c490:	e095      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c492:	4b0f      	ldr	r3, [pc, #60]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c49e:	d106      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4a6:	d102      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c4a8:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ac:	e087      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c4ae:	4b08      	ldr	r3, [pc, #32]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ba:	d106      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4c2:	d102      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c4c4:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c8:	e079      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ce:	e076      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4d0:	46020c00 	.word	0x46020c00
 800c4d4:	00f42400 	.word	0x00f42400
 800c4d8:	0800e2e8 	.word	0x0800e2e8
 800c4dc:	02dc6c00 	.word	0x02dc6c00
 800c4e0:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e8:	1e99      	subs	r1, r3, #2
 800c4ea:	ea52 0301 	orrs.w	r3, r2, r1
 800c4ee:	d120      	bne.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c4f0:	4b35      	ldr	r3, [pc, #212]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d004      	beq.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c508:	d008      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c50a:	e00f      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c50c:	f107 030c 	add.w	r3, r7, #12
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fb7f 	bl	800ac14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c51a:	e050      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c51c:	f107 0318 	add.w	r3, r7, #24
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe fa1d 	bl	800a960 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c52a:	e048      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c530:	e045      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f1a3 0108 	sub.w	r1, r3, #8
 800c53a:	ea52 0301 	orrs.w	r3, r2, r1
 800c53e:	d13c      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c540:	4b21      	ldr	r3, [pc, #132]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c546:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c54a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c54c:	4b1e      	ldr	r3, [pc, #120]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c558:	d105      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d102      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c560:	4b1a      	ldr	r3, [pc, #104]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c562:	637b      	str	r3, [r7, #52]	; 0x34
 800c564:	e02b      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c56e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c572:	d106      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c57a:	d102      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c57c:	4b14      	ldr	r3, [pc, #80]	; (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c57e:	637b      	str	r3, [r7, #52]	; 0x34
 800c580:	e01d      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c588:	d107      	bne.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe f88c 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	637b      	str	r3, [r7, #52]	; 0x34
 800c598:	e011      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c5a0:	d108      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe f880 	bl	800a6ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	085b      	lsrs	r3, r3, #1
 800c5b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b2:	e004      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b8:	e001      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3738      	adds	r7, #56	; 0x38
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	46020c00 	.word	0x46020c00
 800c5cc:	00f42400 	.word	0x00f42400
 800c5d0:	007a1200 	.word	0x007a1200

0800c5d4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5de:	4a05      	ldr	r2, [pc, #20]	; (800c5f4 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5e0:	f043 0320 	orr.w	r3, r3, #32
 800c5e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800c5e8:	bf00      	nop
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	46020c00 	.word	0x46020c00

0800c5f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c600:	4b47      	ldr	r3, [pc, #284]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a46      	ldr	r2, [pc, #280]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c60a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c60c:	f7f7 f888 	bl	8003720 <HAL_GetTick>
 800c610:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c612:	e008      	b.n	800c626 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c614:	f7f7 f884 	bl	8003720 <HAL_GetTick>
 800c618:	4602      	mov	r2, r0
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d901      	bls.n	800c626 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c622:	2303      	movs	r3, #3
 800c624:	e077      	b.n	800c716 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c626:	4b3e      	ldr	r3, [pc, #248]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1f0      	bne.n	800c614 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c632:	4b3b      	ldr	r3, [pc, #236]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	6811      	ldr	r1, [r2, #0]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6852      	ldr	r2, [r2, #4]
 800c646:	3a01      	subs	r2, #1
 800c648:	0212      	lsls	r2, r2, #8
 800c64a:	430a      	orrs	r2, r1
 800c64c:	4934      	ldr	r1, [pc, #208]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c652:	4b33      	ldr	r3, [pc, #204]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c656:	4b33      	ldr	r3, [pc, #204]	; (800c724 <RCCEx_PLL2_Config+0x12c>)
 800c658:	4013      	ands	r3, r2
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6892      	ldr	r2, [r2, #8]
 800c65e:	3a01      	subs	r2, #1
 800c660:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	68d2      	ldr	r2, [r2, #12]
 800c668:	3a01      	subs	r2, #1
 800c66a:	0252      	lsls	r2, r2, #9
 800c66c:	b292      	uxth	r2, r2
 800c66e:	4311      	orrs	r1, r2
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6912      	ldr	r2, [r2, #16]
 800c674:	3a01      	subs	r2, #1
 800c676:	0412      	lsls	r2, r2, #16
 800c678:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c67c:	4311      	orrs	r1, r2
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6952      	ldr	r2, [r2, #20]
 800c682:	3a01      	subs	r2, #1
 800c684:	0612      	lsls	r2, r2, #24
 800c686:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c68a:	430a      	orrs	r2, r1
 800c68c:	4924      	ldr	r1, [pc, #144]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c68e:	4313      	orrs	r3, r2
 800c690:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c696:	f023 020c 	bic.w	r2, r3, #12
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	4920      	ldr	r1, [pc, #128]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c6a4:	4b1e      	ldr	r3, [pc, #120]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a1b      	ldr	r3, [r3, #32]
 800c6ac:	491c      	ldr	r1, [pc, #112]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c6b2:	4b1b      	ldr	r3, [pc, #108]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b6:	4a1a      	ldr	r2, [pc, #104]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6b8:	f023 0310 	bic.w	r3, r3, #16
 800c6bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6be:	4b18      	ldr	r3, [pc, #96]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	69d2      	ldr	r2, [r2, #28]
 800c6ce:	00d2      	lsls	r2, r2, #3
 800c6d0:	4913      	ldr	r1, [pc, #76]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6da:	4a11      	ldr	r2, [pc, #68]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6dc:	f043 0310 	orr.w	r3, r3, #16
 800c6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c6e2:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a0e      	ldr	r2, [pc, #56]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c6e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6ee:	f7f7 f817 	bl	8003720 <HAL_GetTick>
 800c6f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6f4:	e008      	b.n	800c708 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6f6:	f7f7 f813 	bl	8003720 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	2b02      	cmp	r3, #2
 800c702:	d901      	bls.n	800c708 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e006      	b.n	800c716 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <RCCEx_PLL2_Config+0x128>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0f0      	beq.n	800c6f6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c714:	2300      	movs	r3, #0

}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	46020c00 	.word	0x46020c00
 800c724:	80800000 	.word	0x80800000

0800c728 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c730:	4b47      	ldr	r3, [pc, #284]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a46      	ldr	r2, [pc, #280]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c73a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c73c:	f7f6 fff0 	bl	8003720 <HAL_GetTick>
 800c740:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c742:	e008      	b.n	800c756 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c744:	f7f6 ffec 	bl	8003720 <HAL_GetTick>
 800c748:	4602      	mov	r2, r0
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d901      	bls.n	800c756 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	e077      	b.n	800c846 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f0      	bne.n	800c744 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c762:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c76a:	f023 0303 	bic.w	r3, r3, #3
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6811      	ldr	r1, [r2, #0]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6852      	ldr	r2, [r2, #4]
 800c776:	3a01      	subs	r2, #1
 800c778:	0212      	lsls	r2, r2, #8
 800c77a:	430a      	orrs	r2, r1
 800c77c:	4934      	ldr	r1, [pc, #208]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c77e:	4313      	orrs	r3, r2
 800c780:	630b      	str	r3, [r1, #48]	; 0x30
 800c782:	4b33      	ldr	r3, [pc, #204]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c786:	4b33      	ldr	r3, [pc, #204]	; (800c854 <RCCEx_PLL3_Config+0x12c>)
 800c788:	4013      	ands	r3, r2
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6892      	ldr	r2, [r2, #8]
 800c78e:	3a01      	subs	r2, #1
 800c790:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	68d2      	ldr	r2, [r2, #12]
 800c798:	3a01      	subs	r2, #1
 800c79a:	0252      	lsls	r2, r2, #9
 800c79c:	b292      	uxth	r2, r2
 800c79e:	4311      	orrs	r1, r2
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	6912      	ldr	r2, [r2, #16]
 800c7a4:	3a01      	subs	r2, #1
 800c7a6:	0412      	lsls	r2, r2, #16
 800c7a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c7ac:	4311      	orrs	r1, r2
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6952      	ldr	r2, [r2, #20]
 800c7b2:	3a01      	subs	r2, #1
 800c7b4:	0612      	lsls	r2, r2, #24
 800c7b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	4924      	ldr	r1, [pc, #144]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c7c2:	4b23      	ldr	r3, [pc, #140]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	f023 020c 	bic.w	r2, r3, #12
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	699b      	ldr	r3, [r3, #24]
 800c7ce:	4920      	ldr	r1, [pc, #128]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c7d4:	4b1e      	ldr	r3, [pc, #120]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	491c      	ldr	r1, [pc, #112]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c7e2:	4b1b      	ldr	r3, [pc, #108]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e6:	4a1a      	ldr	r2, [pc, #104]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7e8:	f023 0310 	bic.w	r3, r3, #16
 800c7ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7ee:	4b18      	ldr	r3, [pc, #96]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	69d2      	ldr	r2, [r2, #28]
 800c7fe:	00d2      	lsls	r2, r2, #3
 800c800:	4913      	ldr	r1, [pc, #76]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c802:	4313      	orrs	r3, r2
 800c804:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c806:	4b12      	ldr	r3, [pc, #72]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	4a11      	ldr	r2, [pc, #68]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c80c:	f043 0310 	orr.w	r3, r3, #16
 800c810:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c812:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a0e      	ldr	r2, [pc, #56]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c81c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c81e:	f7f6 ff7f 	bl	8003720 <HAL_GetTick>
 800c822:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c824:	e008      	b.n	800c838 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c826:	f7f6 ff7b 	bl	8003720 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	2b02      	cmp	r3, #2
 800c832:	d901      	bls.n	800c838 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e006      	b.n	800c846 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <RCCEx_PLL3_Config+0x128>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d0f0      	beq.n	800c826 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	46020c00 	.word	0x46020c00
 800c854:	80800000 	.word	0x80800000

0800c858 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d071      	beq.n	800c94e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f6 fcc8 	bl	8003214 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2202      	movs	r2, #2
 800c888:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c88c:	4b32      	ldr	r3, [pc, #200]	; (800c958 <HAL_RTC_Init+0x100>)
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b10      	cmp	r3, #16
 800c896:	d051      	beq.n	800c93c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c898:	4b2f      	ldr	r3, [pc, #188]	; (800c958 <HAL_RTC_Init+0x100>)
 800c89a:	22ca      	movs	r2, #202	; 0xca
 800c89c:	625a      	str	r2, [r3, #36]	; 0x24
 800c89e:	4b2e      	ldr	r3, [pc, #184]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8a0:	2253      	movs	r2, #83	; 0x53
 800c8a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9ad 	bl	800cc04 <RTC_EnterInitMode>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d13f      	bne.n	800c934 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8b4:	4b28      	ldr	r3, [pc, #160]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	4a27      	ldr	r2, [pc, #156]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8ba:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8c2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8c4:	4b24      	ldr	r3, [pc, #144]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8c6:	699a      	ldr	r2, [r3, #24]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6859      	ldr	r1, [r3, #4]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4319      	orrs	r1, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	430b      	orrs	r3, r1
 800c8d8:	491f      	ldr	r1, [pc, #124]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	041b      	lsls	r3, r3, #16
 800c8e8:	491b      	ldr	r1, [pc, #108]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	; (800c958 <HAL_RTC_Init+0x100>)
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fe:	430b      	orrs	r3, r1
 800c900:	4915      	ldr	r1, [pc, #84]	; (800c958 <HAL_RTC_Init+0x100>)
 800c902:	4313      	orrs	r3, r2
 800c904:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f9b8 	bl	800cc7c <RTC_ExitInitMode>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10e      	bne.n	800c934 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c916:	4b10      	ldr	r3, [pc, #64]	; (800c958 <HAL_RTC_Init+0x100>)
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a19      	ldr	r1, [r3, #32]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	4319      	orrs	r1, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	430b      	orrs	r3, r1
 800c92e:	490a      	ldr	r1, [pc, #40]	; (800c958 <HAL_RTC_Init+0x100>)
 800c930:	4313      	orrs	r3, r2
 800c932:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c934:	4b08      	ldr	r3, [pc, #32]	; (800c958 <HAL_RTC_Init+0x100>)
 800c936:	22ff      	movs	r2, #255	; 0xff
 800c938:	625a      	str	r2, [r3, #36]	; 0x24
 800c93a:	e001      	b.n	800c940 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	46007800 	.word	0x46007800

0800c95c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <HAL_RTC_SetTime+0x1a>
 800c972:	2302      	movs	r3, #2
 800c974:	e088      	b.n	800ca88 <HAL_RTC_SetTime+0x12c>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c986:	4b42      	ldr	r3, [pc, #264]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800c988:	22ca      	movs	r2, #202	; 0xca
 800c98a:	625a      	str	r2, [r3, #36]	; 0x24
 800c98c:	4b40      	ldr	r3, [pc, #256]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800c98e:	2253      	movs	r2, #83	; 0x53
 800c990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f000 f936 	bl	800cc04 <RTC_EnterInitMode>
 800c998:	4603      	mov	r3, r0
 800c99a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c99c:	7cfb      	ldrb	r3, [r7, #19]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d163      	bne.n	800ca6a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c9a2:	4b3b      	ldr	r3, [pc, #236]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ae:	d057      	beq.n	800ca60 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d125      	bne.n	800ca02 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9b6:	4b36      	ldr	r3, [pc, #216]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d102      	bne.n	800c9c8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f993 	bl	800ccf8 <RTC_ByteToBcd2>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 f98c 	bl	800ccf8 <RTC_ByteToBcd2>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9e4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	789b      	ldrb	r3, [r3, #2]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f984 	bl	800ccf8 <RTC_ByteToBcd2>
 800c9f0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9f2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	78db      	ldrb	r3, [r3, #3]
 800c9fa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e017      	b.n	800ca32 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ca02:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2200      	movs	r2, #0
 800ca12:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	785b      	ldrb	r3, [r3, #1]
 800ca1e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca20:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca26:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	78db      	ldrb	r3, [r3, #3]
 800ca2c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca32:	4a17      	ldr	r2, [pc, #92]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca3e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca42:	699b      	ldr	r3, [r3, #24]
 800ca44:	4a12      	ldr	r2, [pc, #72]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca4a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800ca4c:	4b10      	ldr	r3, [pc, #64]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca4e:	699a      	ldr	r2, [r3, #24]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	68d9      	ldr	r1, [r3, #12]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	490d      	ldr	r1, [pc, #52]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f000 f90b 	bl	800cc7c <RTC_ExitInitMode>
 800ca66:	4603      	mov	r3, r0
 800ca68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca6a:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <HAL_RTC_SetTime+0x134>)
 800ca6c:	22ff      	movs	r2, #255	; 0xff
 800ca6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca70:	7cfb      	ldrb	r3, [r7, #19]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800ca86:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	371c      	adds	r7, #28
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd90      	pop	{r4, r7, pc}
 800ca90:	46007800 	.word	0x46007800

0800ca94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d101      	bne.n	800caae <HAL_RTC_SetDate+0x1a>
 800caaa:	2302      	movs	r3, #2
 800caac:	e071      	b.n	800cb92 <HAL_RTC_SetDate+0xfe>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2202      	movs	r2, #2
 800caba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10e      	bne.n	800cae2 <HAL_RTC_SetDate+0x4e>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	785b      	ldrb	r3, [r3, #1]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d008      	beq.n	800cae2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	785b      	ldrb	r3, [r3, #1]
 800cad4:	f023 0310 	bic.w	r3, r3, #16
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	330a      	adds	r3, #10
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d11c      	bne.n	800cb22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	78db      	ldrb	r3, [r3, #3]
 800caec:	4618      	mov	r0, r3
 800caee:	f000 f903 	bl	800ccf8 <RTC_ByteToBcd2>
 800caf2:	4603      	mov	r3, r0
 800caf4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	785b      	ldrb	r3, [r3, #1]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 f8fc 	bl	800ccf8 <RTC_ByteToBcd2>
 800cb00:	4603      	mov	r3, r0
 800cb02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	789b      	ldrb	r3, [r3, #2]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 f8f4 	bl	800ccf8 <RTC_ByteToBcd2>
 800cb10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cb12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	e00e      	b.n	800cb40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	78db      	ldrb	r3, [r3, #3]
 800cb26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	785b      	ldrb	r3, [r3, #1]
 800cb2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb40:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <HAL_RTC_SetDate+0x108>)
 800cb42:	22ca      	movs	r2, #202	; 0xca
 800cb44:	625a      	str	r2, [r3, #36]	; 0x24
 800cb46:	4b15      	ldr	r3, [pc, #84]	; (800cb9c <HAL_RTC_SetDate+0x108>)
 800cb48:	2253      	movs	r2, #83	; 0x53
 800cb4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f000 f859 	bl	800cc04 <RTC_EnterInitMode>
 800cb52:	4603      	mov	r3, r0
 800cb54:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb56:	7cfb      	ldrb	r3, [r7, #19]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10b      	bne.n	800cb74 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb5c:	4a0f      	ldr	r2, [pc, #60]	; (800cb9c <HAL_RTC_SetDate+0x108>)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 f886 	bl	800cc7c <RTC_ExitInitMode>
 800cb70:	4603      	mov	r3, r0
 800cb72:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb74:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <HAL_RTC_SetDate+0x108>)
 800cb76:	22ff      	movs	r2, #255	; 0xff
 800cb78:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cb7a:	7cfb      	ldrb	r3, [r7, #19]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d103      	bne.n	800cb88 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800cb90:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	46007800 	.word	0x46007800

0800cba0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cba8:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <HAL_RTC_WaitForSynchro+0x60>)
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	4a14      	ldr	r2, [pc, #80]	; (800cc00 <HAL_RTC_WaitForSynchro+0x60>)
 800cbae:	f023 0320 	bic.w	r3, r3, #32
 800cbb2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cbb4:	f7f6 fdb4 	bl	8003720 <HAL_GetTick>
 800cbb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbba:	e013      	b.n	800cbe4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbbc:	f7f6 fdb0 	bl	8003720 <HAL_GetTick>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbca:	d90b      	bls.n	800cbe4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbcc:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <HAL_RTC_WaitForSynchro+0x60>)
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0320 	and.w	r3, r3, #32
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10c      	bne.n	800cbf2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2203      	movs	r2, #3
 800cbdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e008      	b.n	800cbf6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbe4:	4b06      	ldr	r3, [pc, #24]	; (800cc00 <HAL_RTC_WaitForSynchro+0x60>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0320 	and.w	r3, r3, #32
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0e5      	beq.n	800cbbc <HAL_RTC_WaitForSynchro+0x1c>
 800cbf0:	e000      	b.n	800cbf4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbf2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	46007800 	.word	0x46007800

0800cc04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc10:	4b19      	ldr	r3, [pc, #100]	; (800cc78 <RTC_EnterInitMode+0x74>)
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d128      	bne.n	800cc6e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc1c:	4b16      	ldr	r3, [pc, #88]	; (800cc78 <RTC_EnterInitMode+0x74>)
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <RTC_EnterInitMode+0x74>)
 800cc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc26:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc28:	f7f6 fd7a 	bl	8003720 <HAL_GetTick>
 800cc2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc2e:	e013      	b.n	800cc58 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc30:	f7f6 fd76 	bl	8003720 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc3e:	d90b      	bls.n	800cc58 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc40:	4b0d      	ldr	r3, [pc, #52]	; (800cc78 <RTC_EnterInitMode+0x74>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10f      	bne.n	800cc6c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2203      	movs	r2, #3
 800cc54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <RTC_EnterInitMode+0x74>)
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <RTC_EnterInitMode+0x6a>
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d1e2      	bne.n	800cc30 <RTC_EnterInitMode+0x2c>
 800cc6a:	e000      	b.n	800cc6e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc6c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	46007800 	.word	0x46007800

0800cc7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc88:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4a19      	ldr	r2, [pc, #100]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800cc8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc92:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc94:	4b17      	ldr	r3, [pc, #92]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10c      	bne.n	800ccba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff ff7d 	bl	800cba0 <HAL_RTC_WaitForSynchro>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01e      	beq.n	800ccea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2203      	movs	r2, #3
 800ccb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	e017      	b.n	800ccea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccba:	4b0e      	ldr	r3, [pc, #56]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800ccbc:	699b      	ldr	r3, [r3, #24]
 800ccbe:	4a0d      	ldr	r2, [pc, #52]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800ccc0:	f023 0320 	bic.w	r3, r3, #32
 800ccc4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff6a 	bl	800cba0 <HAL_RTC_WaitForSynchro>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d005      	beq.n	800ccde <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	4a04      	ldr	r2, [pc, #16]	; (800ccf4 <RTC_ExitInitMode+0x78>)
 800cce4:	f043 0320 	orr.w	r3, r3, #32
 800cce8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	46007800 	.word	0x46007800

0800ccf8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd02:	2300      	movs	r3, #0
 800cd04:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800cd06:	79fb      	ldrb	r3, [r7, #7]
 800cd08:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800cd0a:	e005      	b.n	800cd18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800cd12:	7afb      	ldrb	r3, [r7, #11]
 800cd14:	3b0a      	subs	r3, #10
 800cd16:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800cd18:	7afb      	ldrb	r3, [r7, #11]
 800cd1a:	2b09      	cmp	r3, #9
 800cd1c:	d8f6      	bhi.n	800cd0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	011b      	lsls	r3, r3, #4
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	7afb      	ldrb	r3, [r7, #11]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	b2db      	uxtb	r3, r3
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	4910      	ldr	r1, [pc, #64]	; (800cd8c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	490c      	ldr	r1, [pc, #48]	; (800cd90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd60:	4313      	orrs	r3, r2
 800cd62:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cd64:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	6919      	ldr	r1, [r3, #16]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	041b      	lsls	r3, r3, #16
 800cd76:	430b      	orrs	r3, r1
 800cd78:	4905      	ldr	r1, [pc, #20]	; (800cd90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	46007800 	.word	0x46007800
 800cd90:	46007c00 	.word	0x46007c00

0800cd94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e0fb      	b.n	800cf9e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a7f      	ldr	r2, [pc, #508]	; (800cfa8 <HAL_SPI_Init+0x214>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d004      	beq.n	800cdba <HAL_SPI_Init+0x26>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a7d      	ldr	r2, [pc, #500]	; (800cfac <HAL_SPI_Init+0x218>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	e000      	b.n	800cdbc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdba:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a78      	ldr	r2, [pc, #480]	; (800cfa8 <HAL_SPI_Init+0x214>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d004      	beq.n	800cdd6 <HAL_SPI_Init+0x42>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a76      	ldr	r2, [pc, #472]	; (800cfac <HAL_SPI_Init+0x218>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d105      	bne.n	800cde2 <HAL_SPI_Init+0x4e>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	2b0f      	cmp	r3, #15
 800cddc:	d901      	bls.n	800cde2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e0dd      	b.n	800cf9e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f8ec 	bl	800cfc0 <SPI_GetPacketSize>
 800cde8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a6e      	ldr	r2, [pc, #440]	; (800cfa8 <HAL_SPI_Init+0x214>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d004      	beq.n	800cdfe <HAL_SPI_Init+0x6a>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a6c      	ldr	r2, [pc, #432]	; (800cfac <HAL_SPI_Init+0x218>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d102      	bne.n	800ce04 <HAL_SPI_Init+0x70>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b08      	cmp	r3, #8
 800ce02:	d816      	bhi.n	800ce32 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce08:	4a69      	ldr	r2, [pc, #420]	; (800cfb0 <HAL_SPI_Init+0x21c>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d00e      	beq.n	800ce2c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a68      	ldr	r2, [pc, #416]	; (800cfb4 <HAL_SPI_Init+0x220>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d009      	beq.n	800ce2c <HAL_SPI_Init+0x98>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a66      	ldr	r2, [pc, #408]	; (800cfb8 <HAL_SPI_Init+0x224>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d004      	beq.n	800ce2c <HAL_SPI_Init+0x98>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a65      	ldr	r2, [pc, #404]	; (800cfbc <HAL_SPI_Init+0x228>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d104      	bne.n	800ce36 <HAL_SPI_Init+0xa2>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b10      	cmp	r3, #16
 800ce30:	d901      	bls.n	800ce36 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e0b3      	b.n	800cf9e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7f6 fa2e 	bl	80032ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2202      	movs	r2, #2
 800ce54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0201 	bic.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ce72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce7c:	d119      	bne.n	800ceb2 <HAL_SPI_Init+0x11e>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce86:	d103      	bne.n	800ce90 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d008      	beq.n	800cea2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10c      	bne.n	800ceb2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cea0:	d107      	bne.n	800ceb2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ceb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00f      	beq.n	800cede <HAL_SPI_Init+0x14a>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	2b06      	cmp	r3, #6
 800cec4:	d90b      	bls.n	800cede <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	e007      	b.n	800ceee <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	69da      	ldr	r2, [r3, #28]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef6:	431a      	orrs	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf00:	ea42 0103 	orr.w	r1, r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	431a      	orrs	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf42:	431a      	orrs	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf54:	431a      	orrs	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf5a:	ea42 0103 	orr.w	r1, r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	430a      	orrs	r2, r1
 800cf68:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	46002000 	.word	0x46002000
 800cfac:	56002000 	.word	0x56002000
 800cfb0:	40013000 	.word	0x40013000
 800cfb4:	50013000 	.word	0x50013000
 800cfb8:	40003800 	.word	0x40003800
 800cfbc:	50003800 	.word	0x50003800

0800cfc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfcc:	095b      	lsrs	r3, r3, #5
 800cfce:	3301      	adds	r3, #1
 800cfd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	3307      	adds	r3, #7
 800cfde:	08db      	lsrs	r3, r3, #3
 800cfe0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3714      	adds	r7, #20
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d12e      	bne.n	800d06a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d016:	2302      	movs	r3, #2
 800d018:	e028      	b.n	800d06c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f022 0201 	bic.w	r2, r2, #1
 800d038:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800d046:	ea42 0103 	orr.w	r1, r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	e000      	b.n	800d06c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
  }
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e049      	b.n	800d11e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 f841 	bl	800d126 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	f000 fa58 	bl	800d56c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d12e:	bf00      	nop
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
	...

0800d13c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d001      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e072      	b.n	800d23a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f042 0201 	orr.w	r2, r2, #1
 800d16a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a35      	ldr	r2, [pc, #212]	; (800d248 <HAL_TIM_Base_Start_IT+0x10c>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d040      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a34      	ldr	r2, [pc, #208]	; (800d24c <HAL_TIM_Base_Start_IT+0x110>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d03b      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d188:	d036      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d192:	d031      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a2d      	ldr	r2, [pc, #180]	; (800d250 <HAL_TIM_Base_Start_IT+0x114>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d02c      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a2c      	ldr	r2, [pc, #176]	; (800d254 <HAL_TIM_Base_Start_IT+0x118>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d027      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a2a      	ldr	r2, [pc, #168]	; (800d258 <HAL_TIM_Base_Start_IT+0x11c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d022      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a29      	ldr	r2, [pc, #164]	; (800d25c <HAL_TIM_Base_Start_IT+0x120>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d01d      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a27      	ldr	r2, [pc, #156]	; (800d260 <HAL_TIM_Base_Start_IT+0x124>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d018      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a26      	ldr	r2, [pc, #152]	; (800d264 <HAL_TIM_Base_Start_IT+0x128>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d013      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a24      	ldr	r2, [pc, #144]	; (800d268 <HAL_TIM_Base_Start_IT+0x12c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d00e      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a23      	ldr	r2, [pc, #140]	; (800d26c <HAL_TIM_Base_Start_IT+0x130>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d009      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a21      	ldr	r2, [pc, #132]	; (800d270 <HAL_TIM_Base_Start_IT+0x134>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d004      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0xbc>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a20      	ldr	r2, [pc, #128]	; (800d274 <HAL_TIM_Base_Start_IT+0x138>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d115      	bne.n	800d224 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689a      	ldr	r2, [r3, #8]
 800d1fe:	4b1e      	ldr	r3, [pc, #120]	; (800d278 <HAL_TIM_Base_Start_IT+0x13c>)
 800d200:	4013      	ands	r3, r2
 800d202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b06      	cmp	r3, #6
 800d208:	d015      	beq.n	800d236 <HAL_TIM_Base_Start_IT+0xfa>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d210:	d011      	beq.n	800d236 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f042 0201 	orr.w	r2, r2, #1
 800d220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d222:	e008      	b.n	800d236 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0201 	orr.w	r2, r2, #1
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	e000      	b.n	800d238 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	40012c00 	.word	0x40012c00
 800d24c:	50012c00 	.word	0x50012c00
 800d250:	40000400 	.word	0x40000400
 800d254:	50000400 	.word	0x50000400
 800d258:	40000800 	.word	0x40000800
 800d25c:	50000800 	.word	0x50000800
 800d260:	40000c00 	.word	0x40000c00
 800d264:	50000c00 	.word	0x50000c00
 800d268:	40013400 	.word	0x40013400
 800d26c:	50013400 	.word	0x50013400
 800d270:	40014000 	.word	0x40014000
 800d274:	50014000 	.word	0x50014000
 800d278:	00010007 	.word	0x00010007

0800d27c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d020      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f003 0302 	and.w	r3, r3, #2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d01b      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f06f 0202 	mvn.w	r2, #2
 800d2b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f931 	bl	800d52e <HAL_TIM_IC_CaptureCallback>
 800d2cc:	e005      	b.n	800d2da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f923 	bl	800d51a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f934 	bl	800d542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0304 	and.w	r3, r3, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d020      	beq.n	800d32c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01b      	beq.n	800d32c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f06f 0204 	mvn.w	r2, #4
 800d2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2202      	movs	r2, #2
 800d302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d003      	beq.n	800d31a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f90b 	bl	800d52e <HAL_TIM_IC_CaptureCallback>
 800d318:	e005      	b.n	800d326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f8fd 	bl	800d51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f90e 	bl	800d542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f003 0308 	and.w	r3, r3, #8
 800d332:	2b00      	cmp	r3, #0
 800d334:	d020      	beq.n	800d378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01b      	beq.n	800d378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f06f 0208 	mvn.w	r2, #8
 800d348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2204      	movs	r2, #4
 800d34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	69db      	ldr	r3, [r3, #28]
 800d356:	f003 0303 	and.w	r3, r3, #3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f8e5 	bl	800d52e <HAL_TIM_IC_CaptureCallback>
 800d364:	e005      	b.n	800d372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f8d7 	bl	800d51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f8e8 	bl	800d542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0310 	and.w	r3, r3, #16
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d020      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f003 0310 	and.w	r3, r3, #16
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d01b      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f06f 0210 	mvn.w	r2, #16
 800d394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2208      	movs	r2, #8
 800d39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f8bf 	bl	800d52e <HAL_TIM_IC_CaptureCallback>
 800d3b0:	e005      	b.n	800d3be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f8b1 	bl	800d51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f8c2 	bl	800d542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00c      	beq.n	800d3e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f06f 0201 	mvn.w	r2, #1
 800d3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7f4 ffdc 	bl	80023a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d104      	bne.n	800d3fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00c      	beq.n	800d416 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d402:	2b00      	cmp	r3, #0
 800d404:	d007      	beq.n	800d416 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 f9af 	bl	800d774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00c      	beq.n	800d43a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f9a7 	bl	800d788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00c      	beq.n	800d45e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f87c 	bl	800d556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f003 0320 	and.w	r3, r3, #32
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00c      	beq.n	800d482 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f003 0320 	and.w	r3, r3, #32
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d007      	beq.n	800d482 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f06f 0220 	mvn.w	r2, #32
 800d47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f96f 	bl	800d760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00c      	beq.n	800d4a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d492:	2b00      	cmp	r3, #0
 800d494:	d007      	beq.n	800d4a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f97b 	bl	800d79c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00c      	beq.n	800d4ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d007      	beq.n	800d4ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f973 	bl	800d7b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00c      	beq.n	800d4ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d007      	beq.n	800d4ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f96b 	bl	800d7c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00c      	beq.n	800d512 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d007      	beq.n	800d512 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f963 	bl	800d7d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d522:	bf00      	nop
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d536:	bf00      	nop
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d54a:	bf00      	nop
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d55e:	bf00      	nop
 800d560:	370c      	adds	r7, #12
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
	...

0800d56c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a68      	ldr	r2, [pc, #416]	; (800d720 <TIM_Base_SetConfig+0x1b4>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d02b      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a67      	ldr	r2, [pc, #412]	; (800d724 <TIM_Base_SetConfig+0x1b8>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d027      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d592:	d023      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d59a:	d01f      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a62      	ldr	r2, [pc, #392]	; (800d728 <TIM_Base_SetConfig+0x1bc>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d01b      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a61      	ldr	r2, [pc, #388]	; (800d72c <TIM_Base_SetConfig+0x1c0>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d017      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a60      	ldr	r2, [pc, #384]	; (800d730 <TIM_Base_SetConfig+0x1c4>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d013      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a5f      	ldr	r2, [pc, #380]	; (800d734 <TIM_Base_SetConfig+0x1c8>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d00f      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a5e      	ldr	r2, [pc, #376]	; (800d738 <TIM_Base_SetConfig+0x1cc>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d00b      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a5d      	ldr	r2, [pc, #372]	; (800d73c <TIM_Base_SetConfig+0x1d0>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d007      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a5c      	ldr	r2, [pc, #368]	; (800d740 <TIM_Base_SetConfig+0x1d4>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d003      	beq.n	800d5dc <TIM_Base_SetConfig+0x70>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a5b      	ldr	r2, [pc, #364]	; (800d744 <TIM_Base_SetConfig+0x1d8>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d108      	bne.n	800d5ee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a4b      	ldr	r2, [pc, #300]	; (800d720 <TIM_Base_SetConfig+0x1b4>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d043      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a4a      	ldr	r2, [pc, #296]	; (800d724 <TIM_Base_SetConfig+0x1b8>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d03f      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d604:	d03b      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d60c:	d037      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a45      	ldr	r2, [pc, #276]	; (800d728 <TIM_Base_SetConfig+0x1bc>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d033      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a44      	ldr	r2, [pc, #272]	; (800d72c <TIM_Base_SetConfig+0x1c0>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d02f      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a43      	ldr	r2, [pc, #268]	; (800d730 <TIM_Base_SetConfig+0x1c4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d02b      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a42      	ldr	r2, [pc, #264]	; (800d734 <TIM_Base_SetConfig+0x1c8>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d027      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a41      	ldr	r2, [pc, #260]	; (800d738 <TIM_Base_SetConfig+0x1cc>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d023      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a40      	ldr	r2, [pc, #256]	; (800d73c <TIM_Base_SetConfig+0x1d0>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d01f      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a3f      	ldr	r2, [pc, #252]	; (800d740 <TIM_Base_SetConfig+0x1d4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d01b      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a3e      	ldr	r2, [pc, #248]	; (800d744 <TIM_Base_SetConfig+0x1d8>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d017      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a3d      	ldr	r2, [pc, #244]	; (800d748 <TIM_Base_SetConfig+0x1dc>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d013      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a3c      	ldr	r2, [pc, #240]	; (800d74c <TIM_Base_SetConfig+0x1e0>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d00f      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a3b      	ldr	r2, [pc, #236]	; (800d750 <TIM_Base_SetConfig+0x1e4>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d00b      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a3a      	ldr	r2, [pc, #232]	; (800d754 <TIM_Base_SetConfig+0x1e8>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d007      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a39      	ldr	r2, [pc, #228]	; (800d758 <TIM_Base_SetConfig+0x1ec>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d003      	beq.n	800d67e <TIM_Base_SetConfig+0x112>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a38      	ldr	r2, [pc, #224]	; (800d75c <TIM_Base_SetConfig+0x1f0>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d108      	bne.n	800d690 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	4313      	orrs	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a1a      	ldr	r2, [pc, #104]	; (800d720 <TIM_Base_SetConfig+0x1b4>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d023      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a19      	ldr	r2, [pc, #100]	; (800d724 <TIM_Base_SetConfig+0x1b8>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d01f      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a1e      	ldr	r2, [pc, #120]	; (800d740 <TIM_Base_SetConfig+0x1d4>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d01b      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a1d      	ldr	r2, [pc, #116]	; (800d744 <TIM_Base_SetConfig+0x1d8>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d017      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a1c      	ldr	r2, [pc, #112]	; (800d748 <TIM_Base_SetConfig+0x1dc>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d013      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a1b      	ldr	r2, [pc, #108]	; (800d74c <TIM_Base_SetConfig+0x1e0>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d00f      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a1a      	ldr	r2, [pc, #104]	; (800d750 <TIM_Base_SetConfig+0x1e4>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d00b      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a19      	ldr	r2, [pc, #100]	; (800d754 <TIM_Base_SetConfig+0x1e8>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d007      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a18      	ldr	r2, [pc, #96]	; (800d758 <TIM_Base_SetConfig+0x1ec>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d003      	beq.n	800d704 <TIM_Base_SetConfig+0x198>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a17      	ldr	r2, [pc, #92]	; (800d75c <TIM_Base_SetConfig+0x1f0>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d103      	bne.n	800d70c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	691a      	ldr	r2, [r3, #16]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	615a      	str	r2, [r3, #20]
}
 800d712:	bf00      	nop
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	40012c00 	.word	0x40012c00
 800d724:	50012c00 	.word	0x50012c00
 800d728:	40000400 	.word	0x40000400
 800d72c:	50000400 	.word	0x50000400
 800d730:	40000800 	.word	0x40000800
 800d734:	50000800 	.word	0x50000800
 800d738:	40000c00 	.word	0x40000c00
 800d73c:	50000c00 	.word	0x50000c00
 800d740:	40013400 	.word	0x40013400
 800d744:	50013400 	.word	0x50013400
 800d748:	40014000 	.word	0x40014000
 800d74c:	50014000 	.word	0x50014000
 800d750:	40014400 	.word	0x40014400
 800d754:	50014400 	.word	0x50014400
 800d758:	40014800 	.word	0x40014800
 800d75c:	50014800 	.word	0x50014800

0800d760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d768:	bf00      	nop
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e042      	b.n	800d884 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7f5 f9b9 	bl	8002b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2224      	movs	r2, #36	; 0x24
 800d81a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f022 0201 	bic.w	r2, r2, #1
 800d82c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f9d6 	bl	800dbe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f825 	bl	800d88c <UART_SetConfig>
 800d842:	4603      	mov	r3, r0
 800d844:	2b01      	cmp	r3, #1
 800d846:	d101      	bne.n	800d84c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e01b      	b.n	800d884 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d85a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	689a      	ldr	r2, [r3, #8]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d86a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 0201 	orr.w	r2, r2, #1
 800d87a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fa55 	bl	800dd2c <UART_CheckIdleState>
 800d882:	4603      	mov	r3, r0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d890:	b094      	sub	sp, #80	; 0x50
 800d892:	af00      	add	r7, sp, #0
 800d894:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b83      	ldr	r3, [pc, #524]	; (800dab0 <UART_SetConfig+0x224>)
 800d8a2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	497c      	ldr	r1, [pc, #496]	; (800dab4 <UART_SetConfig+0x228>)
 800d8c4:	4019      	ands	r1, r3
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8cc:	430b      	orrs	r3, r1
 800d8ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	68d9      	ldr	r1, [r3, #12]
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	ea40 0301 	orr.w	r3, r0, r1
 800d8e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	4b6f      	ldr	r3, [pc, #444]	; (800dab0 <UART_SetConfig+0x224>)
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d009      	beq.n	800d90c <UART_SetConfig+0x80>
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	4b6e      	ldr	r3, [pc, #440]	; (800dab8 <UART_SetConfig+0x22c>)
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d004      	beq.n	800d90c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	6a1a      	ldr	r2, [r3, #32]
 800d906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d908:	4313      	orrs	r3, r2
 800d90a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d916:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d920:	430b      	orrs	r3, r1
 800d922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	f023 000f 	bic.w	r0, r3, #15
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	ea40 0301 	orr.w	r3, r0, r1
 800d93a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b5e      	ldr	r3, [pc, #376]	; (800dabc <UART_SetConfig+0x230>)
 800d942:	429a      	cmp	r2, r3
 800d944:	d102      	bne.n	800d94c <UART_SetConfig+0xc0>
 800d946:	2301      	movs	r3, #1
 800d948:	64bb      	str	r3, [r7, #72]	; 0x48
 800d94a:	e032      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	4b5b      	ldr	r3, [pc, #364]	; (800dac0 <UART_SetConfig+0x234>)
 800d952:	429a      	cmp	r2, r3
 800d954:	d102      	bne.n	800d95c <UART_SetConfig+0xd0>
 800d956:	2302      	movs	r3, #2
 800d958:	64bb      	str	r3, [r7, #72]	; 0x48
 800d95a:	e02a      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	4b58      	ldr	r3, [pc, #352]	; (800dac4 <UART_SetConfig+0x238>)
 800d962:	429a      	cmp	r2, r3
 800d964:	d102      	bne.n	800d96c <UART_SetConfig+0xe0>
 800d966:	2304      	movs	r3, #4
 800d968:	64bb      	str	r3, [r7, #72]	; 0x48
 800d96a:	e022      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	4b55      	ldr	r3, [pc, #340]	; (800dac8 <UART_SetConfig+0x23c>)
 800d972:	429a      	cmp	r2, r3
 800d974:	d102      	bne.n	800d97c <UART_SetConfig+0xf0>
 800d976:	2308      	movs	r3, #8
 800d978:	64bb      	str	r3, [r7, #72]	; 0x48
 800d97a:	e01a      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	4b52      	ldr	r3, [pc, #328]	; (800dacc <UART_SetConfig+0x240>)
 800d982:	429a      	cmp	r2, r3
 800d984:	d102      	bne.n	800d98c <UART_SetConfig+0x100>
 800d986:	2310      	movs	r3, #16
 800d988:	64bb      	str	r3, [r7, #72]	; 0x48
 800d98a:	e012      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	4b4f      	ldr	r3, [pc, #316]	; (800dad0 <UART_SetConfig+0x244>)
 800d992:	429a      	cmp	r2, r3
 800d994:	d103      	bne.n	800d99e <UART_SetConfig+0x112>
 800d996:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d99a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d99c:	e009      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	4b43      	ldr	r3, [pc, #268]	; (800dab0 <UART_SetConfig+0x224>)
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d102      	bne.n	800d9ae <UART_SetConfig+0x122>
 800d9a8:	2320      	movs	r3, #32
 800d9aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9ac:	e001      	b.n	800d9b2 <UART_SetConfig+0x126>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4b3e      	ldr	r3, [pc, #248]	; (800dab0 <UART_SetConfig+0x224>)
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d005      	beq.n	800d9c8 <UART_SetConfig+0x13c>
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	4b3d      	ldr	r3, [pc, #244]	; (800dab8 <UART_SetConfig+0x22c>)
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	f040 8088 	bne.w	800dad8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	623b      	str	r3, [r7, #32]
 800d9ce:	627a      	str	r2, [r7, #36]	; 0x24
 800d9d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9d4:	f7fd fa78 	bl	800aec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9d8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 80eb 	beq.w	800dbb8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	4a3b      	ldr	r2, [pc, #236]	; (800dad4 <UART_SetConfig+0x248>)
 800d9e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da02:	429a      	cmp	r2, r3
 800da04:	d305      	bcc.n	800da12 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da0e:	429a      	cmp	r2, r3
 800da10:	d903      	bls.n	800da1a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800da18:	e048      	b.n	800daac <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1c:	2200      	movs	r2, #0
 800da1e:	61bb      	str	r3, [r7, #24]
 800da20:	61fa      	str	r2, [r7, #28]
 800da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	4a2b      	ldr	r2, [pc, #172]	; (800dad4 <UART_SetConfig+0x248>)
 800da28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	2200      	movs	r2, #0
 800da30:	613b      	str	r3, [r7, #16]
 800da32:	617a      	str	r2, [r7, #20]
 800da34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da3c:	f7f2 ff3e 	bl	80008bc <__aeabi_uldivmod>
 800da40:	4602      	mov	r2, r0
 800da42:	460b      	mov	r3, r1
 800da44:	4610      	mov	r0, r2
 800da46:	4619      	mov	r1, r3
 800da48:	f04f 0200 	mov.w	r2, #0
 800da4c:	f04f 0300 	mov.w	r3, #0
 800da50:	020b      	lsls	r3, r1, #8
 800da52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da56:	0202      	lsls	r2, r0, #8
 800da58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da5a:	6849      	ldr	r1, [r1, #4]
 800da5c:	0849      	lsrs	r1, r1, #1
 800da5e:	2000      	movs	r0, #0
 800da60:	460c      	mov	r4, r1
 800da62:	4605      	mov	r5, r0
 800da64:	eb12 0804 	adds.w	r8, r2, r4
 800da68:	eb43 0905 	adc.w	r9, r3, r5
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	60bb      	str	r3, [r7, #8]
 800da74:	60fa      	str	r2, [r7, #12]
 800da76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da7a:	4640      	mov	r0, r8
 800da7c:	4649      	mov	r1, r9
 800da7e:	f7f2 ff1d 	bl	80008bc <__aeabi_uldivmod>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	4613      	mov	r3, r2
 800da88:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da90:	d308      	bcc.n	800daa4 <UART_SetConfig+0x218>
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da98:	d204      	bcs.n	800daa4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daa0:	60da      	str	r2, [r3, #12]
 800daa2:	e003      	b.n	800daac <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800daaa:	e085      	b.n	800dbb8 <UART_SetConfig+0x32c>
 800daac:	e084      	b.n	800dbb8 <UART_SetConfig+0x32c>
 800daae:	bf00      	nop
 800dab0:	46002400 	.word	0x46002400
 800dab4:	cfff69f3 	.word	0xcfff69f3
 800dab8:	56002400 	.word	0x56002400
 800dabc:	40013800 	.word	0x40013800
 800dac0:	40004400 	.word	0x40004400
 800dac4:	40004800 	.word	0x40004800
 800dac8:	40004c00 	.word	0x40004c00
 800dacc:	40005000 	.word	0x40005000
 800dad0:	40006400 	.word	0x40006400
 800dad4:	0800e3a8 	.word	0x0800e3a8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dae0:	d13c      	bne.n	800db5c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dae4:	2200      	movs	r2, #0
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daee:	f7fd f9eb 	bl	800aec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800daf2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d05e      	beq.n	800dbb8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	4a39      	ldr	r2, [pc, #228]	; (800dbe4 <UART_SetConfig+0x358>)
 800db00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db04:	461a      	mov	r2, r3
 800db06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db08:	fbb3 f3f2 	udiv	r3, r3, r2
 800db0c:	005a      	lsls	r2, r3, #1
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	441a      	add	r2, r3
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db22:	2b0f      	cmp	r3, #15
 800db24:	d916      	bls.n	800db54 <UART_SetConfig+0x2c8>
 800db26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db2c:	d212      	bcs.n	800db54 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db30:	b29b      	uxth	r3, r3
 800db32:	f023 030f 	bic.w	r3, r3, #15
 800db36:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	085b      	lsrs	r3, r3, #1
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f003 0307 	and.w	r3, r3, #7
 800db42:	b29a      	uxth	r2, r3
 800db44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db46:	4313      	orrs	r3, r2
 800db48:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800db4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db50:	60da      	str	r2, [r3, #12]
 800db52:	e031      	b.n	800dbb8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db5a:	e02d      	b.n	800dbb8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db5e:	2200      	movs	r2, #0
 800db60:	469a      	mov	sl, r3
 800db62:	4693      	mov	fp, r2
 800db64:	4650      	mov	r0, sl
 800db66:	4659      	mov	r1, fp
 800db68:	f7fd f9ae 	bl	800aec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800db6c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800db6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db70:	2b00      	cmp	r3, #0
 800db72:	d021      	beq.n	800dbb8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db78:	4a1a      	ldr	r2, [pc, #104]	; (800dbe4 <UART_SetConfig+0x358>)
 800db7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db7e:	461a      	mov	r2, r3
 800db80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db82:	fbb3 f2f2 	udiv	r2, r3, r2
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	085b      	lsrs	r3, r3, #1
 800db8c:	441a      	add	r2, r3
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	fbb2 f3f3 	udiv	r3, r2, r3
 800db96:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9a:	2b0f      	cmp	r3, #15
 800db9c:	d909      	bls.n	800dbb2 <UART_SetConfig+0x326>
 800db9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba4:	d205      	bcs.n	800dbb2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60da      	str	r2, [r3, #12]
 800dbb0:	e002      	b.n	800dbb8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	2200      	movs	r2, #0
 800dbcc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dbd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3750      	adds	r7, #80	; 0x50
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe2:	bf00      	nop
 800dbe4:	0800e3a8 	.word	0x0800e3a8

0800dbe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	f003 0308 	and.w	r3, r3, #8
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00a      	beq.n	800dc56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5a:	f003 0304 	and.w	r3, r3, #4
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7c:	f003 0310 	and.w	r3, r3, #16
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00a      	beq.n	800dc9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	430a      	orrs	r2, r1
 800dc98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9e:	f003 0320 	and.w	r3, r3, #32
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00a      	beq.n	800dcbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01a      	beq.n	800dcfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	430a      	orrs	r2, r1
 800dcdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dce6:	d10a      	bne.n	800dcfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	430a      	orrs	r2, r1
 800dd1e:	605a      	str	r2, [r3, #4]
  }
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b098      	sub	sp, #96	; 0x60
 800dd30:	af02      	add	r7, sp, #8
 800dd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd3c:	f7f5 fcf0 	bl	8003720 <HAL_GetTick>
 800dd40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0308 	and.w	r3, r3, #8
 800dd4c:	2b08      	cmp	r3, #8
 800dd4e:	d12f      	bne.n	800ddb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f88e 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d022      	beq.n	800ddb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	e853 3f00 	ldrex	r3, [r3]
 800dd76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd7e:	653b      	str	r3, [r7, #80]	; 0x50
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd88:	647b      	str	r3, [r7, #68]	; 0x44
 800dd8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd90:	e841 2300 	strex	r3, r2, [r1]
 800dd94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1e6      	bne.n	800dd6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2220      	movs	r2, #32
 800dda0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddac:	2303      	movs	r3, #3
 800ddae:	e063      	b.n	800de78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 0304 	and.w	r3, r3, #4
 800ddba:	2b04      	cmp	r3, #4
 800ddbc:	d149      	bne.n	800de52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f857 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d03c      	beq.n	800de52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	e853 3f00 	ldrex	r3, [r3]
 800dde4:	623b      	str	r3, [r7, #32]
   return(result);
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ddec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf6:	633b      	str	r3, [r7, #48]	; 0x30
 800ddf8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddfe:	e841 2300 	strex	r3, r2, [r1]
 800de02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e6      	bne.n	800ddd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3308      	adds	r3, #8
 800de10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	e853 3f00 	ldrex	r3, [r3]
 800de18:	60fb      	str	r3, [r7, #12]
   return(result);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f023 0301 	bic.w	r3, r3, #1
 800de20:	64bb      	str	r3, [r7, #72]	; 0x48
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3308      	adds	r3, #8
 800de28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de2a:	61fa      	str	r2, [r7, #28]
 800de2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2e:	69b9      	ldr	r1, [r7, #24]
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	e841 2300 	strex	r3, r2, [r1]
 800de36:	617b      	str	r3, [r7, #20]
   return(result);
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1e5      	bne.n	800de0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2220      	movs	r2, #32
 800de42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	e012      	b.n	800de78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2220      	movs	r2, #32
 800de5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3758      	adds	r7, #88	; 0x58
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	4613      	mov	r3, r2
 800de8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de90:	e049      	b.n	800df26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d045      	beq.n	800df26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de9a:	f7f5 fc41 	bl	8003720 <HAL_GetTick>
 800de9e:	4602      	mov	r2, r0
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d302      	bcc.n	800deb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e048      	b.n	800df46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f003 0304 	and.w	r3, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d031      	beq.n	800df26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b08      	cmp	r3, #8
 800dece:	d110      	bne.n	800def2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2208      	movs	r2, #8
 800ded6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 f838 	bl	800df4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2208      	movs	r2, #8
 800dee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	e029      	b.n	800df46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800defc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df00:	d111      	bne.n	800df26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f000 f81e 	bl	800df4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2220      	movs	r2, #32
 800df16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e00f      	b.n	800df46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	69da      	ldr	r2, [r3, #28]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	4013      	ands	r3, r2
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	429a      	cmp	r2, r3
 800df34:	bf0c      	ite	eq
 800df36:	2301      	moveq	r3, #1
 800df38:	2300      	movne	r3, #0
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	461a      	mov	r2, r3
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	429a      	cmp	r2, r3
 800df42:	d0a6      	beq.n	800de92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df4e:	b480      	push	{r7}
 800df50:	b095      	sub	sp, #84	; 0x54
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5e:	e853 3f00 	ldrex	r3, [r3]
 800df62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	461a      	mov	r2, r3
 800df72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df74:	643b      	str	r3, [r7, #64]	; 0x40
 800df76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df7c:	e841 2300 	strex	r3, r2, [r1]
 800df80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1e6      	bne.n	800df56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3308      	adds	r3, #8
 800df8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	e853 3f00 	ldrex	r3, [r3]
 800df96:	61fb      	str	r3, [r7, #28]
   return(result);
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df9e:	f023 0301 	bic.w	r3, r3, #1
 800dfa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfb4:	e841 2300 	strex	r3, r2, [r1]
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1e3      	bne.n	800df88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d118      	bne.n	800dffa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	e853 3f00 	ldrex	r3, [r3]
 800dfd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	f023 0310 	bic.w	r3, r3, #16
 800dfdc:	647b      	str	r3, [r7, #68]	; 0x44
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfe6:	61bb      	str	r3, [r7, #24]
 800dfe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfea:	6979      	ldr	r1, [r7, #20]
 800dfec:	69ba      	ldr	r2, [r7, #24]
 800dfee:	e841 2300 	strex	r3, r2, [r1]
 800dff2:	613b      	str	r3, [r7, #16]
   return(result);
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1e6      	bne.n	800dfc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2220      	movs	r2, #32
 800dffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e00e:	bf00      	nop
 800e010:	3754      	adds	r7, #84	; 0x54
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b085      	sub	sp, #20
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d101      	bne.n	800e030 <HAL_UARTEx_DisableFifoMode+0x16>
 800e02c:	2302      	movs	r3, #2
 800e02e:	e027      	b.n	800e080 <HAL_UARTEx_DisableFifoMode+0x66>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2224      	movs	r2, #36	; 0x24
 800e03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f022 0201 	bic.w	r2, r2, #1
 800e056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e05e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d101      	bne.n	800e0a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	e02d      	b.n	800e100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2224      	movs	r2, #36	; 0x24
 800e0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f022 0201 	bic.w	r2, r2, #1
 800e0ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f84f 	bl	800e184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d101      	bne.n	800e120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e11c:	2302      	movs	r3, #2
 800e11e:	e02d      	b.n	800e17c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2224      	movs	r2, #36	; 0x24
 800e12c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f022 0201 	bic.w	r2, r2, #1
 800e146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	430a      	orrs	r2, r1
 800e15a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f811 	bl	800e184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e190:	2b00      	cmp	r3, #0
 800e192:	d108      	bne.n	800e1a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1a4:	e031      	b.n	800e20a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1a6:	2308      	movs	r3, #8
 800e1a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1aa:	2308      	movs	r3, #8
 800e1ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	0e5b      	lsrs	r3, r3, #25
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 0307 	and.w	r3, r3, #7
 800e1bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	0f5b      	lsrs	r3, r3, #29
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	7b3a      	ldrb	r2, [r7, #12]
 800e1d2:	4911      	ldr	r1, [pc, #68]	; (800e218 <UARTEx_SetNbDataToProcess+0x94>)
 800e1d4:	5c8a      	ldrb	r2, [r1, r2]
 800e1d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1da:	7b3a      	ldrb	r2, [r7, #12]
 800e1dc:	490f      	ldr	r1, [pc, #60]	; (800e21c <UARTEx_SetNbDataToProcess+0x98>)
 800e1de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	7b7a      	ldrb	r2, [r7, #13]
 800e1f0:	4909      	ldr	r1, [pc, #36]	; (800e218 <UARTEx_SetNbDataToProcess+0x94>)
 800e1f2:	5c8a      	ldrb	r2, [r1, r2]
 800e1f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1f8:	7b7a      	ldrb	r2, [r7, #13]
 800e1fa:	4908      	ldr	r1, [pc, #32]	; (800e21c <UARTEx_SetNbDataToProcess+0x98>)
 800e1fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e20a:	bf00      	nop
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	0800e3c0 	.word	0x0800e3c0
 800e21c:	0800e3c8 	.word	0x0800e3c8

0800e220 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f043 0202 	orr.w	r2, r3, #2
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	021b      	lsls	r3, r3, #8
 800e240:	431a      	orrs	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f023 0202 	bic.w	r2, r3, #2
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	601a      	str	r2, [r3, #0]
}
 800e252:	bf00      	nop
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <memset>:
 800e25e:	4402      	add	r2, r0
 800e260:	4603      	mov	r3, r0
 800e262:	4293      	cmp	r3, r2
 800e264:	d100      	bne.n	800e268 <memset+0xa>
 800e266:	4770      	bx	lr
 800e268:	f803 1b01 	strb.w	r1, [r3], #1
 800e26c:	e7f9      	b.n	800e262 <memset+0x4>
	...

0800e270 <__libc_init_array>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	4d0d      	ldr	r5, [pc, #52]	; (800e2a8 <__libc_init_array+0x38>)
 800e274:	2600      	movs	r6, #0
 800e276:	4c0d      	ldr	r4, [pc, #52]	; (800e2ac <__libc_init_array+0x3c>)
 800e278:	1b64      	subs	r4, r4, r5
 800e27a:	10a4      	asrs	r4, r4, #2
 800e27c:	42a6      	cmp	r6, r4
 800e27e:	d109      	bne.n	800e294 <__libc_init_array+0x24>
 800e280:	4d0b      	ldr	r5, [pc, #44]	; (800e2b0 <__libc_init_array+0x40>)
 800e282:	2600      	movs	r6, #0
 800e284:	4c0b      	ldr	r4, [pc, #44]	; (800e2b4 <__libc_init_array+0x44>)
 800e286:	f000 f817 	bl	800e2b8 <_init>
 800e28a:	1b64      	subs	r4, r4, r5
 800e28c:	10a4      	asrs	r4, r4, #2
 800e28e:	42a6      	cmp	r6, r4
 800e290:	d105      	bne.n	800e29e <__libc_init_array+0x2e>
 800e292:	bd70      	pop	{r4, r5, r6, pc}
 800e294:	f855 3b04 	ldr.w	r3, [r5], #4
 800e298:	3601      	adds	r6, #1
 800e29a:	4798      	blx	r3
 800e29c:	e7ee      	b.n	800e27c <__libc_init_array+0xc>
 800e29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2a2:	3601      	adds	r6, #1
 800e2a4:	4798      	blx	r3
 800e2a6:	e7f2      	b.n	800e28e <__libc_init_array+0x1e>
 800e2a8:	0800e3d8 	.word	0x0800e3d8
 800e2ac:	0800e3d8 	.word	0x0800e3d8
 800e2b0:	0800e3d8 	.word	0x0800e3d8
 800e2b4:	0800e3dc 	.word	0x0800e3dc

0800e2b8 <_init>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	bf00      	nop
 800e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2be:	bc08      	pop	{r3}
 800e2c0:	469e      	mov	lr, r3
 800e2c2:	4770      	bx	lr

0800e2c4 <_fini>:
 800e2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c6:	bf00      	nop
 800e2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ca:	bc08      	pop	{r3}
 800e2cc:	469e      	mov	lr, r3
 800e2ce:	4770      	bx	lr
