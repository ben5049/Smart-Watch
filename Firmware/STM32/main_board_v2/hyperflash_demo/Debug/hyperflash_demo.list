
hyperflash_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e05c  08000270  08000270  00001270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800e2cc  0800e2cc  0000f2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3cc  0800e3cc  0000f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3d4  0800e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e3d8  0800e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800e3dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000078c  20000d0c  0800f0e5  00010d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001498  0800f0e5  00011498  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010d09  2**0
                  CONTENTS, READONLY
 10 .debug_info   000314f0  00000000  00000000  00010d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005285  00000000  00000000  0004222f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002888  00000000  00000000  000474b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f93  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000451ed  00000000  00000000  0004bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036045  00000000  00000000  00090ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a27f3  00000000  00000000  000c6f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002696f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1dc  00000000  00000000  0026973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  00274918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	@ (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	20000d0c 	.word	0x20000d0c
 800028c:	00000000 	.word	0x00000000
 8000290:	0800e2b4 	.word	0x0800e2b4

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	@ (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	@ (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	@ (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	20000d10 	.word	0x20000d10
 80002ac:	0800e2b4 	.word	0x0800e2b4

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b97e 	b.w	8000bd0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14d      	bne.n	8000994 <__udivmoddi4+0xa8>
 80008f8:	428a      	cmp	r2, r1
 80008fa:	460f      	mov	r7, r1
 80008fc:	4684      	mov	ip, r0
 80008fe:	4696      	mov	lr, r2
 8000900:	fab2 f382 	clz	r3, r2
 8000904:	d960      	bls.n	80009c8 <__udivmoddi4+0xdc>
 8000906:	b14b      	cbz	r3, 800091c <__udivmoddi4+0x30>
 8000908:	fa02 fe03 	lsl.w	lr, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	fa00 fc03 	lsl.w	ip, r0, r3
 8000916:	fa20 f202 	lsr.w	r2, r0, r2
 800091a:	4317      	orrs	r7, r2
 800091c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000920:	fa1f f48e 	uxth.w	r4, lr
 8000924:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000928:	fbb7 f1f6 	udiv	r1, r7, r6
 800092c:	fb06 7711 	mls	r7, r6, r1, r7
 8000930:	fb01 f004 	mul.w	r0, r1, r4
 8000934:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000938:	4290      	cmp	r0, r2
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x62>
 800093c:	eb1e 0202 	adds.w	r2, lr, r2
 8000940:	f101 37ff 	add.w	r7, r1, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x60>
 8000946:	4290      	cmp	r0, r2
 8000948:	f200 812d 	bhi.w	8000ba6 <__udivmoddi4+0x2ba>
 800094c:	4639      	mov	r1, r7
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	fa1f fc8c 	uxth.w	ip, ip
 8000954:	fbb2 f0f6 	udiv	r0, r2, r6
 8000958:	fb06 2210 	mls	r2, r6, r0, r2
 800095c:	fb00 f404 	mul.w	r4, r0, r4
 8000960:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000964:	4564      	cmp	r4, ip
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x8e>
 8000968:	eb1e 0c0c 	adds.w	ip, lr, ip
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x8c>
 8000972:	4564      	cmp	r4, ip
 8000974:	f200 811a 	bhi.w	8000bac <__udivmoddi4+0x2c0>
 8000978:	4610      	mov	r0, r2
 800097a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800097e:	ebac 0c04 	sub.w	ip, ip, r4
 8000982:	2100      	movs	r1, #0
 8000984:	b125      	cbz	r5, 8000990 <__udivmoddi4+0xa4>
 8000986:	fa2c f303 	lsr.w	r3, ip, r3
 800098a:	2200      	movs	r2, #0
 800098c:	e9c5 3200 	strd	r3, r2, [r5]
 8000990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000994:	428b      	cmp	r3, r1
 8000996:	d905      	bls.n	80009a4 <__udivmoddi4+0xb8>
 8000998:	b10d      	cbz	r5, 800099e <__udivmoddi4+0xb2>
 800099a:	e9c5 0100 	strd	r0, r1, [r5]
 800099e:	2100      	movs	r1, #0
 80009a0:	4608      	mov	r0, r1
 80009a2:	e7f5      	b.n	8000990 <__udivmoddi4+0xa4>
 80009a4:	fab3 f183 	clz	r1, r3
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d14d      	bne.n	8000a48 <__udivmoddi4+0x15c>
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	f0c0 80f2 	bcc.w	8000b96 <__udivmoddi4+0x2aa>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f080 80ef 	bcs.w	8000b96 <__udivmoddi4+0x2aa>
 80009b8:	4606      	mov	r6, r0
 80009ba:	4623      	mov	r3, r4
 80009bc:	4608      	mov	r0, r1
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0e6      	beq.n	8000990 <__udivmoddi4+0xa4>
 80009c2:	e9c5 6300 	strd	r6, r3, [r5]
 80009c6:	e7e3      	b.n	8000990 <__udivmoddi4+0xa4>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 80a2 	bne.w	8000b12 <__udivmoddi4+0x226>
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80009d4:	fa1f f68e 	uxth.w	r6, lr
 80009d8:	2101      	movs	r1, #1
 80009da:	fbb2 f4f7 	udiv	r4, r2, r7
 80009de:	fb07 2014 	mls	r0, r7, r4, r2
 80009e2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80009e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ea:	fb06 f004 	mul.w	r0, r6, r4
 80009ee:	4290      	cmp	r0, r2
 80009f0:	d90f      	bls.n	8000a12 <__udivmoddi4+0x126>
 80009f2:	eb1e 0202 	adds.w	r2, lr, r2
 80009f6:	f104 38ff 	add.w	r8, r4, #4294967295
 80009fa:	bf2c      	ite	cs
 80009fc:	f04f 0901 	movcs.w	r9, #1
 8000a00:	f04f 0900 	movcc.w	r9, #0
 8000a04:	4290      	cmp	r0, r2
 8000a06:	d903      	bls.n	8000a10 <__udivmoddi4+0x124>
 8000a08:	f1b9 0f00 	cmp.w	r9, #0
 8000a0c:	f000 80c8 	beq.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a10:	4644      	mov	r4, r8
 8000a12:	1a12      	subs	r2, r2, r0
 8000a14:	fa1f fc8c 	uxth.w	ip, ip
 8000a18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a20:	fb00 f606 	mul.w	r6, r0, r6
 8000a24:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a28:	4566      	cmp	r6, ip
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x152>
 8000a2c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a34:	d202      	bcs.n	8000a3c <__udivmoddi4+0x150>
 8000a36:	4566      	cmp	r6, ip
 8000a38:	f200 80bb 	bhi.w	8000bb2 <__udivmoddi4+0x2c6>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	ebac 0c06 	sub.w	ip, ip, r6
 8000a42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a46:	e79d      	b.n	8000984 <__udivmoddi4+0x98>
 8000a48:	f1c1 0620 	rsb	r6, r1, #32
 8000a4c:	408b      	lsls	r3, r1
 8000a4e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5a:	40f4      	lsrs	r4, r6
 8000a5c:	408a      	lsls	r2, r1
 8000a5e:	431f      	orrs	r7, r3
 8000a60:	ea4e 030c 	orr.w	r3, lr, ip
 8000a64:	fa00 fe01 	lsl.w	lr, r0, r1
 8000a68:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a78:	fb08 4410 	mls	r4, r8, r0, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb00 f90c 	mul.w	r9, r0, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	d90e      	bls.n	8000aa6 <__udivmoddi4+0x1ba>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a8e:	bf2c      	ite	cs
 8000a90:	f04f 0b01 	movcs.w	fp, #1
 8000a94:	f04f 0b00 	movcc.w	fp, #0
 8000a98:	45a1      	cmp	r9, r4
 8000a9a:	d903      	bls.n	8000aa4 <__udivmoddi4+0x1b8>
 8000a9c:	f1bb 0f00 	cmp.w	fp, #0
 8000aa0:	f000 8093 	beq.w	8000bca <__udivmoddi4+0x2de>
 8000aa4:	4650      	mov	r0, sl
 8000aa6:	eba4 0409 	sub.w	r4, r4, r9
 8000aaa:	fa1f f983 	uxth.w	r9, r3
 8000aae:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ab2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	d906      	bls.n	8000ad0 <__udivmoddi4+0x1e4>
 8000ac2:	193c      	adds	r4, r7, r4
 8000ac4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac8:	d201      	bcs.n	8000ace <__udivmoddi4+0x1e2>
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d87a      	bhi.n	8000bc4 <__udivmoddi4+0x2d8>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	fba0 9802 	umull	r9, r8, r0, r2
 8000adc:	4544      	cmp	r4, r8
 8000ade:	46cc      	mov	ip, r9
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	d302      	bcc.n	8000aea <__udivmoddi4+0x1fe>
 8000ae4:	d106      	bne.n	8000af4 <__udivmoddi4+0x208>
 8000ae6:	45ce      	cmp	lr, r9
 8000ae8:	d204      	bcs.n	8000af4 <__udivmoddi4+0x208>
 8000aea:	3801      	subs	r0, #1
 8000aec:	ebb9 0c02 	subs.w	ip, r9, r2
 8000af0:	eb68 0307 	sbc.w	r3, r8, r7
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x222>
 8000af6:	ebbe 020c 	subs.w	r2, lr, ip
 8000afa:	eb64 0403 	sbc.w	r4, r4, r3
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	fa22 f301 	lsr.w	r3, r2, r1
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	431e      	orrs	r6, r3
 8000b0a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0e:	2100      	movs	r1, #0
 8000b10:	e73e      	b.n	8000990 <__udivmoddi4+0xa4>
 8000b12:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b16:	f1c3 0120 	rsb	r1, r3, #32
 8000b1a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b22:	40cc      	lsrs	r4, r1
 8000b24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b28:	fa20 f101 	lsr.w	r1, r0, r1
 8000b2c:	fa1f f68e 	uxth.w	r6, lr
 8000b30:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b34:	430a      	orrs	r2, r1
 8000b36:	fb07 4410 	mls	r4, r7, r0, r4
 8000b3a:	0c11      	lsrs	r1, r2, #16
 8000b3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b40:	fb00 f406 	mul.w	r4, r0, r6
 8000b44:	428c      	cmp	r4, r1
 8000b46:	d90e      	bls.n	8000b66 <__udivmoddi4+0x27a>
 8000b48:	eb1e 0101 	adds.w	r1, lr, r1
 8000b4c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b50:	bf2c      	ite	cs
 8000b52:	f04f 0901 	movcs.w	r9, #1
 8000b56:	f04f 0900 	movcc.w	r9, #0
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d902      	bls.n	8000b64 <__udivmoddi4+0x278>
 8000b5e:	f1b9 0f00 	cmp.w	r9, #0
 8000b62:	d02c      	beq.n	8000bbe <__udivmoddi4+0x2d2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	1b09      	subs	r1, r1, r4
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4291      	cmp	r1, r2
 8000b7c:	d907      	bls.n	8000b8e <__udivmoddi4+0x2a2>
 8000b7e:	eb1e 0202 	adds.w	r2, lr, r2
 8000b82:	f104 38ff 	add.w	r8, r4, #4294967295
 8000b86:	d201      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d815      	bhi.n	8000bb8 <__udivmoddi4+0x2cc>
 8000b8c:	4644      	mov	r4, r8
 8000b8e:	1a52      	subs	r2, r2, r1
 8000b90:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000b94:	e721      	b.n	80009da <__udivmoddi4+0xee>
 8000b96:	1a86      	subs	r6, r0, r2
 8000b98:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	e70e      	b.n	80009be <__udivmoddi4+0xd2>
 8000ba0:	3c02      	subs	r4, #2
 8000ba2:	4472      	add	r2, lr
 8000ba4:	e735      	b.n	8000a12 <__udivmoddi4+0x126>
 8000ba6:	3902      	subs	r1, #2
 8000ba8:	4472      	add	r2, lr
 8000baa:	e6d0      	b.n	800094e <__udivmoddi4+0x62>
 8000bac:	44f4      	add	ip, lr
 8000bae:	3802      	subs	r0, #2
 8000bb0:	e6e3      	b.n	800097a <__udivmoddi4+0x8e>
 8000bb2:	44f4      	add	ip, lr
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e742      	b.n	8000a3e <__udivmoddi4+0x152>
 8000bb8:	3c02      	subs	r4, #2
 8000bba:	4472      	add	r2, lr
 8000bbc:	e7e7      	b.n	8000b8e <__udivmoddi4+0x2a2>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4471      	add	r1, lr
 8000bc2:	e7d0      	b.n	8000b66 <__udivmoddi4+0x27a>
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	e782      	b.n	8000ad0 <__udivmoddi4+0x1e4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	443c      	add	r4, r7
 8000bce:	e76a      	b.n	8000aa6 <__udivmoddi4+0x1ba>

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <ADP5360_Init>:
 */

#include "ADP5360.h"


ADP5360_StatusTypeDef ADP5360_Init(ADP5360_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	601a      	str	r2, [r3, #0]

	/* Set default values, can be changed with functions if needed */
	dev->originalBatteryCapacity = ADP5360_DEFAULT_BATTERY_CAPACITY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bee:	811a      	strh	r2, [r3, #8]
	dev->batterySOCACMOverflows = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	729a      	strb	r2, [r3, #10]
	dev->buckVoltage = ADP5360_DEFAULT_BUCK_VOLTAGE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000bfc:	821a      	strh	r2, [r3, #16]
	dev->buckBoostVoltage = ADP5360_DEFAULT_BUCK_BOOST_VOLTAGE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c04:	825a      	strh	r2, [r3, #18]
	dev->chargingEnabled = false;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
	dev->buckEnabled = true;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	751a      	strb	r2, [r3, #20]
	dev->buckBoostEnabled = false;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	755a      	strb	r2, [r3, #21]


	/* Check the manufacturer and model IDs */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_MANUFACTURER_AND_MODEL_ID, &regData);
 8000c18:	f107 030e 	add.w	r3, r7, #14
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f9f7 	bl	8001014 <ADP5360_ReadRegister>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <ADP5360_Init+0x60>
		return status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	e04b      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	if (regData != ((ADP5360_MANUFACTURER_ID << 4) | (ADP5360_MODEL_ID))){
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d003      	beq.n	8000c42 <ADP5360_Init+0x6e>
		status = ADP5360_ERROR_WRONG_ID;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	73fb      	strb	r3, [r7, #15]
		return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	e044      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Turn off the buck boost converter */
	status = ADP5360_DisableBuckBoost(dev);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f98d 	bl	8000f62 <ADP5360_DisableBuckBoost>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <ADP5360_Init+0x82>
		return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	e03a      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Write the battery capacity */
	status = ADP5360_SetBatteryCapacity(dev, dev->originalBatteryCapacity);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	891b      	ldrh	r3, [r3, #8]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f90f 	bl	8000e80 <ADP5360_SetBatteryCapacity>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <ADP5360_Init+0x9c>
		return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	e02d      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Enable interrupts */
	status = ADP5360_EnableInterrupts(dev);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f9a5 	bl	8000fc0 <ADP5360_EnableInterrupts>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <ADP5360_Init+0xb0>
		return status;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	e023      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Set charging on/off */
	status = ADP5360_UpdateCharging(dev);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f883 	bl	8000d90 <ADP5360_UpdateCharging>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <ADP5360_Init+0xc4>
		return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	e019      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the battery charge */
	status = ADP5360_GetBatteryCharge(dev);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f943 	bl	8000f24 <ADP5360_GetBatteryCharge>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <ADP5360_Init+0xd8>
		return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	e00f      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the charging status/mode */
	status = ADP5360_GetChargingStatus(dev);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f8a9 	bl	8000e04 <ADP5360_GetChargingStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <ADP5360_Init+0xec>
		return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	e005      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the battery charger status/mode */
	status = ADP5360_GetBatteryChargerStatus(dev);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f8be 	bl	8000e42 <ADP5360_GetBatteryChargerStatus>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]

	return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ADP5360_EnableCharging>:

ADP5360_StatusTypeDef ADP5360_EnableCharging(ADP5360_HandleTypeDef *dev){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000ce0:	f107 030e 	add.w	r3, r7, #14
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2107      	movs	r1, #7
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f993 	bl	8001014 <ADP5360_ReadRegister>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <ADP5360_EnableCharging+0x28>
		return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	e016      	b.n	8000d2a <ADP5360_EnableCharging+0x56>
	}

	/* Set the "EN_LDO" and "EN_CHG" bits high */
	regData = regData | ADP5360_BIT_EN_LDO | ADP5360_BIT_EN_CHG;
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	f043 0309 	orr.w	r3, r3, #9
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d06:	f107 030e 	add.w	r3, r7, #14
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f99b 	bl	800104a <ADP5360_WriteRegister>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <ADP5360_EnableCharging+0x4e>
		return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	e003      	b.n	8000d2a <ADP5360_EnableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = true;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	711a      	strb	r2, [r3, #4]

	return status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ADP5360_DisableCharging>:


ADP5360_StatusTypeDef ADP5360_DisableCharging(ADP5360_HandleTypeDef *dev){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d3e:	f107 030e 	add.w	r3, r7, #14
 8000d42:	461a      	mov	r2, r3
 8000d44:	2107      	movs	r1, #7
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f964 	bl	8001014 <ADP5360_ReadRegister>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <ADP5360_DisableCharging+0x28>
		return status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	e016      	b.n	8000d88 <ADP5360_DisableCharging+0x56>
	}

	/* Set the "EN_CHG" bit low */
	regData &= ~ADP5360_BIT_EN_CHG;
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d64:	f107 030e 	add.w	r3, r7, #14
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f96c 	bl	800104a <ADP5360_WriteRegister>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <ADP5360_DisableCharging+0x4e>
		return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	e003      	b.n	8000d88 <ADP5360_DisableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = false;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	711a      	strb	r2, [r3, #4]

	return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <ADP5360_UpdateCharging>:

ADP5360_StatusTypeDef ADP5360_UpdateCharging(ADP5360_HandleTypeDef *dev){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_PGOOD_STATUS" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_PGOOD_STATUS, &regData);
 8000d9c:	f107 030e 	add.w	r3, r7, #14
 8000da0:	461a      	mov	r2, r3
 8000da2:	212f      	movs	r1, #47	@ 0x2f
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f935 	bl	8001014 <ADP5360_ReadRegister>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <ADP5360_UpdateCharging+0x28>
		return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	e021      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
	}

	/* If VBUS present, enable charging */
	if (regData & ADP5360_BIT_VBUSOK){
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00d      	beq.n	8000dde <ADP5360_UpdateCharging+0x4e>
		if (dev->chargingEnabled == false){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d117      	bne.n	8000dfa <ADP5360_UpdateCharging+0x6a>
			status = ADP5360_EnableCharging(dev);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff82 	bl	8000cd4 <ADP5360_EnableCharging>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00f      	beq.n	8000dfa <ADP5360_UpdateCharging+0x6a>
				return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
			}
		}
	}
	/* If VBUS absent, disable charging */
	else{
		if (dev->chargingEnabled == true){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d109      	bne.n	8000dfa <ADP5360_UpdateCharging+0x6a>
			status = ADP5360_DisableCharging(dev);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa3 	bl	8000d32 <ADP5360_DisableCharging>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <ADP5360_UpdateCharging+0x6a>
				return status;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	e000      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
			}
		}
	}

	return status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ADP5360_GetChargingStatus>:

ADP5360_StatusTypeDef ADP5360_GetChargingStatus(ADP5360_HandleTypeDef *dev){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS1" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS1, &regData);
 8000e10:	f107 030e 	add.w	r3, r7, #14
 8000e14:	461a      	mov	r2, r3
 8000e16:	2108      	movs	r1, #8
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f8fb 	bl	8001014 <ADP5360_ReadRegister>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <ADP5360_GetChargingStatus+0x28>
		return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	e006      	b.n	8000e3a <ADP5360_GetChargingStatus+0x36>
	}

	/* Extract the "CHARGE_STATUS" bits and update the device struct */
	dev->chargeStatus = regData & ADP5360_BITS_CHARGER_STATUS;
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	715a      	strb	r2, [r3, #5]

	return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <ADP5360_GetBatteryChargerStatus>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_GetBatteryChargerStatus(ADP5360_HandleTypeDef *dev){
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS2" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS2, &regData);
 8000e4e:	f107 030e 	add.w	r3, r7, #14
 8000e52:	461a      	mov	r2, r3
 8000e54:	2109      	movs	r1, #9
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f8dc 	bl	8001014 <ADP5360_ReadRegister>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <ADP5360_GetBatteryChargerStatus+0x28>
		return status;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	e006      	b.n	8000e78 <ADP5360_GetBatteryChargerStatus+0x36>
	}

	/* Extract the "BAT_CHG_STATUS" bits and update the device struct */
	dev->batteryChargerStatus = regData & ADP5360_BITS_BAT_CHG_STATUS;
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	719a      	strb	r2, [r3, #6]

	return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <ADP5360_SetBatteryCapacity>:


ADP5360_StatusTypeDef ADP5360_SetBatteryCapacity(ADP5360_HandleTypeDef *dev, uint16_t originalBatteryCapacity){
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

	/* Update the device struct */
	dev->originalBatteryCapacity = originalBatteryCapacity;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	811a      	strh	r2, [r3, #8]
	dev->effectiveBatteryCapacity = (dev->originalBatteryCapacity * (1.0 - (ADP5360_BATTERY_DEGRADATION_PER_OVERFLOW * dev->batterySOCACMOverflows)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fc84 	bl	80007a8 <__aeabi_i2d>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460d      	mov	r5, r1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fc7d 	bl	80007a8 <__aeabi_i2d>
 8000eae:	a31b      	add	r3, pc, #108	@ (adr r3, 8000f1c <ADP5360_SetBatteryCapacity+0x9c>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff f9fc 	bl	80002b0 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	f04f 0000 	mov.w	r0, #0
 8000ec0:	4915      	ldr	r1, [pc, #84]	@ (8000f18 <ADP5360_SetBatteryCapacity+0x98>)
 8000ec2:	f7ff fb23 	bl	800050c <__aeabi_dsub>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f7ff f9ef 	bl	80002b0 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fccf 	bl	800087c <__aeabi_d2uiz>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	819a      	strh	r2, [r3, #12]

	/* Convert  BAT_CAP (p. 46) */
	uint8_t regData = dev->effectiveBatteryCapacity / 2;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	899b      	ldrh	r3, [r3, #12]
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BAT_CAP" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BAT_CAP, &regData);
 8000ef2:	f107 030e 	add.w	r3, r7, #14
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2120      	movs	r1, #32
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f8a5 	bl	800104a <ADP5360_WriteRegister>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <ADP5360_SetBatteryCapacity+0x8e>
		return status;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	e000      	b.n	8000f10 <ADP5360_SetBatteryCapacity+0x90>
	}

	return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	eb851eb8 	.word	0xeb851eb8
 8000f20:	3f8eb851 	.word	0x3f8eb851

08000f24 <ADP5360_GetBatteryCharge>:

	return status;

}

ADP5360_StatusTypeDef ADP5360_GetBatteryCharge(ADP5360_HandleTypeDef *dev){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BAT_SOC" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BAT_SOC, &regData);
 8000f30:	f107 030e 	add.w	r3, r7, #14
 8000f34:	461a      	mov	r2, r3
 8000f36:	2121      	movs	r1, #33	@ 0x21
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f86b 	bl	8001014 <ADP5360_ReadRegister>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <ADP5360_GetBatteryCharge+0x28>
		return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	e006      	b.n	8000f5a <ADP5360_GetBatteryCharge+0x36>
	}

	/* Extract "BAT_SOC" bits and update the device struct */
	dev->batteryChargePercentage = regData & ADP5360_BITS_BAT_SOC;
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	71da      	strb	r2, [r3, #7]

	return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ADP5360_DisableBuckBoost>:
	dev->buckBoostEnabled = true;

	return status;
}

ADP5360_StatusTypeDef ADP5360_DisableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f6e:	f107 030e 	add.w	r3, r7, #14
 8000f72:	461a      	mov	r2, r3
 8000f74:	212b      	movs	r1, #43	@ 0x2b
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f84c 	bl	8001014 <ADP5360_ReadRegister>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <ADP5360_DisableBuckBoost+0x28>
		return status;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	e016      	b.n	8000fb8 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit low */
	regData &= ~ADP5360_BIT_EN_BUCKBST;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	461a      	mov	r2, r3
 8000f9a:	212b      	movs	r1, #43	@ 0x2b
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f854 	bl	800104a <ADP5360_WriteRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <ADP5360_DisableBuckBoost+0x4e>
		return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e003      	b.n	8000fb8 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = false;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	755a      	strb	r2, [r3, #21]

	return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <ADP5360_EnableInterrupts>:

ADP5360_StatusTypeDef ADP5360_EnableInterrupts(ADP5360_HandleTypeDef *dev){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73bb      	strb	r3, [r7, #14]

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE1" */
	regData = ADP5360_VBUS_INT | ADP5360_CHG_INT | ADP5360_BAT_INT | ADP5360_THR_INT | ADP5360_BATPRO_INT | ADP5360_ADPICHG_INT | ADP5360_SOCACM_INT | ADP5360_SOCLOW_INT;
 8000fd0:	23c7      	movs	r3, #199	@ 0xc7
 8000fd2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE1" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE1, &regData);
 8000fd4:	f107 030e 	add.w	r3, r7, #14
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2132      	movs	r1, #50	@ 0x32
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f834 	bl	800104a <ADP5360_WriteRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <ADP5360_EnableInterrupts+0x30>
		return status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	e00d      	b.n	800100c <ADP5360_EnableInterrupts+0x4c>
	}

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE2" */
	regData = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]
	regData = ADP5360_BUCKBSTPG_INT | ADP5360_BUCKPG_INT | ADP5360_WD_INT | ADP5360_MR_INT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE2" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE2, &regData);
 8000ff8:	f107 030e 	add.w	r3, r7, #14
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2133      	movs	r1, #51	@ 0x33
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f822 	bl	800104a <ADP5360_WriteRegister>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]

	return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <ADP5360_ReadRegister>:
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);

	return status;
}

ADP5360_StatusTypeDef ADP5360_ReadRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	460b      	mov	r3, r1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b29a      	uxth	r2, r3
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	218c      	movs	r1, #140	@ 0x8c
 800103c:	f004 fc5e 	bl	80058fc <HAL_I2C_Mem_Read>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <ADP5360_WriteRegister>:

ADP5360_StatusTypeDef ADP5360_WriteRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 800104a:	b580      	push	{r7, lr}
 800104c:	b088      	sub	sp, #32
 800104e:	af04      	add	r7, sp, #16
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	460b      	mov	r3, r1
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	218c      	movs	r1, #140	@ 0x8c
 8001072:	f004 fb2f 	bl	80056d4 <HAL_I2C_Mem_Write>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f002 fb06 	bl	8003694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f836 	bl	80010f8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800108c:	f000 f89e 	bl	80011cc <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 ff06 	bl	8001ea0 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 8001094:	f000 f918 	bl	80012c8 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 8001098:	f000 f92c 	bl	80012f4 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 800109c:	f000 fbde 	bl	800185c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80010a0:	f000 fc0e 	bl	80018c0 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80010a4:	f000 fd74 	bl	8001b90 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80010a8:	f000 f8ec 	bl	8001284 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010ac:	f000 f938 	bl	8001320 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80010b0:	f000 f974 	bl	800139c <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80010b4:	f000 fa6e 	bl	8001594 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80010b8:	f000 fabc 	bl	8001634 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80010bc:	f000 fce4 	bl	8001a88 <MX_LTDC_Init>
  MX_RTC_Init();
 80010c0:	f000 fdfe 	bl	8001cc0 <MX_RTC_Init>
  MX_ADF1_Init();
 80010c4:	f000 f890 	bl	80011e8 <MX_ADF1_Init>
  MX_I2C1_Init();
 80010c8:	f000 fac8 	bl	800165c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010cc:	f000 fb06 	bl	80016dc <MX_I2C2_Init>
  MX_I2C4_Init();
 80010d0:	f000 fb44 	bl	800175c <MX_I2C4_Init>
  MX_I2C6_Init();
 80010d4:	f000 fb82 	bl	80017dc <MX_I2C6_Init>
  MX_USART1_UART_Init();
 80010d8:	f000 fc3e 	bl	8001958 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80010dc:	f000 fc88 	bl	80019f0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80010e0:	f000 fe70 	bl	8001dc4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADP5360_Init(&hadp5360, &hi2c2);
 80010e4:	4902      	ldr	r1, [pc, #8]	@ (80010f0 <main+0x70>)
 80010e6:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <main+0x74>)
 80010e8:	f7ff fd74 	bl	8000bd4 <ADP5360_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <main+0x6c>
 80010f0:	20000f90 	.word	0x20000f90
 80010f4:	2000140c 	.word	0x2000140c

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09e      	sub	sp, #120	@ 0x78
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	2260      	movs	r2, #96	@ 0x60
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f00d f8a7 	bl	800e25a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800111c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001120:	f006 ff8e 	bl	8008040 <HAL_PWREx_ControlVoltageScaling>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800112a:	f001 f943 	bl	80023b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800112e:	f006 ff77 	bl	8008020 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <SystemClock_Config+0xd0>)
 8001134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001138:	4a23      	ldr	r2, [pc, #140]	@ (80011c8 <SystemClock_Config+0xd0>)
 800113a:	f023 0318 	bic.w	r3, r3, #24
 800113e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001142:	2305      	movs	r3, #5
 8001144:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001146:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800114c:	2381      	movs	r3, #129	@ 0x81
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001154:	2303      	movs	r3, #3
 8001156:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001160:	230a      	movs	r3, #10
 8001162:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001170:	230c      	movs	r3, #12
 8001172:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f007 f84b 	bl	8008218 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f001 f914 	bl	80023b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	231f      	movs	r3, #31
 800118e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2303      	movs	r3, #3
 8001192:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 ff11 	bl	8008fd0 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b4:	f001 f8fe 	bl	80023b4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011b8:	f008 fa8c 	bl	80096d4 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80011bc:	f00b fa08 	bl	800c5d0 <HAL_RCCEx_EnableLSECSS>
}
 80011c0:	bf00      	nop
 80011c2:	3778      	adds	r7, #120	@ 0x78
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	46020c00 	.word	0x46020c00

080011cc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80011d0:	f007 f812 	bl	80081f8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80011d4:	2002      	movs	r0, #2
 80011d6:	f006 ffbf 	bl	8008158 <HAL_PWREx_ConfigSupply>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80011e0:	f001 f8e8 	bl	80023b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_ADF1_Init+0x90>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_ADF1_Init+0x94>)
 80011f0:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_ADF1_Init+0x90>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_ADF1_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_ADF1_Init+0x90>)
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_ADF1_Init+0x90>)
 8001208:	2210      	movs	r2, #16
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_ADF1_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_ADF1_Init+0x90>)
 8001214:	2204      	movs	r2, #4
 8001216:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_ADF1_Init+0x90>)
 800121a:	2201      	movs	r2, #1
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800121e:	4816      	ldr	r0, [pc, #88]	@ (8001278 <MX_ADF1_Init+0x90>)
 8001220:	f005 fbd0 	bl	80069c4 <HAL_MDF_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800122a:	f001 f8c3 	bl	80023b4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_ADF1_Init+0x98>)
 800123c:	2240      	movs	r2, #64	@ 0x40
 800123e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001242:	2202      	movs	r2, #2
 8001244:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_ADF1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_ADF1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <MX_ADF1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <MX_ADF1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000d28 	.word	0x20000d28
 800127c:	46024080 	.word	0x46024080
 8001280:	20000d6c 	.word	0x20000d6c

08001284 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <MX_CRC_Init+0x3c>)
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <MX_CRC_Init+0x40>)
 800128c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_CRC_Init+0x3c>)
 8001290:	2200      	movs	r2, #0
 8001292:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_CRC_Init+0x3c>)
 8001296:	2200      	movs	r2, #0
 8001298:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_CRC_Init+0x3c>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_CRC_Init+0x3c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_CRC_Init+0x3c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_CRC_Init+0x3c>)
 80012ae:	f002 fb43 	bl	8003938 <HAL_CRC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012b8:	f001 f87c 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000de8 	.word	0x20000de8
 80012c4:	40023000 	.word	0x40023000

080012c8 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_DCACHE1_Init+0x24>)
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <MX_DCACHE1_Init+0x28>)
 80012d0:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_DCACHE1_Init+0x24>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_DCACHE1_Init+0x24>)
 80012da:	f002 fc1f 	bl	8003b1c <HAL_DCACHE_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80012e4:	f001 f866 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000e0c 	.word	0x20000e0c
 80012f0:	40031400 	.word	0x40031400

080012f4 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <MX_DCACHE2_Init+0x24>)
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <MX_DCACHE2_Init+0x28>)
 80012fc:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_DCACHE2_Init+0x24>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_DCACHE2_Init+0x24>)
 8001306:	f002 fc09 	bl	8003b1c <HAL_DCACHE_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8001310:	f001 f850 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000e38 	.word	0x20000e38
 800131c:	40031800 	.word	0x40031800

08001320 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <MX_DMA2D_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_DMA2D_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001338:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800133c:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_DMA2D_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <MX_DMA2D_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <MX_DMA2D_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001370:	f002 fd24 	bl	8003dbc <HAL_DMA2D_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800137a:	f001 f81b 	bl	80023b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800137e:	2101      	movs	r1, #1
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <MX_DMA2D_Init+0x74>)
 8001382:	f002 fe8d 	bl	80040a0 <HAL_DMA2D_ConfigLayer>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 800138c:	f001 f812 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000e64 	.word	0x20000e64
 8001398:	4002b000 	.word	0x4002b000

0800139c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ae      	sub	sp, #184	@ 0xb8
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80013a2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80013b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013b8:	2224      	movs	r2, #36	@ 0x24
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f00c ff4c 	bl	800e25a <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80013c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80013d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013d8:	2234      	movs	r2, #52	@ 0x34
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00c ff3c 	bl	800e25a <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	222c      	movs	r2, #44	@ 0x2c
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00c ff36 	bl	800e25a <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80013f0:	4a67      	ldr	r2, [pc, #412]	@ (8001590 <MX_DSIHOST_DSI_Init+0x1f4>)
 80013f2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80013f4:	4b65      	ldr	r3, [pc, #404]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80013fa:	4b64      	ldr	r3, [pc, #400]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001400:	4b62      	ldr	r3, [pc, #392]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8001406:	4b61      	ldr	r3, [pc, #388]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001408:	2208      	movs	r2, #8
 800140a:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 800140c:	4b5f      	ldr	r3, [pc, #380]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8001412:	237d      	movs	r3, #125	@ 0x7d
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001436:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800143a:	4619      	mov	r1, r3
 800143c:	4853      	ldr	r0, [pc, #332]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 800143e:	f002 ffd7 	bl	80043f0 <HAL_DSI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8001448:	f000 ffb4 	bl	80023b4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001480:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001484:	4619      	mov	r1, r3
 8001486:	4841      	ldr	r0, [pc, #260]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001488:	f003 fc62 	bl	8004d50 <HAL_DSI_ConfigHostTimeouts>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8001492:	f000 ff8f 	bl	80023b4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8001496:	230a      	movs	r3, #10
 8001498:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 80014aa:	230a      	movs	r3, #10
 80014ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80014ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014b2:	4619      	mov	r1, r3
 80014b4:	4835      	ldr	r0, [pc, #212]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014b6:	f003 fbb5 	bl	8004c24 <HAL_DSI_ConfigPhyTimer>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80014c0:	f000 ff78 	bl	80023b4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80014c4:	2104      	movs	r1, #4
 80014c6:	4831      	ldr	r0, [pc, #196]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c8:	f003 fb84 	bl	8004bd4 <HAL_DSI_ConfigFlowControl>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80014d2:	f000 ff6f 	bl	80023b4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	482c      	ldr	r0, [pc, #176]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014da:	f003 f85d 	bl	8004598 <HAL_DSI_ConfigErrorMonitor>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 80014e4:	f000 ff66 	bl	80023b4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800151c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001520:	4619      	mov	r1, r3
 8001522:	481a      	ldr	r0, [pc, #104]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001524:	f003 faf8 	bl	8004b18 <HAL_DSI_ConfigCommand>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 800152e:	f000 ff41 	bl	80023b4 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8001532:	2305      	movs	r3, #5
 8001534:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8001536:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800153a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800153c:	2310      	movs	r3, #16
 800153e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001554:	2340      	movs	r3, #64	@ 0x40
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	480a      	ldr	r0, [pc, #40]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001562:	f003 fa02 	bl	800496a <HAL_DSI_ConfigAdaptedCommandMode>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 800156c:	f000 ff22 	bl	80023b4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001570:	2100      	movs	r1, #0
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001574:	f003 f9ce 	bl	8004914 <HAL_DSI_SetGenericVCID>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 800157e:	f000 ff19 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	37b8      	adds	r7, #184	@ 0xb8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000ec4 	.word	0x20000ec4
 8001590:	40016c00 	.word	0x40016c00

08001594 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8001598:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 800159a:	4a24      	ldr	r2, [pc, #144]	@ (800162c <MX_GFXMMU_Init+0x98>)
 800159c:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 80015a4:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ce:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 80015fc:	480a      	ldr	r0, [pc, #40]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 80015fe:	f003 fc6d 	bl	8004edc <HAL_GFXMMU_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8001608:	f000 fed4 	bl	80023b4 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_GFXMMU_Init+0x9c>)
 800160e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001612:	2100      	movs	r1, #0
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_GFXMMU_Init+0x94>)
 8001616:	f003 fce1 	bl	8004fdc <HAL_GFXMMU_ConfigLut>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 fec8 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000ee8 	.word	0x20000ee8
 800162c:	4002c000 	.word	0x4002c000
 8001630:	20000000 	.word	0x20000000

08001634 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_GPU2D_Init+0x20>)
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <MX_GPU2D_Init+0x24>)
 800163c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_GPU2D_Init+0x20>)
 8001640:	f003 ff40 	bl	80054c4 <HAL_GPU2D_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800164a:	f000 feb3 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000f30 	.word	0x20000f30
 8001658:	4002f000 	.word	0x4002f000

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_I2C1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <MX_I2C1_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001674:	2201      	movs	r2, #1
 8001676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_I2C1_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	@ (80016d0 <MX_I2C1_Init+0x74>)
 8001698:	f003 ff80 	bl	800559c <HAL_I2C_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016a2:	f000 fe87 	bl	80023b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4809      	ldr	r0, [pc, #36]	@ (80016d0 <MX_I2C1_Init+0x74>)
 80016aa:	f004 fcf9 	bl	80060a0 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f000 fe7e 	bl	80023b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_I2C1_Init+0x74>)
 80016bc:	f004 fd3b 	bl	8006136 <HAL_I2CEx_ConfigDigitalFilter>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fe75 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000f3c 	.word	0x20000f3c
 80016d4:	40005400 	.word	0x40005400
 80016d8:	30909dec 	.word	0x30909dec

080016dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_I2C2_Init+0x74>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <MX_I2C2_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_I2C2_Init+0x74>)
 80016e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <MX_I2C2_Init+0x7c>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <MX_I2C2_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_I2C2_Init+0x74>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_I2C2_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_I2C2_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <MX_I2C2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_I2C2_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_I2C2_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	@ (8001750 <MX_I2C2_Init+0x74>)
 8001718:	f003 ff40 	bl	800559c <HAL_I2C_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001722:	f000 fe47 	bl	80023b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4809      	ldr	r0, [pc, #36]	@ (8001750 <MX_I2C2_Init+0x74>)
 800172a:	f004 fcb9 	bl	80060a0 <HAL_I2CEx_ConfigAnalogFilter>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001734:	f000 fe3e 	bl	80023b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_I2C2_Init+0x74>)
 800173c:	f004 fcfb 	bl	8006136 <HAL_I2CEx_ConfigDigitalFilter>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001746:	f000 fe35 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000f90 	.word	0x20000f90
 8001754:	40005800 	.word	0x40005800
 8001758:	30909dec 	.word	0x30909dec

0800175c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <MX_I2C4_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001768:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <MX_I2C4_Init+0x7c>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <MX_I2C4_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001774:	2201      	movs	r2, #1
 8001776:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <MX_I2C4_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_I2C4_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001796:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <MX_I2C4_Init+0x74>)
 8001798:	f003 ff00 	bl	800559c <HAL_I2C_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80017a2:	f000 fe07 	bl	80023b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4809      	ldr	r0, [pc, #36]	@ (80017d0 <MX_I2C4_Init+0x74>)
 80017aa:	f004 fc79 	bl	80060a0 <HAL_I2CEx_ConfigAnalogFilter>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80017b4:	f000 fdfe 	bl	80023b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_I2C4_Init+0x74>)
 80017bc:	f004 fcbb 	bl	8006136 <HAL_I2CEx_ConfigDigitalFilter>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f000 fdf5 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000fe4 	.word	0x20000fe4
 80017d4:	40008400 	.word	0x40008400
 80017d8:	30909dec 	.word	0x30909dec

080017dc <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_I2C6_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <MX_I2C6_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_I2C6_Init+0x74>)
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <MX_I2C6_Init+0x7c>)
 80017ea:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_I2C6_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_I2C6_Init+0x74>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_I2C6_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_I2C6_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_I2C6_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_I2C6_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_I2C6_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8001816:	480e      	ldr	r0, [pc, #56]	@ (8001850 <MX_I2C6_Init+0x74>)
 8001818:	f003 fec0 	bl	800559c <HAL_I2C_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8001822:	f000 fdc7 	bl	80023b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <MX_I2C6_Init+0x74>)
 800182a:	f004 fc39 	bl	80060a0 <HAL_I2CEx_ConfigAnalogFilter>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001834:	f000 fdbe 	bl	80023b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_I2C6_Init+0x74>)
 800183c:	f004 fc7b 	bl	8006136 <HAL_I2CEx_ConfigDigitalFilter>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 fdb5 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20001038 	.word	0x20001038
 8001854:	40009c00 	.word	0x40009c00
 8001858:	30909dec 	.word	0x30909dec

0800185c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001870:	f004 fcbe 	bl	80061f0 <HAL_ICACHE_Disable>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800187a:	f000 fd9b 	bl	80023b4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 800187e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001882:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8001884:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001888:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	2000      	movs	r0, #0
 800189c:	f004 fcd8 	bl	8006250 <HAL_ICACHE_EnableRemapRegion>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80018a6:	f000 fd85 	bl	80023b4 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80018aa:	f004 fc91 	bl	80061d0 <HAL_ICACHE_Enable>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f000 fd7e 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018c6:	4a22      	ldr	r2, [pc, #136]	@ (8001950 <MX_LPUART1_UART_Init+0x90>)
 80018c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018cc:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <MX_LPUART1_UART_Init+0x94>)
 80018ce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018e4:	220c      	movs	r2, #12
 80018e6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001902:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 8001904:	f00b ff70 	bl	800d7e8 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800190e:	f000 fd51 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001912:	2100      	movs	r1, #0
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 8001916:	f00c fbb7 	bl	800e088 <HAL_UARTEx_SetTxFifoThreshold>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001920:	f000 fd48 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001924:	2100      	movs	r1, #0
 8001926:	4809      	ldr	r0, [pc, #36]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 8001928:	f00c fbec 	bl	800e104 <HAL_UARTEx_SetRxFifoThreshold>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001932:	f000 fd3f 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_LPUART1_UART_Init+0x8c>)
 8001938:	f00c fb6d 	bl	800e016 <HAL_UARTEx_DisableFifoMode>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001942:	f000 fd37 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000108c 	.word	0x2000108c
 8001950:	46002400 	.word	0x46002400
 8001954:	00033324 	.word	0x00033324

08001958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800195e:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <MX_USART1_UART_Init+0x94>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a0:	4811      	ldr	r0, [pc, #68]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019a2:	f00b ff21 	bl	800d7e8 <HAL_UART_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019ac:	f000 fd02 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019b4:	f00c fb68 	bl	800e088 <HAL_UARTEx_SetTxFifoThreshold>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019be:	f000 fcf9 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019c6:	f00c fb9d 	bl	800e104 <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 fcf0 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019d6:	f00c fb1e 	bl	800e016 <HAL_UARTEx_DisableFifoMode>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 fce8 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20001120 	.word	0x20001120
 80019ec:	40013800 	.word	0x40013800

080019f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 80019f6:	4a23      	ldr	r2, [pc, #140]	@ (8001a84 <MX_USART6_UART_Init+0x94>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a38:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a3a:	f00b fed5 	bl	800d7e8 <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 fcb6 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a4c:	f00c fb1c 	bl	800e088 <HAL_UARTEx_SetTxFifoThreshold>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001a56:	f000 fcad 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a5e:	f00c fb51 	bl	800e104 <HAL_UARTEx_SetRxFifoThreshold>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f000 fca4 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MX_USART6_UART_Init+0x90>)
 8001a6e:	f00c fad2 	bl	800e016 <HAL_UARTEx_DisableFifoMode>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 fc9c 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200011b4 	.word	0x200011b4
 8001a84:	40006400 	.word	0x40006400

08001a88 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	@ 0x38
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2234      	movs	r2, #52	@ 0x34
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00c fbe0 	bl	800e25a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001a9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b8c <MX_LTDC_Init+0x104>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001aa0:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001aa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aa6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001aa8:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ab6:	4b34      	ldr	r3, [pc, #208]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001abc:	4b32      	ldr	r3, [pc, #200]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001ace:	4b2e      	ldr	r3, [pc, #184]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ad6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ade:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001ae6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001aec:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001aee:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001af4:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b0c:	481e      	ldr	r0, [pc, #120]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001b0e:	f004 fbf1 	bl	80062f4 <HAL_LTDC_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001b18:	f000 fc4c 	bl	80023b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001b20:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001b24:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001b2a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001b2e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b34:	23ff      	movs	r3, #255	@ 0xff
 8001b36:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b40:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b42:	2305      	movs	r3, #5
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001b46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8001b4c:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 8001b52:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_LTDC_Init+0x100>)
 8001b72:	f004 fd51 	bl	8006618 <HAL_LTDC_ConfigLayer>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001b7c:	f000 fc1a 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3738      	adds	r7, #56	@ 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20001248 	.word	0x20001248
 8001b8c:	40016800 	.word	0x40016800

08001b90 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb4 <MX_OCTOSPI1_Init+0x124>)
 8001bc2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001bca:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bd6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001bd8:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bda:	221a      	movs	r2, #26
 8001bdc:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001be4:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001bea:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bf2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bf6:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c12:	2208      	movs	r2, #8
 8001c14:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 16;
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c18:	2210      	movs	r2, #16
 8001c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c22:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c24:	f005 f87a 	bl	8006d1c <HAL_OSPI_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001c2e:	f000 fbc1 	bl	80023b4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_OCTOSPI1_Init+0x128>)
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <MX_OCTOSPI1_Init+0x12c>)
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c52:	f005 fb75 	bl	8007340 <HAL_OSPIM_Config>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_OCTOSPI1_Init+0xd0>
  {
    Error_Handler();
 8001c5c:	f000 fbaa 	bl	80023b4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c7c:	f005 fa4c 	bl	8007118 <HAL_OSPI_HyperbusCfg>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_OCTOSPI1_Init+0xfa>
  {
    Error_Handler();
 8001c86:	f000 fb95 	bl	80023b4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_OCTOSPI1_Init+0x120>)
 8001c98:	f006 f97a 	bl	8007f90 <HAL_OSPI_DLYB_SetConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_OCTOSPI1_Init+0x116>
  {
    Error_Handler();
 8001ca2:	f000 fb87 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	@ 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200012f0 	.word	0x200012f0
 8001cb4:	420d1400 	.word	0x420d1400
 8001cb8:	00010002 	.word	0x00010002
 8001cbc:	01000002 	.word	0x01000002

08001cc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	@ 0x38
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001cf0:	4a33      	ldr	r2, [pc, #204]	@ (8001dc0 <MX_RTC_Init+0x100>)
 8001cf2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cf4:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001cfc:	227f      	movs	r2, #127	@ 0x7f
 8001cfe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d18:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d20:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001d26:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d2c:	4823      	ldr	r0, [pc, #140]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d2e:	f00a fd91 	bl	800c854 <HAL_RTC_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d38:	f000 fb3c 	bl	80023b4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	481a      	ldr	r0, [pc, #104]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d54:	f00a ffee 	bl	800cd34 <HAL_RTCEx_PrivilegeModeSet>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d5e:	f000 fb29 	bl	80023b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001d80:	f00a fdea 	bl	800c958 <HAL_RTC_SetTime>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001d8a:	f000 fb13 	bl	80023b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d92:	2301      	movs	r3, #1
 8001d94:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_RTC_Init+0xfc>)
 8001da6:	f00a fe73 	bl	800ca90 <HAL_RTC_SetDate>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001db0:	f000 fb00 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	@ 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000134c 	.word	0x2000134c
 8001dc0:	46007800 	.word	0x46007800

08001dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001dd6:	4a31      	ldr	r2, [pc, #196]	@ (8001e9c <MX_SPI1_Init+0xd8>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001ddc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001dea:	2203      	movs	r2, #3
 8001dec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df4:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001dfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e02:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e0e:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e14:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5e:	480e      	ldr	r0, [pc, #56]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e60:	f00a ff96 	bl	800cd90 <HAL_SPI_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001e6a:	f000 faa3 	bl	80023b4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001e72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_SPI1_Init+0xd4>)
 8001e82:	f00b f8b6 	bl	800cff2 <HAL_SPIEx_SetConfigAutonomousMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001e8c:	f000 fa92 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000137c 	.word	0x2000137c
 8001e9c:	40013000 	.word	0x40013000

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b090      	sub	sp, #64	@ 0x40
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4bbf      	ldr	r3, [pc, #764]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebc:	4abd      	ldr	r2, [pc, #756]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec6:	4bbb      	ldr	r3, [pc, #748]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ed4:	4bb7      	ldr	r3, [pc, #732]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eda:	4ab6      	ldr	r2, [pc, #728]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee4:	4bb3      	ldr	r3, [pc, #716]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4bb0      	ldr	r3, [pc, #704]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef8:	4aae      	ldr	r2, [pc, #696]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f02:	4bac      	ldr	r3, [pc, #688]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f10:	4ba8      	ldr	r3, [pc, #672]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f16:	4aa7      	ldr	r2, [pc, #668]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f20:	4ba4      	ldr	r3, [pc, #656]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4ba1      	ldr	r3, [pc, #644]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	4a9f      	ldr	r2, [pc, #636]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f4c:	4b99      	ldr	r3, [pc, #612]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f52:	4a98      	ldr	r2, [pc, #608]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f5c:	4b95      	ldr	r3, [pc, #596]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	4b92      	ldr	r3, [pc, #584]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f70:	4a90      	ldr	r2, [pc, #576]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7a:	4b8e      	ldr	r3, [pc, #568]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f88:	4b8a      	ldr	r3, [pc, #552]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	4a89      	ldr	r2, [pc, #548]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f98:	4b86      	ldr	r3, [pc, #536]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa6:	4b83      	ldr	r3, [pc, #524]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fac:	4a81      	ldr	r2, [pc, #516]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fca:	4a7a      	ldr	r2, [pc, #488]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd4:	4b77      	ldr	r3, [pc, #476]	@ (80021b4 <MX_GPIO_Init+0x314>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe8:	4873      	ldr	r0, [pc, #460]	@ (80021b8 <MX_GPIO_Init+0x318>)
 8001fea:	f003 fa53 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001ff4:	4871      	ldr	r0, [pc, #452]	@ (80021bc <MX_GPIO_Init+0x31c>)
 8001ff6:	f003 fa4d 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002000:	486f      	ldr	r0, [pc, #444]	@ (80021c0 <MX_GPIO_Init+0x320>)
 8002002:	f003 fa47 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	21c8      	movs	r1, #200	@ 0xc8
 800200a:	486e      	ldr	r0, [pc, #440]	@ (80021c4 <MX_GPIO_Init+0x324>)
 800200c:	f003 fa42 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002016:	486c      	ldr	r0, [pc, #432]	@ (80021c8 <MX_GPIO_Init+0x328>)
 8002018:	f003 fa3c 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	2180      	movs	r1, #128	@ 0x80
 8002020:	486a      	ldr	r0, [pc, #424]	@ (80021cc <MX_GPIO_Init+0x32c>)
 8002022:	f003 fa37 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800202c:	4868      	ldr	r0, [pc, #416]	@ (80021d0 <MX_GPIO_Init+0x330>)
 800202e:	f003 fa31 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8002032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002044:	4619      	mov	r1, r3
 8002046:	485c      	ldr	r0, [pc, #368]	@ (80021b8 <MX_GPIO_Init+0x318>)
 8002048:	f003 f84c 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 800204c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002056:	2302      	movs	r3, #2
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002062:	4619      	mov	r1, r3
 8002064:	4854      	ldr	r0, [pc, #336]	@ (80021b8 <MX_GPIO_Init+0x318>)
 8002066:	f003 f83d 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 800206a:	2310      	movs	r3, #16
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	484e      	ldr	r0, [pc, #312]	@ (80021bc <MX_GPIO_Init+0x31c>)
 8002082:	f003 f82f 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 8002086:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002090:	2301      	movs	r3, #1
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002098:	4619      	mov	r1, r3
 800209a:	4848      	ldr	r0, [pc, #288]	@ (80021bc <MX_GPIO_Init+0x31c>)
 800209c:	f003 f822 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 80020a0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ae:	2302      	movs	r3, #2
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020b2:	230c      	movs	r3, #12
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ba:	4619      	mov	r1, r3
 80020bc:	4845      	ldr	r0, [pc, #276]	@ (80021d4 <MX_GPIO_Init+0x334>)
 80020be:	f003 f811 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80020c2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020cc:	2302      	movs	r3, #2
 80020ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d8:	4619      	mov	r1, r3
 80020da:	4839      	ldr	r0, [pc, #228]	@ (80021c0 <MX_GPIO_Init+0x320>)
 80020dc:	f003 f802 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020e0:	2304      	movs	r3, #4
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2302      	movs	r3, #2
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020f0:	230c      	movs	r3, #12
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4830      	ldr	r0, [pc, #192]	@ (80021bc <MX_GPIO_Init+0x31c>)
 80020fc:	f002 fff2 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002100:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002116:	4619      	mov	r1, r3
 8002118:	482f      	ldr	r0, [pc, #188]	@ (80021d8 <MX_GPIO_Init+0x338>)
 800211a:	f002 ffe3 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002126:	2302      	movs	r3, #2
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212e:	4619      	mov	r1, r3
 8002130:	4828      	ldr	r0, [pc, #160]	@ (80021d4 <MX_GPIO_Init+0x334>)
 8002132:	f002 ffd7 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	2302      	movs	r3, #2
 8002146:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002148:	2308      	movs	r3, #8
 800214a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002150:	4619      	mov	r1, r3
 8002152:	481b      	ldr	r0, [pc, #108]	@ (80021c0 <MX_GPIO_Init+0x320>)
 8002154:	f002 ffc6 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8002158:	2303      	movs	r3, #3
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002160:	2302      	movs	r3, #2
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002168:	4619      	mov	r1, r3
 800216a:	4814      	ldr	r0, [pc, #80]	@ (80021bc <MX_GPIO_Init+0x31c>)
 800216c:	f002 ffba 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8002170:	2340      	movs	r3, #64	@ 0x40
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <MX_GPIO_Init+0x33c>)
 8002176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002178:	2302      	movs	r3, #2
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002180:	4619      	mov	r1, r3
 8002182:	4814      	ldr	r0, [pc, #80]	@ (80021d4 <MX_GPIO_Init+0x334>)
 8002184:	f002 ffae 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8002188:	2388      	movs	r3, #136	@ 0x88
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002190:	2301      	movs	r3, #1
 8002192:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	4809      	ldr	r0, [pc, #36]	@ (80021c4 <MX_GPIO_Init+0x324>)
 80021a0:	f002 ffa0 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 80021a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_GPIO_Init+0x33c>)
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b2:	e015      	b.n	80021e0 <MX_GPIO_Init+0x340>
 80021b4:	46020c00 	.word	0x46020c00
 80021b8:	42021800 	.word	0x42021800
 80021bc:	42020c00 	.word	0x42020c00
 80021c0:	42020400 	.word	0x42020400
 80021c4:	42022400 	.word	0x42022400
 80021c8:	42022000 	.word	0x42022000
 80021cc:	42021400 	.word	0x42021400
 80021d0:	42021000 	.word	0x42021000
 80021d4:	42020800 	.word	0x42020800
 80021d8:	42020000 	.word	0x42020000
 80021dc:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	4860      	ldr	r0, [pc, #384]	@ (8002368 <MX_GPIO_Init+0x4c8>)
 80021e8:	f002 ff7c 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 80021ec:	2340      	movs	r3, #64	@ 0x40
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002200:	4619      	mov	r1, r3
 8002202:	485a      	ldr	r0, [pc, #360]	@ (800236c <MX_GPIO_Init+0x4cc>)
 8002204:	f002 ff6e 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8002208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800220e:	4b58      	ldr	r3, [pc, #352]	@ (8002370 <MX_GPIO_Init+0x4d0>)
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002212:	2301      	movs	r3, #1
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800221a:	4619      	mov	r1, r3
 800221c:	4853      	ldr	r0, [pc, #332]	@ (800236c <MX_GPIO_Init+0x4cc>)
 800221e:	f002 ff61 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8002222:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222c:	2301      	movs	r3, #1
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002238:	4619      	mov	r1, r3
 800223a:	484e      	ldr	r0, [pc, #312]	@ (8002374 <MX_GPIO_Init+0x4d4>)
 800223c:	f002 ff52 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8002240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <MX_GPIO_Init+0x4d0>)
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224a:	2301      	movs	r3, #1
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002252:	4619      	mov	r1, r3
 8002254:	4847      	ldr	r0, [pc, #284]	@ (8002374 <MX_GPIO_Init+0x4d4>)
 8002256:	f002 ff45 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 800225a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002264:	2301      	movs	r3, #1
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	4841      	ldr	r0, [pc, #260]	@ (8002374 <MX_GPIO_Init+0x4d4>)
 8002270:	f002 ff38 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	483b      	ldr	r0, [pc, #236]	@ (8002378 <MX_GPIO_Init+0x4d8>)
 800228c:	f002 ff2a 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8002290:	2340      	movs	r3, #64	@ 0x40
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a0:	4619      	mov	r1, r3
 80022a2:	4835      	ldr	r0, [pc, #212]	@ (8002378 <MX_GPIO_Init+0x4d8>)
 80022a4:	f002 ff1e 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ac:	4b30      	ldr	r3, [pc, #192]	@ (8002370 <MX_GPIO_Init+0x4d0>)
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b8:	4619      	mov	r1, r3
 80022ba:	4830      	ldr	r0, [pc, #192]	@ (800237c <MX_GPIO_Init+0x4dc>)
 80022bc:	f002 ff12 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80022c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4828      	ldr	r0, [pc, #160]	@ (800237c <MX_GPIO_Init+0x4dc>)
 80022da:	f002 ff03 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 80022de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <MX_GPIO_Init+0x4d0>)
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4823      	ldr	r0, [pc, #140]	@ (8002380 <MX_GPIO_Init+0x4e0>)
 80022f4:	f002 fef6 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 80022f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2301      	movs	r3, #1
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002302:	2302      	movs	r3, #2
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230e:	4619      	mov	r1, r3
 8002310:	481b      	ldr	r0, [pc, #108]	@ (8002380 <MX_GPIO_Init+0x4e0>)
 8002312:	f002 fee7 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8002316:	2310      	movs	r3, #16
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MX_GPIO_Init+0x4d0>)
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231e:	2301      	movs	r3, #1
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	4816      	ldr	r0, [pc, #88]	@ (8002384 <MX_GPIO_Init+0x4e4>)
 800232a:	f002 fedb 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 800232e:	2304      	movs	r3, #4
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <MX_GPIO_Init+0x4e8>)
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	4812      	ldr	r0, [pc, #72]	@ (800238c <MX_GPIO_Init+0x4ec>)
 8002342:	f002 fecf 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8002346:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002358:	4619      	mov	r1, r3
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <MX_GPIO_Init+0x4d8>)
 800235c:	f002 fec2 	bl	80050e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002360:	bf00      	nop
 8002362:	3740      	adds	r7, #64	@ 0x40
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	42020000 	.word	0x42020000
 800236c:	42022400 	.word	0x42022400
 8002370:	10210000 	.word	0x10210000
 8002374:	42022000 	.word	0x42022000
 8002378:	42021400 	.word	0x42021400
 800237c:	42021000 	.word	0x42021000
 8002380:	42020c00 	.word	0x42020c00
 8002384:	42020800 	.word	0x42020800
 8002388:	10110000 	.word	0x10110000
 800238c:	42020400 	.word	0x42020400

08002390 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023a2:	f001 f9a5 	bl	80036f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40001000 	.word	0x40001000

080023b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
}
 80023ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <Error_Handler+0x8>

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_MspInit+0x30>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <HAL_MspInit+0x30>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_MspInit+0x30>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	46020c00 	.word	0x46020c00

080023f4 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0c2      	sub	sp, #264	@ 0x108
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002402:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	22e0      	movs	r2, #224	@ 0xe0
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f00b ff1c 	bl	800e25a <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8002422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2b      	ldr	r2, [pc, #172]	@ (80024dc <HAL_MDF_MspInit+0xe8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d14e      	bne.n	80024d2 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8002434:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	4618      	mov	r0, r3
 800244c:	f007 f9f4 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8002456:	f7ff ffad 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247e:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_MDF_MspInit+0xec>)
 800248a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248e:	f003 0210 	and.w	r2, r3, #16
 8002492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002496:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80024a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024a4:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <HAL_MDF_MspInit+0xf0>)
 80024ce:	f002 fe09 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	46024080 	.word	0x46024080
 80024e0:	46020c00 	.word	0x46020c00
 80024e4:	42021000 	.word	0x42021000

080024e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <HAL_CRC_MspInit+0x3c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10e      	bne.n	8002518 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002500:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 8002502:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002506:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <HAL_CRC_MspInit+0x40>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40023000 	.word	0x40023000
 8002528:	46020c00 	.word	0x46020c00

0800252c <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <HAL_DCACHE_MspInit+0x68>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10f      	bne.n	800255e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 8002546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800254a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 800255c:	e013      	b.n	8002586 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a0e      	ldr	r2, [pc, #56]	@ (800259c <HAL_DCACHE_MspInit+0x70>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d10e      	bne.n	8002586 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 8002570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002578:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <HAL_DCACHE_MspInit+0x6c>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40031400 	.word	0x40031400
 8002598:	46020c00 	.word	0x46020c00
 800259c:	40031800 	.word	0x40031800

080025a0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	@ (80025e8 <HAL_DMA2D_MspInit+0x48>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d116      	bne.n	80025e0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <HAL_DMA2D_MspInit+0x4c>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <HAL_DMA2D_MspInit+0x4c>)
 80025ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_DMA2D_MspInit+0x4c>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2076      	movs	r0, #118	@ 0x76
 80025d6:	f001 f987 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80025da:	2076      	movs	r0, #118	@ 0x76
 80025dc:	f001 f99e 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	4002b000 	.word	0x4002b000
 80025ec:	46020c00 	.word	0x46020c00

080025f0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0c2      	sub	sp, #264	@ 0x108
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80025fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	22e0      	movs	r2, #224	@ 0xe0
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f00b fe1e 	bl	800e25a <memset>
  if(hdsi->Instance==DSI)
 800261e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a30      	ldr	r2, [pc, #192]	@ (80026ec <HAL_DSI_MspInit+0xfc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d157      	bne.n	80026e0 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0304 	mov.w	r3, #4
 8002638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800263c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002640:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f007 f8f5 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8002654:	f7ff feae 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 800265a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800265e:	4a24      	ldr	r2, [pc, #144]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 8002660:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002664:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 800266a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800266e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800267c:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002686:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <HAL_DSI_MspInit+0x100>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268c:	f003 0220 	and.w	r2, r3, #32
 8002690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002694:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800269e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026a2:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80026be:	230b      	movs	r3, #11
 80026c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80026c8:	4619      	mov	r1, r3
 80026ca:	480a      	ldr	r0, [pc, #40]	@ (80026f4 <HAL_DSI_MspInit+0x104>)
 80026cc:	f002 fd0a 	bl	80050e4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2089      	movs	r0, #137	@ 0x89
 80026d6:	f001 f907 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80026da:	2089      	movs	r0, #137	@ 0x89
 80026dc:	f001 f91e 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40016c00 	.word	0x40016c00
 80026f0:	46020c00 	.word	0x46020c00
 80026f4:	42021400 	.word	0x42021400

080026f8 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0e      	ldr	r2, [pc, #56]	@ (8002740 <HAL_GFXMMU_MspInit+0x48>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d116      	bne.n	8002738 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_GFXMMU_MspInit+0x4c>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	4a0c      	ldr	r2, [pc, #48]	@ (8002744 <HAL_GFXMMU_MspInit+0x4c>)
 8002712:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002716:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_GFXMMU_MspInit+0x4c>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2086      	movs	r0, #134	@ 0x86
 800272e:	f001 f8db 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8002732:	2086      	movs	r0, #134	@ 0x86
 8002734:	f001 f8f2 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	4002c000 	.word	0x4002c000
 8002744:	46020c00 	.word	0x46020c00

08002748 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1a      	ldr	r2, [pc, #104]	@ (80027c0 <HAL_GPU2D_MspInit+0x78>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12d      	bne.n	80027b6 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002760:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002766:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	4a11      	ldr	r2, [pc, #68]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_GPU2D_MspInit+0x7c>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2084      	movs	r0, #132	@ 0x84
 800279c:	f001 f8a4 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80027a0:	2084      	movs	r0, #132	@ 0x84
 80027a2:	f001 f8bb 	bl	800391c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2085      	movs	r0, #133	@ 0x85
 80027ac:	f001 f89c 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80027b0:	2085      	movs	r0, #133	@ 0x85
 80027b2:	f001 f8b3 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	4002f000 	.word	0x4002f000
 80027c4:	46020c00 	.word	0x46020c00

080027c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0ca      	sub	sp, #296	@ 0x128
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ec:	22e0      	movs	r2, #224	@ 0xe0
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00b fd32 	bl	800e25a <memset>
  if(hi2c->Instance==I2C1)
 80027f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027fa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4ad3      	ldr	r2, [pc, #844]	@ (8002b50 <HAL_I2C_MspInit+0x388>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d14f      	bne.n	80028a8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002808:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800281e:	4618      	mov	r0, r3
 8002820:	f007 f80a 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800282a:	f7ff fdc3 	bl	80023b4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800282e:	4bc9      	ldr	r3, [pc, #804]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002834:	4ac7      	ldr	r2, [pc, #796]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800283a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800283e:	4bc5      	ldr	r3, [pc, #788]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800284c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002850:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002854:	2312      	movs	r3, #18
 8002856:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002866:	2304      	movs	r3, #4
 8002868:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800286c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002870:	4619      	mov	r1, r3
 8002872:	48b9      	ldr	r0, [pc, #740]	@ (8002b58 <HAL_I2C_MspInit+0x390>)
 8002874:	f002 fc36 	bl	80050e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002878:	4bb6      	ldr	r3, [pc, #728]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 800287a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800287e:	4ab5      	ldr	r2, [pc, #724]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002884:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002888:	4bb2      	ldr	r3, [pc, #712]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 800288a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800288e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002892:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002896:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80028a6:	e14e      	b.n	8002b46 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C2)
 80028a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aa9      	ldr	r2, [pc, #676]	@ (8002b5c <HAL_I2C_MspInit+0x394>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d157      	bne.n	800296a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028ba:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028d0:	4618      	mov	r0, r3
 80028d2:	f006 ffb1 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80028dc:	f7ff fd6a 	bl	80023b4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80028e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028f0:	4b98      	ldr	r3, [pc, #608]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f6:	f003 0202 	and.w	r2, r3, #2
 80028fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800290c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800290e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002912:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002928:	2304      	movs	r3, #4
 800292a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002932:	4619      	mov	r1, r3
 8002934:	488a      	ldr	r0, [pc, #552]	@ (8002b60 <HAL_I2C_MspInit+0x398>)
 8002936:	f002 fbd5 	bl	80050e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800293a:	4b86      	ldr	r3, [pc, #536]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 800293c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002940:	4a84      	ldr	r2, [pc, #528]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002942:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002946:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800294a:	4b82      	ldr	r3, [pc, #520]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 800294c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002954:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	e0ed      	b.n	8002b46 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C4)
 800296a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800296e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7b      	ldr	r2, [pc, #492]	@ (8002b64 <HAL_I2C_MspInit+0x39c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d157      	bne.n	8002a2c <HAL_I2C_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800297c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002992:	4618      	mov	r0, r3
 8002994:	f006 ff50 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 800299e:	f7ff fd09 	bl	80023b4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80029a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b2:	4b68      	ldr	r3, [pc, #416]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b8:	f003 0208 	and.w	r2, r3, #8
 80029bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029ce:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029d0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d8:	2312      	movs	r3, #18
 80029da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80029ea:	2304      	movs	r3, #4
 80029ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80029f4:	4619      	mov	r1, r3
 80029f6:	485c      	ldr	r0, [pc, #368]	@ (8002b68 <HAL_I2C_MspInit+0x3a0>)
 80029f8:	f002 fb74 	bl	80050e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029fc:	4b55      	ldr	r3, [pc, #340]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 80029fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002a02:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002a0c:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002a12:	f003 0202 	and.w	r2, r3, #2
 8002a16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a28:	681b      	ldr	r3, [r3, #0]
}
 8002a2a:	e08c      	b.n	8002b46 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C6)
 8002a2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	@ (8002b6c <HAL_I2C_MspInit+0x3a4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f040 8083 	bne.w	8002b46 <HAL_I2C_MspInit+0x37e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002a40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 feee 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_MspInit+0x29e>
      Error_Handler();
 8002a62:	f7ff fca7 	bl	80023b4 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6c:	4a39      	ldr	r2, [pc, #228]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a7c:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8002a80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a92:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a94:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aaa:	f003 0220 	and.w	r2, r3, #32
 8002aae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ab2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002abc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ac0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ac6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aca:	2312      	movs	r3, #18
 8002acc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002adc:	2302      	movs	r3, #2
 8002ade:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ae2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4821      	ldr	r0, [pc, #132]	@ (8002b70 <HAL_I2C_MspInit+0x3a8>)
 8002aea:	f002 fafb 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af4:	2312      	movs	r3, #18
 8002af6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b0c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002b10:	4619      	mov	r1, r3
 8002b12:	4818      	ldr	r0, [pc, #96]	@ (8002b74 <HAL_I2C_MspInit+0x3ac>)
 8002b14:	f002 fae6 	bl	80050e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b24:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_I2C_MspInit+0x38c>)
 8002b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002b2e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002b32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b40:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b44:	681b      	ldr	r3, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40005400 	.word	0x40005400
 8002b54:	46020c00 	.word	0x46020c00
 8002b58:	42021800 	.word	0x42021800
 8002b5c:	40005800 	.word	0x40005800
 8002b60:	42020400 	.word	0x42020400
 8002b64:	40008400 	.word	0x40008400
 8002b68:	42020c00 	.word	0x42020c00
 8002b6c:	40009c00 	.word	0x40009c00
 8002b70:	42022400 	.word	0x42022400
 8002b74:	42021400 	.word	0x42021400

08002b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b0c8      	sub	sp, #288	@ 0x120
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b9c:	22e0      	movs	r2, #224	@ 0xe0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00b fb5a 	bl	800e25a <memset>
  if(huart->Instance==LPUART1)
 8002ba6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002baa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4aa1      	ldr	r2, [pc, #644]	@ (8002e38 <HAL_UART_MspInit+0x2c0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d17b      	bne.n	8002cb0 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002bb8:	f04f 0220 	mov.w	r2, #32
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f006 fe32 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002bda:	f7ff fbeb 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bde:	4b97      	ldr	r3, [pc, #604]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002be4:	4a95      	ldr	r2, [pc, #596]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bea:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002bee:	4b93      	ldr	r3, [pc, #588]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c02:	4a8e      	ldr	r2, [pc, #568]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c12:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002c16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c28:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b84      	ldr	r3, [pc, #528]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c30:	4a82      	ldr	r2, [pc, #520]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c3a:	4b80      	ldr	r3, [pc, #512]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c40:	f003 0202 	and.w	r2, r3, #2
 8002c44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c56:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002c58:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002c5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c72:	2308      	movs	r3, #8
 8002c74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c78:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4870      	ldr	r0, [pc, #448]	@ (8002e40 <HAL_UART_MspInit+0x2c8>)
 8002c80:	f002 fa30 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c84:	2302      	movs	r3, #2
 8002c86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4866      	ldr	r0, [pc, #408]	@ (8002e44 <HAL_UART_MspInit+0x2cc>)
 8002caa:	f002 fa1b 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cae:	e0bd      	b.n	8002e2c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a62      	ldr	r2, [pc, #392]	@ (8002e48 <HAL_UART_MspInit+0x2d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d155      	bne.n	8002d6e <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cc2:	f04f 0201 	mov.w	r2, #1
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fdae 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002ce2:	f7ff fb67 	bl	80023b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce6:	4b55      	ldr	r3, [pc, #340]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cec:	4a53      	ldr	r2, [pc, #332]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cfc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002d00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d12:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d1a:	4a48      	ldr	r2, [pc, #288]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d24:	4b45      	ldr	r3, [pc, #276]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d2a:	f003 0202 	and.w	r2, r3, #2
 8002d2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d40:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002d42:	23c0      	movs	r3, #192	@ 0xc0
 8002d44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002d64:	4619      	mov	r1, r3
 8002d66:	4837      	ldr	r0, [pc, #220]	@ (8002e44 <HAL_UART_MspInit+0x2cc>)
 8002d68:	f002 f9bc 	bl	80050e4 <HAL_GPIO_Init>
}
 8002d6c:	e05e      	b.n	8002e2c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8002d6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a34      	ldr	r2, [pc, #208]	@ (8002e4c <HAL_UART_MspInit+0x2d4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d155      	bne.n	8002e2c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 fd4e 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002da2:	f7ff fb07 	bl	80023b4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002da6:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dac:	4a23      	ldr	r2, [pc, #140]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002db6:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dbc:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002dc0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002dc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002dce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dd2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dda:	4a18      	ldr	r2, [pc, #96]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002de4:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <HAL_UART_MspInit+0x2c4>)
 8002de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dea:	f003 0204 	and.w	r2, r3, #4
 8002dee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002df2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002dfc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e00:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002e02:	230c      	movs	r3, #12
 8002e04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002e24:	4619      	mov	r1, r3
 8002e26:	480a      	ldr	r0, [pc, #40]	@ (8002e50 <HAL_UART_MspInit+0x2d8>)
 8002e28:	f002 f95c 	bl	80050e4 <HAL_GPIO_Init>
}
 8002e2c:	bf00      	nop
 8002e2e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	46002400 	.word	0x46002400
 8002e3c:	46020c00 	.word	0x46020c00
 8002e40:	42021800 	.word	0x42021800
 8002e44:	42020400 	.word	0x42020400
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40006400 	.word	0x40006400
 8002e50:	42020800 	.word	0x42020800

08002e54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b0bc      	sub	sp, #240	@ 0xf0
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	22e0      	movs	r2, #224	@ 0xe0
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f00b f9f8 	bl	800e25a <memset>
  if(hltdc->Instance==LTDC)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_LTDC_MspInit+0xa4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d13d      	bne.n	8002ef0 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0302 	mov.w	r3, #2
 8002e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002e80:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002e90:	2314      	movs	r3, #20
 8002e92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002e94:	2302      	movs	r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002ea8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f006 fcc0 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8002ebe:	f7ff fa79 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_LTDC_MspInit+0xa8>)
 8002ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8002efc <HAL_LTDC_MspInit+0xa8>)
 8002eca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ece:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_LTDC_MspInit+0xa8>)
 8002ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2087      	movs	r0, #135	@ 0x87
 8002ee6:	f000 fcff 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002eea:	2087      	movs	r0, #135	@ 0x87
 8002eec:	f000 fd16 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	37f0      	adds	r7, #240	@ 0xf0
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40016800 	.word	0x40016800
 8002efc:	46020c00 	.word	0x46020c00

08002f00 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b0c8      	sub	sp, #288	@ 0x120
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f0e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f24:	22e0      	movs	r2, #224	@ 0xe0
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00b f996 	bl	800e25a <memset>
  if(hospi->Instance==OCTOSPI1)
 8002f2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4aaa      	ldr	r2, [pc, #680]	@ (80031e4 <HAL_OSPI_MspInit+0x2e4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	f040 814c 	bne.w	80031da <HAL_OSPI_MspInit+0x2da>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002f42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 fc6d 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002f64:	f7ff fa26 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002f68:	4b9f      	ldr	r3, [pc, #636]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f6e:	4a9e      	ldr	r2, [pc, #632]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f78:	4b9b      	ldr	r3, [pc, #620]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002f86:	4b98      	ldr	r3, [pc, #608]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	4a96      	ldr	r2, [pc, #600]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f8e:	f043 0310 	orr.w	r3, r3, #16
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f96:	4b94      	ldr	r3, [pc, #592]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f003 0210 	and.w	r2, r3, #16
 8002fa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fa4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fb2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fba:	4a8b      	ldr	r2, [pc, #556]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fc4:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fca:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002fce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fe0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fe2:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe8:	4a7f      	ldr	r2, [pc, #508]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8002ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff8:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002ffc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800300a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800300e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003010:	4b75      	ldr	r3, [pc, #468]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003016:	4a74      	ldr	r2, [pc, #464]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003020:	4b71      	ldr	r3, [pc, #452]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003026:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800302a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800302e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003038:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800303c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303e:	4b6a      	ldr	r3, [pc, #424]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003044:	4a68      	ldr	r2, [pc, #416]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800304e:	4b66      	ldr	r3, [pc, #408]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003054:	f003 0202 	and.w	r2, r3, #2
 8003058:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800305c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003066:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800306a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	4b5e      	ldr	r3, [pc, #376]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 800306e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003072:	4a5d      	ldr	r2, [pc, #372]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800307c:	4b5a      	ldr	r3, [pc, #360]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 800307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003082:	f003 0201 	and.w	r2, r3, #1
 8003086:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800308a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003094:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003098:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800309a:	4b53      	ldr	r3, [pc, #332]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a0:	4a51      	ldr	r2, [pc, #324]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030aa:	4b4f      	ldr	r3, [pc, #316]	@ (80031e8 <HAL_OSPI_MspInit+0x2e8>)
 80030ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b0:	f003 0210 	and.w	r2, r3, #16
 80030b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030c6:	681b      	ldr	r3, [r3, #0]
    PH12     ------> OCTOSPIM_P2_IO7
    PA0     ------> OCTOSPIM_P2_NCS
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80030c8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80030cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80030e2:	2305      	movs	r3, #5
 80030e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030e8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030ec:	4619      	mov	r1, r3
 80030ee:	483f      	ldr	r0, [pc, #252]	@ (80031ec <HAL_OSPI_MspInit+0x2ec>)
 80030f0:	f001 fff8 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030f4:	2340      	movs	r3, #64	@ 0x40
 80030f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800310c:	2303      	movs	r3, #3
 800310e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003112:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003116:	4619      	mov	r1, r3
 8003118:	4835      	ldr	r0, [pc, #212]	@ (80031f0 <HAL_OSPI_MspInit+0x2f0>)
 800311a:	f001 ffe3 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800311e:	230e      	movs	r3, #14
 8003120:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8003136:	2306      	movs	r3, #6
 8003138:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800313c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003140:	4619      	mov	r1, r3
 8003142:	482c      	ldr	r0, [pc, #176]	@ (80031f4 <HAL_OSPI_MspInit+0x2f4>)
 8003144:	f001 ffce 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8003148:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800314c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003150:	2302      	movs	r3, #2
 8003152:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003162:	230a      	movs	r3, #10
 8003164:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003168:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800316c:	4619      	mov	r1, r3
 800316e:	4822      	ldr	r0, [pc, #136]	@ (80031f8 <HAL_OSPI_MspInit+0x2f8>)
 8003170:	f001 ffb8 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003174:	2301      	movs	r3, #1
 8003176:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 800318c:	230a      	movs	r3, #10
 800318e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003196:	4619      	mov	r1, r3
 8003198:	4818      	ldr	r0, [pc, #96]	@ (80031fc <HAL_OSPI_MspInit+0x2fc>)
 800319a:	f001 ffa3 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800319e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80031b8:	230a      	movs	r3, #10
 80031ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031c2:	4619      	mov	r1, r3
 80031c4:	480e      	ldr	r0, [pc, #56]	@ (8003200 <HAL_OSPI_MspInit+0x300>)
 80031c6:	f001 ff8d 	bl	80050e4 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	204c      	movs	r0, #76	@ 0x4c
 80031d0:	f000 fb8a 	bl	80038e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80031d4:	204c      	movs	r0, #76	@ 0x4c
 80031d6:	f000 fba1 	bl	800391c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	420d1400 	.word	0x420d1400
 80031e8:	46020c00 	.word	0x46020c00
 80031ec:	42021c00 	.word	0x42021c00
 80031f0:	42021800 	.word	0x42021800
 80031f4:	42022000 	.word	0x42022000
 80031f8:	42020400 	.word	0x42020400
 80031fc:	42020000 	.word	0x42020000
 8003200:	42021000 	.word	0x42021000

08003204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0bc      	sub	sp, #240	@ 0xf0
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	22e0      	movs	r2, #224	@ 0xe0
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f00b f820 	bl	800e25a <memset>
  if(hrtc->Instance==RTC)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <HAL_RTC_MspInit+0x90>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d132      	bne.n	800328a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003224:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	4618      	mov	r0, r3
 800323e:	f006 fafb 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003248:	f7ff f8b4 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 800324e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003252:	4a11      	ldr	r2, [pc, #68]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 8003254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 800325e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003262:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 8003264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003268:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 800326e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800327a:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 800327c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <HAL_RTC_MspInit+0x94>)
 8003282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003286:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	37f0      	adds	r7, #240	@ 0xf0
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	46007800 	.word	0x46007800
 8003298:	46020c00 	.word	0x46020c00

0800329c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b0c4      	sub	sp, #272	@ 0x110
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032aa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032bc:	f107 0318 	add.w	r3, r7, #24
 80032c0:	22e0      	movs	r2, #224	@ 0xe0
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00a ffc8 	bl	800e25a <memset>
  if(hspi->Instance==SPI1)
 80032ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a41      	ldr	r2, [pc, #260]	@ (80033dc <HAL_SPI_MspInit+0x140>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d17a      	bne.n	80033d2 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80032e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80032ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f0:	f107 0318 	add.w	r3, r7, #24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f006 fa9f 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8003300:	f7ff f858 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003304:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800330a:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 800330c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003310:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003314:	4b32      	ldr	r3, [pc, #200]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800331a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003328:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003338:	f003 0202 	and.w	r2, r3, #2
 800333c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003340:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800334a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800334e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003350:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003356:	4a22      	ldr	r2, [pc, #136]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_SPI_MspInit+0x144>)
 8003362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003366:	f003 0201 	and.w	r2, r3, #1
 800336a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800336e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800337c:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800337e:	2301      	movs	r3, #1
 8003380:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003396:	2305      	movs	r3, #5
 8003398:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80033a0:	4619      	mov	r1, r3
 80033a2:	4810      	ldr	r0, [pc, #64]	@ (80033e4 <HAL_SPI_MspInit+0x148>)
 80033a4:	f001 fe9e 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80033a8:	23e0      	movs	r3, #224	@ 0xe0
 80033aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033c0:	2305      	movs	r3, #5
 80033c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80033ca:	4619      	mov	r1, r3
 80033cc:	4806      	ldr	r0, [pc, #24]	@ (80033e8 <HAL_SPI_MspInit+0x14c>)
 80033ce:	f001 fe89 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40013000 	.word	0x40013000
 80033e0:	46020c00 	.word	0x46020c00
 80033e4:	42020400 	.word	0x42020400
 80033e8:	42020000 	.word	0x42020000

080033ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08e      	sub	sp, #56	@ 0x38
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033fc:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_InitTick+0xcc>)
 80033fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003402:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <HAL_InitTick+0xcc>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800340c:	4b2a      	ldr	r3, [pc, #168]	@ (80034b8 <HAL_InitTick+0xcc>)
 800340e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800341a:	f107 0210 	add.w	r2, r7, #16
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f006 f91d 	bl	8009664 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800342a:	f006 f8df 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800342e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	4a22      	ldr	r2, [pc, #136]	@ (80034bc <HAL_InitTick+0xd0>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	3b01      	subs	r3, #1
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003440:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_InitTick+0xd8>)
 8003442:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003444:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003446:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800344a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_InitTick+0xd4>)
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003452:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_InitTick+0xd4>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800345e:	4818      	ldr	r0, [pc, #96]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003460:	f009 fe08 	bl	800d074 <HAL_TIM_Base_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800346a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003472:	4813      	ldr	r0, [pc, #76]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003474:	f009 fe60 	bl	800d138 <HAL_TIM_Base_Start_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800347e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10e      	bne.n	80034a4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d808      	bhi.n	800349e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800348c:	2200      	movs	r2, #0
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	2031      	movs	r0, #49	@ 0x31
 8003492:	f000 fa29 	bl	80038e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003496:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e002      	b.n	80034a4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80034a4:	2031      	movs	r0, #49	@ 0x31
 80034a6:	f000 fa39 	bl	800391c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80034aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3738      	adds	r7, #56	@ 0x38
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	46020c00 	.word	0x46020c00
 80034bc:	431bde83 	.word	0x431bde83
 80034c0:	20001424 	.word	0x20001424
 80034c4:	40001000 	.word	0x40001000
 80034c8:	20000d04 	.word	0x20000d04

080034cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80034d0:	f006 f910 	bl	80096f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <NMI_Handler+0x8>

080034d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <HardFault_Handler+0x4>

080034e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <MemManage_Handler+0x4>

080034e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003534:	4802      	ldr	r0, [pc, #8]	@ (8003540 <TIM6_IRQHandler+0x10>)
 8003536:	f009 fe9f 	bl	800d278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20001424 	.word	0x20001424

08003544 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003548:	4802      	ldr	r0, [pc, #8]	@ (8003554 <OCTOSPI1_IRQHandler+0x10>)
 800354a:	f003 fca3 	bl	8006e94 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200012f0 	.word	0x200012f0

08003558 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800355c:	4802      	ldr	r0, [pc, #8]	@ (8003568 <DMA2D_IRQHandler+0x10>)
 800355e:	f000 fc8e 	bl	8003e7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000e64 	.word	0x20000e64

0800356c <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <GPU2D_IRQHandler+0x10>)
 8003572:	f001 ffd1 	bl	8005518 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000f30 	.word	0x20000f30

08003580 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003584:	4802      	ldr	r0, [pc, #8]	@ (8003590 <GPU2D_ER_IRQHandler+0x10>)
 8003586:	f001 ffed 	bl	8005564 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000f30 	.word	0x20000f30

08003594 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <GFXMMU_IRQHandler+0x10>)
 800359a:	f001 fd73 	bl	8005084 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000ee8 	.word	0x20000ee8

080035a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <LTDC_IRQHandler+0x10>)
 80035ae:	f002 ff71 	bl	8006494 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20001248 	.word	0x20001248

080035bc <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <DSI_IRQHandler+0x10>)
 80035c2:	f001 f8b5 	bl	8004730 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000ec4 	.word	0x20000ec4

080035d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035d4:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <SystemInit+0x68>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <SystemInit+0x68>)
 80035dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80035e4:	4b15      	ldr	r3, [pc, #84]	@ (800363c <SystemInit+0x6c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80035ea:	4b14      	ldr	r3, [pc, #80]	@ (800363c <SystemInit+0x6c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80035f0:	4b12      	ldr	r3, [pc, #72]	@ (800363c <SystemInit+0x6c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80035f6:	4b11      	ldr	r3, [pc, #68]	@ (800363c <SystemInit+0x6c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80035fc:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <SystemInit+0x6c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0e      	ldr	r2, [pc, #56]	@ (800363c <SystemInit+0x6c>)
 8003602:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003606:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800360a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <SystemInit+0x6c>)
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <SystemInit+0x6c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <SystemInit+0x6c>)
 8003618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <SystemInit+0x6c>)
 8003620:	2200      	movs	r2, #0
 8003622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <SystemInit+0x68>)
 8003626:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800362a:	609a      	str	r2, [r3, #8]
  #endif
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	46020c00 	.word	0x46020c00

08003640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003678 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003644:	f7ff ffc4 	bl	80035d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003648:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800364a:	e003      	b.n	8003654 <LoopCopyDataInit>

0800364c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800364e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003650:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003652:	3104      	adds	r1, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003654:	480a      	ldr	r0, [pc, #40]	@ (8003680 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003656:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003658:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800365a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800365c:	d3f6      	bcc.n	800364c <CopyDataInit>
	ldr	r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003660:	e002      	b.n	8003668 <LoopFillZerobss>

08003662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003662:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003664:	f842 3b04 	str.w	r3, [r2], #4

08003668 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <LoopForever+0x16>)
	cmp	r2, r3
 800366a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800366c:	d3f9      	bcc.n	8003662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800366e:	f00a fdfd 	bl	800e26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003672:	f7fd fd05 	bl	8001080 <main>

08003676 <LoopForever>:

LoopForever:
    b LoopForever
 8003676:	e7fe      	b.n	8003676 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003678:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800367c:	0800e3dc 	.word	0x0800e3dc
	ldr	r0, =_sdata
 8003680:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003684:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8003688:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 800368c:	20001498 	.word	0x20001498

08003690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC1_2_IRQHandler>
	...

08003694 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <HAL_Init+0x4c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a10      	ldr	r2, [pc, #64]	@ (80036e0 <HAL_Init+0x4c>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a4:	2003      	movs	r0, #3
 80036a6:	f000 f914 	bl	80038d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036aa:	f005 fe83 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <HAL_Init+0x50>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <HAL_Init+0x54>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_Init+0x58>)
 80036c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036c4:	200f      	movs	r0, #15
 80036c6:	f7ff fe91 	bl	80033ec <HAL_InitTick>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e002      	b.n	80036da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036d4:	f7fe fe74 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40022000 	.word	0x40022000
 80036e4:	46020c00 	.word	0x46020c00
 80036e8:	0800e2cc 	.word	0x0800e2cc
 80036ec:	20000d00 	.word	0x20000d00

080036f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000d08 	.word	0x20000d08
 8003714:	20001470 	.word	0x20001470

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	@ (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20001470 	.word	0x20001470

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_Delay+0x44>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003756:	bf00      	nop
 8003758:	f7ff ffde 	bl	8003718 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000d08 	.word	0x20000d08

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <__NVIC_EnableIRQ+0x38>)
 80037f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	@ (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	@ (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
         );
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ff4c 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038f6:	f7ff ff63 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 80038fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7ff ffb3 	bl	800386c <NVIC_EncodePriority>
 8003906:	4602      	mov	r2, r0
 8003908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff82 	bl	8003818 <__NVIC_SetPriority>
}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff56 	bl	80037dc <__NVIC_EnableIRQ>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e054      	b.n	80039f4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7f5b      	ldrb	r3, [r3, #29]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe fdc4 	bl	80024e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	791b      	ldrb	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a22      	ldr	r2, [pc, #136]	@ (80039fc <HAL_CRC_Init+0xc4>)
 8003974:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0218 	bic.w	r2, r2, #24
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	e00c      	b.n	80039a2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6899      	ldr	r1, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	461a      	mov	r2, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f834 	bl	8003a00 <HAL_CRCEx_Polynomial_Set>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e028      	b.n	80039f4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	795b      	ldrb	r3, [r3, #5]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295
 80039b2:	611a      	str	r2, [r3, #16]
 80039b4:	e004      	b.n	80039c0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6912      	ldr	r2, [r2, #16]
 80039be:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	04c11db7 	.word	0x04c11db7

08003a00 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a10:	231f      	movs	r3, #31
 8003a12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	e063      	b.n	8003aec <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a24:	bf00      	nop
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	613a      	str	r2, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_CRCEx_Polynomial_Set+0x44>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	d846      	bhi.n	8003ad8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003adf 	.word	0x08003adf
 8003a54:	08003ad9 	.word	0x08003ad9
 8003a58:	08003ad9 	.word	0x08003ad9
 8003a5c:	08003ad9 	.word	0x08003ad9
 8003a60:	08003ad9 	.word	0x08003ad9
 8003a64:	08003ad9 	.word	0x08003ad9
 8003a68:	08003ad9 	.word	0x08003ad9
 8003a6c:	08003ad9 	.word	0x08003ad9
 8003a70:	08003acd 	.word	0x08003acd
 8003a74:	08003ad9 	.word	0x08003ad9
 8003a78:	08003ad9 	.word	0x08003ad9
 8003a7c:	08003ad9 	.word	0x08003ad9
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003ad9 	.word	0x08003ad9
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ad9 	.word	0x08003ad9
 8003aa0:	08003ad9 	.word	0x08003ad9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003ad9 	.word	0x08003ad9
 8003ab0:	08003ab5 	.word	0x08003ab5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d913      	bls.n	8003ae2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003abe:	e010      	b.n	8003ae2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	d90f      	bls.n	8003ae6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003aca:	e00c      	b.n	8003ae6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d90b      	bls.n	8003aea <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ad6:	e008      	b.n	8003aea <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
        break;
 8003adc:	e006      	b.n	8003aec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003aea:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 0118 	bic.w	r1, r3, #24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e037      	b.n	8003b9e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_DCACHE_Init+0x8c>)
 8003b3e:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	@ (8003bac <HAL_DCACHE_Init+0x90>)
 8003b44:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_DCACHE_Init+0x94>)
 8003b4a:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a19      	ldr	r2, [pc, #100]	@ (8003bb4 <HAL_DCACHE_Init+0x98>)
 8003b50:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_DCACHE_Init+0x9c>)
 8003b56:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <HAL_DCACHE_Init+0xa0>)
 8003b64:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f814 	bl	8003bc0 <HAL_DCACHE_Enable>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08003c5f 	.word	0x08003c5f
 8003bac:	08003c0f 	.word	0x08003c0f
 8003bb0:	08003c23 	.word	0x08003c23
 8003bb4:	08003c4b 	.word	0x08003c4b
 8003bb8:	08003c37 	.word	0x08003c37
 8003bbc:	0800252d 	.word	0x0800252d

08003bc0 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e015      	b.n	8003c02 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0309 	and.w	r3, r3, #9
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e00a      	b.n	8003c00 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003c7a:	f7ff fd4d 	bl	8003718 <HAL_GetTick>
 8003c7e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06b      	b.n	8003d62 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d008      	beq.n	8003ca8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e05c      	b.n	8003d62 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0204 	orr.w	r2, r2, #4
 8003cb6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2205      	movs	r2, #5
 8003cbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003cc0:	e020      	b.n	8003d04 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003cc2:	f7ff fd29 	bl	8003718 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d919      	bls.n	8003d04 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e02e      	b.n	8003d62 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0d7      	beq.n	8003cc2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0202 	orr.w	r2, r2, #2
 8003d20:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2204      	movs	r2, #4
 8003d26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003d32:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e019      	b.n	8003db0 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00e      	b.n	8003db0 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e053      	b.n	8003e76 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe fbdc 	bl	80025a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6851      	ldr	r1, [r2, #4]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	69d2      	ldr	r2, [r2, #28]
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e16:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6891      	ldr	r1, [r2, #8]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6992      	ldr	r2, [r2, #24]
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d1      	ldr	r1, [r2, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	051a      	lsls	r2, r3, #20
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	055b      	lsls	r3, r3, #21
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d026      	beq.n	8003eee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d021      	beq.n	8003eee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d026      	beq.n	8003f46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d021      	beq.n	8003f46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2220      	movs	r2, #32
 8003f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d026      	beq.n	8003f9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d021      	beq.n	8003f9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f853 	bl	8004076 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01f      	beq.n	8004024 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01f      	beq.n	800406e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2210      	movs	r2, #16
 800404e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f80e 	bl	800408a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_DMA2D_ConfigLayer+0x20>
 80040bc:	2302      	movs	r3, #2
 80040be:	e084      	b.n	80041ca <HAL_DMA2D_ConfigLayer+0x12a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	3328      	adds	r3, #40	@ 0x28
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80040f4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004100:	4b35      	ldr	r3, [pc, #212]	@ (80041d8 <HAL_DMA2D_ConfigLayer+0x138>)
 8004102:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b0a      	cmp	r3, #10
 800410a:	d003      	beq.n	8004114 <HAL_DMA2D_ConfigLayer+0x74>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b09      	cmp	r3, #9
 8004112:	d107      	bne.n	8004124 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e005      	b.n	8004130 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d120      	bne.n	8004178 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	ea02 0103 	and.w	r1, r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	430a      	orrs	r2, r1
 800414c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b0a      	cmp	r3, #10
 800415e:	d003      	beq.n	8004168 <HAL_DMA2D_ConfigLayer+0xc8>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b09      	cmp	r3, #9
 8004166:	d127      	bne.n	80041b8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
 8004176:	e01f      	b.n	80041b8 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	43db      	mvns	r3, r3
 8004182:	ea02 0103 	and.w	r1, r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	430a      	orrs	r2, r1
 800418e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b0a      	cmp	r3, #10
 80041a0:	d003      	beq.n	80041aa <HAL_DMA2D_ConfigLayer+0x10a>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d106      	bne.n	80041b8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80041b6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	ff33000f 	.word	0xff33000f

080041dc <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80041f4:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	00da      	lsls	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	220e      	movs	r2, #14
 8004216:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 021f 	bic.w	r2, r2, #31
 800422a:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6912      	ldr	r2, [r2, #16]
 8004236:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	220e      	movs	r2, #14
 8004240:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 021f 	bic.w	r2, r2, #31
 8004254:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6912      	ldr	r2, [r2, #16]
 8004260:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	220e      	movs	r2, #14
 800426a:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800427e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004292:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d007      	beq.n	80042ae <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d003      	beq.n	80042ae <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10a      	bne.n	80042c4 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 80042c2:	e02c      	b.n	800431e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d007      	beq.n	80042e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d003      	beq.n	80042e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d10a      	bne.n	80042fa <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2210      	movs	r2, #16
 80042f4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 80042f8:	e011      	b.n	800431e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b07      	cmp	r3, #7
 8004300:	d003      	beq.n	800430a <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8004306:	2b08      	cmp	r3, #8
 8004308:	d109      	bne.n	800431e <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 020f 	bic.w	r2, r2, #15
 800432e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020f 	bic.w	r2, r2, #15
 8004342:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6952      	ldr	r2, [r2, #20]
 800434e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6952      	ldr	r2, [r2, #20]
 800435a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004384:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	075a      	lsls	r2, r3, #29
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80043b0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	031a      	lsls	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	021a      	lsls	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0c3      	b.n	800458c <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7e5b      	ldrb	r3, [r3, #25]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe f8ee 	bl	80025f0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2203      	movs	r2, #3
 8004418:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800442a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800442e:	2002      	movs	r0, #2
 8004430:	f7ff f97e 	bl	8003730 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b54      	ldr	r3, [pc, #336]	@ (8004594 <HAL_DSI_Init+0x1a4>)
 8004442:	400b      	ands	r3, r1
 8004444:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800445c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004464:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff feb3 	bl	80041dc <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8004476:	6839      	ldr	r1, [r7, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff76 	bl	800436a <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7ff f942 	bl	8003730 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ac:	f7ff f934 	bl	8003718 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80044b4:	f7ff f930 	bl	8003718 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	@ 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e062      	b.n	800458c <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ee      	beq.n	80044b4 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0206 	orr.w	r2, r2, #6
 80044e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0203 	bic.w	r2, r2, #3
 80044fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0203 	bic.w	r2, r2, #3
 8004528:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004550:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6899      	ldr	r1, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	e0000003 	.word	0xe0000003

08004598 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7e1b      	ldrb	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_DSI_ConfigErrorMonitor+0x16>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0ba      	b.n	8004724 <HAL_DSI_ConfigErrorMonitor+0x18c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80045e8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80045ec:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800460a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0202 	orr.w	r2, r2, #2
 8004646:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 020c 	orr.w	r2, r2, #12
 8004664:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0210 	orr.w	r2, r2, #16
 8004682:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80046fa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004718:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8b8 	bl	80048d8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2202      	movs	r2, #2
 800478e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8aa 	bl	80048ec <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8097 	beq.w	80048d0 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047aa:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047c2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f043 0208 	orr.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f043 0210 	orr.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f818 	bl	8004900 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7e1b      	ldrb	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_DSI_SetGenericVCID+0x16>
 8004926:	2302      	movs	r3, #2
 8004928:	e019      	b.n	800495e <HAL_DSI_SetGenericVCID+0x4a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7e1b      	ldrb	r3, [r3, #24]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800497c:	2302      	movs	r3, #2
 800497e:	e0c5      	b.n	8004b0c <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0203 	bic.w	r2, r2, #3
 80049cc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68d9      	ldr	r1, [r3, #12]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0207 	bic.w	r2, r2, #7
 80049ee:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6959      	ldr	r1, [r3, #20]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 020f 	bic.w	r2, r2, #15
 8004a1c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6919      	ldr	r1, [r3, #16]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 020e 	bic.w	r2, r2, #14
 8004a40:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005a      	lsls	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	0c1b      	lsrs	r3, r3, #16
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004a8e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0202 	orr.w	r2, r2, #2
 8004b00:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_DSI_ConfigCommand+0x16>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e049      	b.n	8004bc2 <HAL_DSI_ConfigCommand+0xaa>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <HAL_DSI_ConfigCommand+0xb8>)
 8004b40:	400b      	ands	r3, r1
 8004b42:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b52:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004b58:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004b5e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004b64:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004b6a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004b70:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004b76:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004b7c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004b82:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004b88:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004b8e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0202 	bic.w	r2, r2, #2
 8004ba6:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	fef080ff 	.word	0xfef080ff

08004bd4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7e1b      	ldrb	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_DSI_ConfigFlowControl+0x16>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e016      	b.n	8004c18 <HAL_DSI_ConfigFlowControl+0x44>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7e1b      	ldrb	r3, [r3, #24]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_DSI_ConfigPhyTimer+0x16>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e084      	b.n	8004d44 <HAL_DSI_ConfigPhyTimer+0x120>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	441a      	add	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	18ca      	adds	r2, r1, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	441a      	add	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bf38      	it	cc
 8004c7e:	4613      	movcc	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8004c92:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	041a      	lsls	r2, r3, #16
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8004cc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cf2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004d20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	021a      	lsls	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7e1b      	ldrb	r3, [r3, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0b4      	b.n	8004ed0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004d7a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	041a      	lsls	r2, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6a1a      	ldr	r2, [r3, #32]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e06e      	b.n	8004fd2 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fd fbff 	bl	80026f8 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6819      	ldr	r1, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7f1b      	ldrb	r3, [r3, #28]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d12c      	bne.n	8004f76 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004f2a:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004f30:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004f36:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f42:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4c:	d10b      	bne.n	8004f66 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0202 	orr.w	r2, r2, #2
 8004f74:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6892      	ldr	r2, [r2, #8]
 8004f9a:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68d2      	ldr	r2, [r2, #12]
 8004fa4:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6912      	ldr	r2, [r2, #16]
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6952      	ldr	r2, [r2, #20]
 8004fb8:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6992      	ldr	r2, [r2, #24]
 8004fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }
  /* Return function status */
  return status;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b08b      	sub	sp, #44	@ 0x2c
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <HAL_GFXMMU_ConfigLut+0x2a>
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005004:	d903      	bls.n	800500e <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800500c:	e032      	b.n	8005074 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	3301      	adds	r3, #1
 8005032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 800503c:	e016      	b.n	800506c <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	3304      	adds	r3, #4
 800504a:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	3304      	adds	r3, #4
 8005058:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	3308      	adds	r3, #8
 800505e:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3308      	adds	r3, #8
 8005064:	617b      	str	r3, [r7, #20]
      current_line++;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3301      	adds	r3, #1
 800506a:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3e4      	bcc.n	800503e <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8005074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005078:	4618      	mov	r0, r3
 800507a:	372c      	adds	r7, #44	@ 0x2c
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f804 	bl	80050d0 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80050f6:	e1ba      	b.n	800546e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	2101      	movs	r1, #1
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 81aa 	beq.w	8005468 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a55      	ldr	r2, [pc, #340]	@ (800526c <HAL_GPIO_Init+0x188>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d15d      	bne.n	80051d8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005122:	2201      	movs	r2, #1
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	4013      	ands	r3, r2
 8005130:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0201 	and.w	r2, r3, #1
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	4313      	orrs	r3, r2
 8005144:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800514c:	4a48      	ldr	r2, [pc, #288]	@ (8005270 <HAL_GPIO_Init+0x18c>)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005154:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005156:	4a46      	ldr	r2, [pc, #280]	@ (8005270 <HAL_GPIO_Init+0x18c>)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	08da      	lsrs	r2, r3, #3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3208      	adds	r2, #8
 800516a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	220f      	movs	r2, #15
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	4013      	ands	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	220b      	movs	r2, #11
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	4313      	orrs	r3, r2
 8005198:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	08da      	lsrs	r2, r3, #3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3208      	adds	r2, #8
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	2203      	movs	r2, #3
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	4013      	ands	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2202      	movs	r2, #2
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e067      	b.n	80052a8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x104>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b12      	cmp	r3, #18
 80051e6:	d145      	bne.n	8005274 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	4013      	ands	r3, r2
 800520a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	4313      	orrs	r3, r2
 8005224:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	08da      	lsrs	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3208      	adds	r2, #8
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2203      	movs	r2, #3
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	4013      	ands	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0203 	and.w	r2, r3, #3
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	4313      	orrs	r3, r2
 8005260:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e01e      	b.n	80052a8 <HAL_GPIO_Init+0x1c4>
 800526a:	bf00      	nop
 800526c:	46020000 	.word	0x46020000
 8005270:	0800e324 	.word	0x0800e324
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	4013      	ands	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 0203 	and.w	r2, r3, #3
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d00b      	beq.n	80052c8 <HAL_GPIO_Init+0x1e4>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d007      	beq.n	80052c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052bc:	2b11      	cmp	r3, #17
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b12      	cmp	r3, #18
 80052c6:	d130      	bne.n	800532a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2203      	movs	r2, #3
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	4013      	ands	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80052fe:	2201      	movs	r2, #1
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	4013      	ands	r3, r2
 800530c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0201 	and.w	r2, r3, #1
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	4313      	orrs	r3, r2
 8005322:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d017      	beq.n	8005362 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2203      	movs	r2, #3
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	4013      	ands	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d07c      	beq.n	8005468 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800536e:	4a47      	ldr	r2, [pc, #284]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	3318      	adds	r3, #24
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	220f      	movs	r2, #15
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	4013      	ands	r3, r2
 8005390:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0a9a      	lsrs	r2, r3, #10
 8005396:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <HAL_GPIO_Init+0x3ac>)
 8005398:	4013      	ands	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	f002 0203 	and.w	r2, r2, #3
 80053a0:	00d2      	lsls	r2, r2, #3
 80053a2:	4093      	lsls	r3, r2
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80053aa:	4938      	ldr	r1, [pc, #224]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	3318      	adds	r3, #24
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80053b8:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80053dc:	4a2b      	ldr	r2, [pc, #172]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80053e2:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005406:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800540c:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 800540e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005412:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	43db      	mvns	r3, r3
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	4013      	ands	r3, r2
 800541c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005432:	4a16      	ldr	r2, [pc, #88]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800543a:	4b14      	ldr	r3, [pc, #80]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 800543c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005440:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	43db      	mvns	r3, r3
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	4013      	ands	r3, r2
 800544a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005460:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_GPIO_Init+0x3a8>)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3301      	adds	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	f47f ae3d 	bne.w	80050f8 <HAL_GPIO_Init+0x14>
  }
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	3724      	adds	r7, #36	@ 0x24
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	46022000 	.word	0x46022000
 8005490:	002f7f7f 	.word	0x002f7f7f

08005494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
 80054a0:	4613      	mov	r3, r2
 80054a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054a4:	787b      	ldrb	r3, [r7, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80054b0:	e002      	b.n	80054b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80054b2:	887a      	ldrh	r2, [r7, #2]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e01c      	b.n	8005510 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	795b      	ldrb	r3, [r3, #5]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd f932 	bl	8002748 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	791b      	ldrb	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_GPU2D_Init+0x32>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e00c      	b.n	8005510 <HAL_GPU2D_Init+0x4c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	33f8      	adds	r3, #248	@ 0xf8
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	33f8      	adds	r3, #248	@ 0xf8
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f80f 	bl	800557a <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f80f 	bl	8005590 <HAL_GPU2D_ErrorCallback>
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <HAL_GPU2D_ErrorCallback+0x8>

0800559c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e08d      	b.n	80056ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd f900 	bl	80027c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	@ 0x24
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	e006      	b.n	8005624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d108      	bne.n	800563e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	e007      	b.n	800564e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800564c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800565c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69d9      	ldr	r1, [r3, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	817b      	strh	r3, [r7, #10]
 80056e6:	460b      	mov	r3, r1
 80056e8:	813b      	strh	r3, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	f040 80f9 	bne.w	80058ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_I2C_Mem_Write+0x34>
 8005702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0ed      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2C_Mem_Write+0x4e>
 800571e:	2302      	movs	r3, #2
 8005720:	e0e6      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800572a:	f7fd fff5 	bl	8003718 <HAL_GetTick>
 800572e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2319      	movs	r3, #25
 8005736:	2201      	movs	r2, #1
 8005738:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fac3 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0d1      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2221      	movs	r2, #33	@ 0x21
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2240      	movs	r2, #64	@ 0x40
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800576c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005774:	88f8      	ldrh	r0, [r7, #6]
 8005776:	893a      	ldrh	r2, [r7, #8]
 8005778:	8979      	ldrh	r1, [r7, #10]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4603      	mov	r3, r0
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f9d3 	bl	8005b30 <I2C_RequestMemoryWrite>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0a9      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2bff      	cmp	r3, #255	@ 0xff
 80057a4:	d90e      	bls.n	80057c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	22ff      	movs	r2, #255	@ 0xff
 80057aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	8979      	ldrh	r1, [r7, #10]
 80057b4:	2300      	movs	r3, #0
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fc3d 	bl	800603c <I2C_TransferConfig>
 80057c2:	e00f      	b.n	80057e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	8979      	ldrh	r1, [r7, #10]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fc2c 	bl	800603c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fabc 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e07b      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d034      	beq.n	800589c <HAL_I2C_Mem_Write+0x1c8>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d130      	bne.n	800589c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fa3f 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e04d      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2bff      	cmp	r3, #255	@ 0xff
 800585c:	d90e      	bls.n	800587c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22ff      	movs	r2, #255	@ 0xff
 8005862:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fbe1 	bl	800603c <I2C_TransferConfig>
 800587a:	e00f      	b.n	800589c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588a:	b2da      	uxtb	r2, r3
 800588c:	8979      	ldrh	r1, [r7, #10]
 800588e:	2300      	movs	r3, #0
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fbd0 	bl	800603c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19e      	bne.n	80057e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 faa2 	bl	8005df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e01a      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2220      	movs	r2, #32
 80058c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <HAL_I2C_Mem_Write+0x224>)
 80058ce:	400b      	ands	r3, r1
 80058d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	fe00e800 	.word	0xfe00e800

080058fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	817b      	strh	r3, [r7, #10]
 800590e:	460b      	mov	r3, r1
 8005910:	813b      	strh	r3, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	f040 80fd 	bne.w	8005b1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_I2C_Mem_Read+0x34>
 800592a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005936:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0f1      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_I2C_Mem_Read+0x4e>
 8005946:	2302      	movs	r3, #2
 8005948:	e0ea      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005952:	f7fd fee1 	bl	8003718 <HAL_GetTick>
 8005956:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2319      	movs	r3, #25
 800595e:	2201      	movs	r2, #1
 8005960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f9af 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0d5      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2222      	movs	r2, #34	@ 0x22
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2240      	movs	r2, #64	@ 0x40
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800599c:	88f8      	ldrh	r0, [r7, #6]
 800599e:	893a      	ldrh	r2, [r7, #8]
 80059a0:	8979      	ldrh	r1, [r7, #10]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	4603      	mov	r3, r0
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f913 	bl	8005bd8 <I2C_RequestMemoryRead>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0ad      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2bff      	cmp	r3, #255	@ 0xff
 80059cc:	d90e      	bls.n	80059ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	22ff      	movs	r2, #255	@ 0xff
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	8979      	ldrh	r1, [r7, #10]
 80059dc:	4b52      	ldr	r3, [pc, #328]	@ (8005b28 <HAL_I2C_Mem_Read+0x22c>)
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fb29 	bl	800603c <I2C_TransferConfig>
 80059ea:	e00f      	b.n	8005a0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	8979      	ldrh	r1, [r7, #10]
 80059fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005b28 <HAL_I2C_Mem_Read+0x22c>)
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fb18 	bl	800603c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	2200      	movs	r2, #0
 8005a14:	2104      	movs	r1, #4
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f956 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07c      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d034      	beq.n	8005acc <HAL_I2C_Mem_Read+0x1d0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d130      	bne.n	8005acc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	2200      	movs	r2, #0
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f927 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e04d      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2bff      	cmp	r3, #255	@ 0xff
 8005a8c:	d90e      	bls.n	8005aac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22ff      	movs	r2, #255	@ 0xff
 8005a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	8979      	ldrh	r1, [r7, #10]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fac9 	bl	800603c <I2C_TransferConfig>
 8005aaa:	e00f      	b.n	8005acc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	8979      	ldrh	r1, [r7, #10]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fab8 	bl	800603c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d19a      	bne.n	8005a0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f98a 	bl	8005df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e01a      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2220      	movs	r2, #32
 8005af0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6859      	ldr	r1, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_I2C_Mem_Read+0x230>)
 8005afe:	400b      	ands	r3, r1
 8005b00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e000      	b.n	8005b20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
  }
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	80002400 	.word	0x80002400
 8005b2c:	fe00e800 	.word	0xfe00e800

08005b30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	460b      	mov	r3, r1
 8005b44:	813b      	strh	r3, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	8979      	ldrh	r1, [r7, #10]
 8005b50:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <I2C_RequestMemoryWrite+0xa4>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fa6f 	bl	800603c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	69b9      	ldr	r1, [r7, #24]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f8ff 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e02c      	b.n	8005bcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b78:	893b      	ldrh	r3, [r7, #8]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b82:	e015      	b.n	8005bb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	69b9      	ldr	r1, [r7, #24]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f8e5 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e012      	b.n	8005bcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2180      	movs	r1, #128	@ 0x80
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f884 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	80002000 	.word	0x80002000

08005bd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	817b      	strh	r3, [r7, #10]
 8005bea:	460b      	mov	r3, r1
 8005bec:	813b      	strh	r3, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	8979      	ldrh	r1, [r7, #10]
 8005bf8:	4b20      	ldr	r3, [pc, #128]	@ (8005c7c <I2C_RequestMemoryRead+0xa4>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fa1c 	bl	800603c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	69b9      	ldr	r1, [r7, #24]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f8ac 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e02c      	b.n	8005c72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d105      	bne.n	8005c2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1e:	893b      	ldrh	r3, [r7, #8]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c28:	e015      	b.n	8005c56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	69b9      	ldr	r1, [r7, #24]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f892 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e012      	b.n	8005c72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2140      	movs	r1, #64	@ 0x40
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f831 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	80002000 	.word	0x80002000

08005c80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d103      	bne.n	8005c9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d007      	beq.n	8005cbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	619a      	str	r2, [r3, #24]
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd8:	e031      	b.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d02d      	beq.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fd fd19 	bl	8003718 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d122      	bne.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4013      	ands	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d113      	bne.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00f      	b.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d0be      	beq.n	8005cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d72:	e033      	b.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f87f 	bl	8005e7c <I2C_IsErrorOccurred>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e031      	b.n	8005dec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d025      	beq.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fd fcc2 	bl	8003718 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11a      	bne.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d013      	beq.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e007      	b.n	8005dec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d1c4      	bne.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e00:	e02f      	b.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f838 	bl	8005e7c <I2C_IsErrorOccurred>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e02d      	b.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fd fc7f 	bl	8003718 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11a      	bne.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d013      	beq.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e007      	b.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d1c8      	bne.n	8005e02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	@ 0x28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d068      	beq.n	8005f7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2210      	movs	r2, #16
 8005eae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eb0:	e049      	b.n	8005f46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d045      	beq.n	8005f46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fd fc2d 	bl	8003718 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <I2C_IsErrorOccurred+0x54>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d13a      	bne.n	8005f46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef2:	d121      	bne.n	8005f38 <I2C_IsErrorOccurred+0xbc>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005efa:	d01d      	beq.n	8005f38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005efc:	7cfb      	ldrb	r3, [r7, #19]
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d01a      	beq.n	8005f38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f12:	f7fd fc01 	bl	8003718 <HAL_GetTick>
 8005f16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f18:	e00e      	b.n	8005f38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f1a:	f7fd fbfd 	bl	8003718 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b19      	cmp	r3, #25
 8005f26:	d907      	bls.n	8005f38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f043 0320 	orr.w	r3, r3, #32
 8005f2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f36:	e006      	b.n	8005f46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d1e9      	bne.n	8005f1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d003      	beq.n	8005f5c <I2C_IsErrorOccurred+0xe0>
 8005f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0aa      	beq.n	8005eb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	f043 0304 	orr.w	r3, r3, #4
 8005f72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	f043 0302 	orr.w	r3, r3, #2
 8005fd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01c      	beq.n	800602a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff fe45 	bl	8005c80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6859      	ldr	r1, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <I2C_IsErrorOccurred+0x1bc>)
 8006002:	400b      	ands	r3, r1
 8006004:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800602a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	@ 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	fe00e800 	.word	0xfe00e800

0800603c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	817b      	strh	r3, [r7, #10]
 800604a:	4613      	mov	r3, r2
 800604c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006054:	7a7b      	ldrb	r3, [r7, #9]
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800605c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	4313      	orrs	r3, r2
 8006066:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800606a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	0d5b      	lsrs	r3, r3, #21
 8006076:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800607a:	4b08      	ldr	r3, [pc, #32]	@ (800609c <I2C_TransferConfig+0x60>)
 800607c:	430b      	orrs	r3, r1
 800607e:	43db      	mvns	r3, r3
 8006080:	ea02 0103 	and.w	r1, r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	03ff63ff 	.word	0x03ff63ff

080060a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d138      	bne.n	8006128 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e032      	b.n	800612a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	@ 0x24
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	e000      	b.n	800612a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
  }
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b20      	cmp	r3, #32
 800614a:	d139      	bne.n	80061c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006156:	2302      	movs	r3, #2
 8006158:	e033      	b.n	80061c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2224      	movs	r2, #36	@ 0x24
 8006166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006188:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e000      	b.n	80061c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
  }
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80061d4:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_ICACHE_Enable+0x1c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <HAL_ICACHE_Enable+0x1c>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40030400 	.word	0x40030400

080061f0 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80061fa:	4b14      	ldr	r3, [pc, #80]	@ (800624c <HAL_ICACHE_Disable+0x5c>)
 80061fc:	2202      	movs	r2, #2
 80061fe:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006200:	4b12      	ldr	r3, [pc, #72]	@ (800624c <HAL_ICACHE_Disable+0x5c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a11      	ldr	r2, [pc, #68]	@ (800624c <HAL_ICACHE_Disable+0x5c>)
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800620c:	f7fd fa84 	bl	8003718 <HAL_GetTick>
 8006210:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006212:	e00f      	b.n	8006234 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8006214:	f7fd fa80 	bl	8003718 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d908      	bls.n	8006234 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006222:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <HAL_ICACHE_Disable+0x5c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	71fb      	strb	r3, [r7, #7]
        break;
 8006232:	e005      	b.n	8006240 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006234:	4b05      	ldr	r3, [pc, #20]	@ (800624c <HAL_ICACHE_Disable+0x5c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e9      	bne.n	8006214 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8006240:	79fb      	ldrb	r3, [r7, #7]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40030400 	.word	0x40030400

08006250 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800625e:	4b22      	ldr	r3, [pc, #136]	@ (80062e8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
 800626e:	e034      	b.n	80062da <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	009a      	lsls	r2, r3, #2
 8006274:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8006276:	4413      	add	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
 800628a:	e026      	b.n	80062da <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006298:	4013      	ands	r3, r2
 800629a:	b2db      	uxtb	r3, r3
 800629c:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	425b      	negs	r3, r3
 80062aa:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80062ac:	401a      	ands	r2, r3
 80062ae:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	025a      	lsls	r2, r3, #9
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80062c8:	4313      	orrs	r3, r2
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40030400 	.word	0x40030400
 80062ec:	40030420 	.word	0x40030420
 80062f0:	07ff0000 	.word	0x07ff0000

080062f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0bf      	b.n	8006486 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fc fd9a 	bl	8002e54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006336:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800634c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6899      	ldr	r1, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b4a      	ldr	r3, [pc, #296]	@ (8006490 <HAL_LTDC_Init+0x19c>)
 8006368:	400b      	ands	r3, r1
 800636a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68d9      	ldr	r1, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b3e      	ldr	r3, [pc, #248]	@ (8006490 <HAL_LTDC_Init+0x19c>)
 8006396:	400b      	ands	r3, r1
 8006398:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68d9      	ldr	r1, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6919      	ldr	r1, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b33      	ldr	r3, [pc, #204]	@ (8006490 <HAL_LTDC_Init+0x19c>)
 80063c4:	400b      	ands	r3, r1
 80063c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6919      	ldr	r1, [r3, #16]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6959      	ldr	r1, [r3, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <HAL_LTDC_Init+0x19c>)
 80063f2:	400b      	ands	r3, r1
 80063f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6959      	ldr	r1, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0206 	orr.w	r2, r2, #6
 8006462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	f000f800 	.word	0xf000f800

08006494 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d023      	beq.n	80064fe <HAL_LTDC_IRQHandler+0x6a>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01e      	beq.n	80064fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0204 	bic.w	r2, r2, #4
 80064ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2204      	movs	r2, #4
 80064d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2204      	movs	r2, #4
 80064ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f86f 	bl	80065dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d023      	beq.n	8006550 <HAL_LTDC_IRQHandler+0xbc>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01e      	beq.n	8006550 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0202 	bic.w	r2, r2, #2
 8006520:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2202      	movs	r2, #2
 8006528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006530:	f043 0202 	orr.w	r2, r3, #2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f846 	bl	80065dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <HAL_LTDC_IRQHandler+0xfe>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f82f 	bl	80065f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <HAL_LTDC_IRQHandler+0x140>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0208 	bic.w	r2, r2, #8
 80065b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2208      	movs	r2, #8
 80065bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f818 	bl	8006604 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_LTDC_ConfigLayer+0x1a>
 800662e:	2302      	movs	r3, #2
 8006630:	e02c      	b.n	800668c <HAL_LTDC_ConfigLayer+0x74>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2202      	movs	r2, #2
 800663e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2134      	movs	r1, #52	@ 0x34
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4614      	mov	r4, r2
 8006656:	461d      	mov	r5, r3
 8006658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f811 	bl	8006694 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bdb0      	pop	{r4, r5, r7, pc}

08006694 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	@ 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b0:	4413      	add	r3, r2
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	01db      	lsls	r3, r3, #7
 80066c0:	4413      	add	r3, r2
 80066c2:	3384      	adds	r3, #132	@ 0x84
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	4611      	mov	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	01d2      	lsls	r2, r2, #7
 80066d0:	440a      	add	r2, r1
 80066d2:	3284      	adds	r2, #132	@ 0x84
 80066d4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80066d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	440b      	add	r3, r1
 80066fa:	3384      	adds	r3, #132	@ 0x84
 80066fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006702:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006712:	4413      	add	r3, r2
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	01db      	lsls	r3, r3, #7
 8006722:	4413      	add	r3, r2
 8006724:	3384      	adds	r3, #132	@ 0x84
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	4611      	mov	r1, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	01d2      	lsls	r2, r2, #7
 8006732:	440a      	add	r2, r1
 8006734:	3284      	adds	r2, #132	@ 0x84
 8006736:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800673a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800674a:	4413      	add	r3, r2
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	01db      	lsls	r3, r3, #7
 8006758:	440b      	add	r3, r1
 800675a:	3384      	adds	r3, #132	@ 0x84
 800675c:	4619      	mov	r1, r3
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	01db      	lsls	r3, r3, #7
 800676e:	4413      	add	r3, r2
 8006770:	3384      	adds	r3, #132	@ 0x84
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	4611      	mov	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	01d2      	lsls	r2, r2, #7
 800677e:	440a      	add	r2, r1
 8006780:	3284      	adds	r2, #132	@ 0x84
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	01db      	lsls	r3, r3, #7
 8006792:	4413      	add	r3, r2
 8006794:	3384      	adds	r3, #132	@ 0x84
 8006796:	461a      	mov	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	061b      	lsls	r3, r3, #24
 80067b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	01db      	lsls	r3, r3, #7
 80067c4:	4413      	add	r3, r2
 80067c6:	3384      	adds	r3, #132	@ 0x84
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	4413      	add	r3, r2
 80067d6:	3384      	adds	r3, #132	@ 0x84
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067e4:	461a      	mov	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	431a      	orrs	r2, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	01db      	lsls	r3, r3, #7
 80067f8:	440b      	add	r3, r1
 80067fa:	3384      	adds	r3, #132	@ 0x84
 80067fc:	4619      	mov	r1, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	01db      	lsls	r3, r3, #7
 800680e:	4413      	add	r3, r2
 8006810:	3384      	adds	r3, #132	@ 0x84
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	4611      	mov	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	01d2      	lsls	r2, r2, #7
 800681e:	440a      	add	r2, r1
 8006820:	3284      	adds	r2, #132	@ 0x84
 8006822:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006826:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	4413      	add	r3, r2
 8006834:	3384      	adds	r3, #132	@ 0x84
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	01db      	lsls	r3, r3, #7
 8006848:	4413      	add	r3, r2
 800684a:	3384      	adds	r3, #132	@ 0x84
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	4611      	mov	r1, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	01d2      	lsls	r2, r2, #7
 8006858:	440a      	add	r2, r1
 800685a:	3284      	adds	r2, #132	@ 0x84
 800685c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	6809      	ldr	r1, [r1, #0]
 8006872:	4608      	mov	r0, r1
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	01c9      	lsls	r1, r1, #7
 8006878:	4401      	add	r1, r0
 800687a:	3184      	adds	r1, #132	@ 0x84
 800687c:	4313      	orrs	r3, r2
 800687e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	01db      	lsls	r3, r3, #7
 800688a:	4413      	add	r3, r2
 800688c:	3384      	adds	r3, #132	@ 0x84
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	01db      	lsls	r3, r3, #7
 800689a:	4413      	add	r3, r2
 800689c:	3384      	adds	r3, #132	@ 0x84
 800689e:	461a      	mov	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	01db      	lsls	r3, r3, #7
 80068ae:	4413      	add	r3, r2
 80068b0:	3384      	adds	r3, #132	@ 0x84
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068c2:	2304      	movs	r3, #4
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e01b      	b.n	8006900 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068d0:	2303      	movs	r3, #3
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e014      	b.n	8006900 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d00b      	beq.n	80068f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d007      	beq.n	80068f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d003      	beq.n	80068f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	d102      	bne.n	80068fc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80068f6:	2302      	movs	r3, #2
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	e001      	b.n	8006900 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80068fc:	2301      	movs	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	01db      	lsls	r3, r3, #7
 800690a:	4413      	add	r3, r2
 800690c:	3384      	adds	r3, #132	@ 0x84
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	4611      	mov	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	01d2      	lsls	r2, r2, #7
 800691a:	440a      	add	r2, r1
 800691c:	3284      	adds	r2, #132	@ 0x84
 800691e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1acb      	subs	r3, r1, r3
 800693a:	69f9      	ldr	r1, [r7, #28]
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6809      	ldr	r1, [r1, #0]
 8006946:	4608      	mov	r0, r1
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	01c9      	lsls	r1, r1, #7
 800694c:	4401      	add	r1, r0
 800694e:	3184      	adds	r1, #132	@ 0x84
 8006950:	4313      	orrs	r3, r2
 8006952:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	01db      	lsls	r3, r3, #7
 800695e:	4413      	add	r3, r2
 8006960:	3384      	adds	r3, #132	@ 0x84
 8006962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	4611      	mov	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	01d2      	lsls	r2, r2, #7
 800696e:	440a      	add	r2, r1
 8006970:	3284      	adds	r2, #132	@ 0x84
 8006972:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	01db      	lsls	r3, r3, #7
 8006986:	4413      	add	r3, r2
 8006988:	3384      	adds	r3, #132	@ 0x84
 800698a:	461a      	mov	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	01db      	lsls	r3, r3, #7
 800699c:	4413      	add	r3, r2
 800699e:	3384      	adds	r3, #132	@ 0x84
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	4611      	mov	r1, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	01d2      	lsls	r2, r2, #7
 80069ac:	440a      	add	r2, r1
 80069ae:	3284      	adds	r2, #132	@ 0x84
 80069b0:	f043 0301 	orr.w	r3, r3, #1
 80069b4:	6013      	str	r3, [r2, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3724      	adds	r7, #36	@ 0x24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e141      	b.n	8006c60 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f947 	bl	8006c74 <MDF_GetHandleNumberFromInstance>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a86      	ldr	r2, [pc, #536]	@ (8006c04 <HAL_MDF_Init+0x240>)
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e133      	b.n	8006c60 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fb fcfb 	bl	80023f4 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80069fe:	4b82      	ldr	r3, [pc, #520]	@ (8006c08 <HAL_MDF_Init+0x244>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11d      	bne.n	8006a42 <HAL_MDF_Init+0x7e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a80      	ldr	r2, [pc, #512]	@ (8006c0c <HAL_MDF_Init+0x248>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d023      	beq.n	8006a58 <HAL_MDF_Init+0x94>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7e      	ldr	r2, [pc, #504]	@ (8006c10 <HAL_MDF_Init+0x24c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01e      	beq.n	8006a58 <HAL_MDF_Init+0x94>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c14 <HAL_MDF_Init+0x250>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d019      	beq.n	8006a58 <HAL_MDF_Init+0x94>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7b      	ldr	r2, [pc, #492]	@ (8006c18 <HAL_MDF_Init+0x254>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d014      	beq.n	8006a58 <HAL_MDF_Init+0x94>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a7a      	ldr	r2, [pc, #488]	@ (8006c1c <HAL_MDF_Init+0x258>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <HAL_MDF_Init+0x94>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a78      	ldr	r2, [pc, #480]	@ (8006c20 <HAL_MDF_Init+0x25c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00a      	beq.n	8006a58 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006a42:	4b78      	ldr	r3, [pc, #480]	@ (8006c24 <HAL_MDF_Init+0x260>)
 8006a44:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f040 8090 	bne.w	8006b6c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a75      	ldr	r2, [pc, #468]	@ (8006c28 <HAL_MDF_Init+0x264>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f040 808a 	bne.w	8006b6c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a72      	ldr	r2, [pc, #456]	@ (8006c28 <HAL_MDF_Init+0x264>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_MDF_Init+0xa2>
 8006a62:	4b72      	ldr	r3, [pc, #456]	@ (8006c2c <HAL_MDF_Init+0x268>)
 8006a64:	e000      	b.n	8006a68 <HAL_MDF_Init+0xa4>
 8006a66:	4b72      	ldr	r3, [pc, #456]	@ (8006c30 <HAL_MDF_Init+0x26c>)
 8006a68:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da02      	bge.n	8006a78 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e079      	b.n	8006b6c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a63      	ldr	r2, [pc, #396]	@ (8006c0c <HAL_MDF_Init+0x248>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_MDF_Init+0xf0>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a62      	ldr	r2, [pc, #392]	@ (8006c10 <HAL_MDF_Init+0x24c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_MDF_Init+0xf0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a60      	ldr	r2, [pc, #384]	@ (8006c14 <HAL_MDF_Init+0x250>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_MDF_Init+0xf0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8006c18 <HAL_MDF_Init+0x254>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_MDF_Init+0xf0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a5d      	ldr	r2, [pc, #372]	@ (8006c1c <HAL_MDF_Init+0x258>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_MDF_Init+0xf0>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a5c      	ldr	r2, [pc, #368]	@ (8006c20 <HAL_MDF_Init+0x25c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	061b      	lsls	r3, r3, #24
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7b1b      	ldrb	r3, [r3, #12]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d137      	bne.n	8006b60 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006b00:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006b08:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7e1b      	ldrb	r3, [r3, #24]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d123      	bne.n	8006b60 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c0c <HAL_MDF_Init+0x248>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d012      	beq.n	8006b48 <HAL_MDF_Init+0x184>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a3a      	ldr	r2, [pc, #232]	@ (8006c10 <HAL_MDF_Init+0x24c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00d      	beq.n	8006b48 <HAL_MDF_Init+0x184>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a38      	ldr	r2, [pc, #224]	@ (8006c14 <HAL_MDF_Init+0x250>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d008      	beq.n	8006b48 <HAL_MDF_Init+0x184>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a37      	ldr	r2, [pc, #220]	@ (8006c18 <HAL_MDF_Init+0x254>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <HAL_MDF_Init+0x184>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a35      	ldr	r2, [pc, #212]	@ (8006c1c <HAL_MDF_Init+0x258>)
 8006b46:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006b54:	430b      	orrs	r3, r1
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f043 0210 	orr.w	r2, r3, #16
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f043 0201 	orr.w	r2, r3, #1
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d128      	bne.n	8006bc4 <HAL_MDF_Init+0x200>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d123      	bne.n	8006bc4 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da02      	bge.n	8006b8c <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
 8006b8a:	e01b      	b.n	8006bc4 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6819      	ldr	r1, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006ba4:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d14a      	bne.n	8006c60 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 021f 	bic.w	r2, r2, #31
 8006bd8:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8006c28 <HAL_MDF_Init+0x264>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d11e      	bne.n	8006c34 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <HAL_MDF_Init+0x260>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	4a09      	ldr	r2, [pc, #36]	@ (8006c24 <HAL_MDF_Init+0x260>)
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e01d      	b.n	8006c3e <HAL_MDF_Init+0x27a>
 8006c02:	bf00      	nop
 8006c04:	2000147c 	.word	0x2000147c
 8006c08:	20001474 	.word	0x20001474
 8006c0c:	40025080 	.word	0x40025080
 8006c10:	40025100 	.word	0x40025100
 8006c14:	40025180 	.word	0x40025180
 8006c18:	40025200 	.word	0x40025200
 8006c1c:	40025280 	.word	0x40025280
 8006c20:	40025300 	.word	0x40025300
 8006c24:	20001478 	.word	0x20001478
 8006c28:	46024080 	.word	0x46024080
 8006c2c:	46024000 	.word	0x46024000
 8006c30:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006c34:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <HAL_MDF_Init+0x2a8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c6c <HAL_MDF_Init+0x2a8>)
 8006c3c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f816 	bl	8006c74 <MDF_GetHandleNumberFromInstance>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4909      	ldr	r1, [pc, #36]	@ (8006c70 <HAL_MDF_Init+0x2ac>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20001474 	.word	0x20001474
 8006c70:	2000147c 	.word	0x2000147c

08006c74 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	@ (8006ce4 <MDF_GetHandleNumberFromInstance+0x70>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d102      	bne.n	8006c8a <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e024      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a16      	ldr	r2, [pc, #88]	@ (8006ce8 <MDF_GetHandleNumberFromInstance+0x74>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d102      	bne.n	8006c98 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8006c92:	2301      	movs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e01d      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a14      	ldr	r2, [pc, #80]	@ (8006cec <MDF_GetHandleNumberFromInstance+0x78>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d102      	bne.n	8006ca6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e016      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a11      	ldr	r2, [pc, #68]	@ (8006cf0 <MDF_GetHandleNumberFromInstance+0x7c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d102      	bne.n	8006cb4 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e00f      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8006cf4 <MDF_GetHandleNumberFromInstance+0x80>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d102      	bne.n	8006cc2 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e008      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf8 <MDF_GetHandleNumberFromInstance+0x84>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d102      	bne.n	8006cd0 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8006cca:	2305      	movs	r3, #5
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e001      	b.n	8006cd4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40025080 	.word	0x40025080
 8006ce8:	40025100 	.word	0x40025100
 8006cec:	40025180 	.word	0x40025180
 8006cf0:	40025200 	.word	0x40025200
 8006cf4:	40025280 	.word	0x40025280
 8006cf8:	40025300 	.word	0x40025300

08006cfc <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f043 0201 	orr.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006d28:	f7fc fcf6 	bl	8003718 <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
 8006d38:	e0a5      	b.n	8006e86 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 809e 	bne.w	8006e86 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fc f8d8 	bl	8002f00 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006d50:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fae3 	bl	8007320 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	4b4b      	ldr	r3, [pc, #300]	@ (8006e90 <HAL_OSPI_Init+0x174>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68d1      	ldr	r1, [r2, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6912      	ldr	r2, [r2, #16]
 8006d6c:	3a01      	subs	r2, #1
 8006d6e:	0412      	lsls	r2, r2, #16
 8006d70:	4311      	orrs	r1, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6952      	ldr	r2, [r2, #20]
 8006d76:	3a01      	subs	r2, #1
 8006d78:	0212      	lsls	r2, r2, #8
 8006d7a:	4311      	orrs	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d80:	4311      	orrs	r1, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	69d2      	ldr	r2, [r2, #28]
 8006d86:	4311      	orrs	r1, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dc0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2120      	movs	r1, #32
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 ffd7 	bl	8007d9c <OSPI_WaitFlagStateUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d146      	bne.n	8006e86 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e06:	1e5a      	subs	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e2e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0201 	orr.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d107      	bne.n	8006e6e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0202 	orr.w	r2, r2, #2
 8006e6c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e76:	d103      	bne.n	8006e80 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006e7e:	e002      	b.n	8006e86 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	f8e0c0f4 	.word	0xf8e0c0f4

08006e94 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3350      	adds	r3, #80	@ 0x50
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d03a      	beq.n	8006f3a <HAL_OSPI_IRQHandler+0xa6>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d035      	beq.n	8006f3a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b18      	cmp	r3, #24
 8006ed2:	d10f      	bne.n	8006ef4 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eec:	1e5a      	subs	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	649a      	str	r2, [r3, #72]	@ 0x48
 8006ef2:	e012      	b.n	8006f1a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b28      	cmp	r3, #40	@ 0x28
 8006ef8:	d10f      	bne.n	8006f1a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006f30:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f943 	bl	80071be <HAL_OSPI_FifoThresholdCallback>
 8006f38:	e0e7      	b.n	800710a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d067      	beq.n	8007014 <HAL_OSPI_IRQHandler+0x180>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d062      	beq.n	8007014 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b28      	cmp	r3, #40	@ 0x28
 8006f52:	d131      	bne.n	8006fb8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_OSPI_IRQHandler+0xf4>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f80:	1e5a      	subs	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006f86:	e0bd      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 80b9 	bne.w	8007104 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2202      	movs	r2, #2
 8006f98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006fa8:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f918 	bl	80071e6 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006fb6:	e0a5      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006fce:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b18      	cmp	r3, #24
 8006fda:	d103      	bne.n	8006fe4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f90c 	bl	80071fa <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006fe2:	e08f      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d103      	bne.n	8006ff2 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8f1 	bl	80071d2 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006ff0:	e088      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff8:	f040 8084 	bne.w	8007104 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8d0 	bl	80071aa <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800700a:	e07b      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f8c2 	bl	8007196 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8007012:	e077      	b.n	8007104 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01e      	beq.n	800705c <HAL_OSPI_IRQHandler+0x1c8>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d019      	beq.n	800705c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800704c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8da 	bl	800720e <HAL_OSPI_StatusMatchCallback>
 800705a:	e056      	b.n	800710a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03c      	beq.n	80070e0 <HAL_OSPI_IRQHandler+0x24c>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d037      	beq.n	80070e0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8007086:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01a      	beq.n	80070d2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b0:	4a18      	ldr	r2, [pc, #96]	@ (8007114 <HAL_OSPI_IRQHandler+0x280>)
 80070b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fc fe56 	bl	8003d6a <HAL_DMA_Abort_IT>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d021      	beq.n	8007108 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f863 	bl	8007196 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80070d0:	e01a      	b.n	8007108 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f85c 	bl	8007196 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80070de:	e013      	b.n	8007108 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <HAL_OSPI_IRQHandler+0x276>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2210      	movs	r2, #16
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f890 	bl	8007222 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007102:	e002      	b.n	800710a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007108:	bf00      	nop
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	08007d25 	.word	0x08007d25

08007118 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	@ 0x28
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007124:	f7fc faf8 	bl	8003718 <HAL_GetTick>
 8007128:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712e:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d002      	beq.n	800713c <HAL_OSPI_HyperbusCfg+0x24>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d122      	bne.n	8007182 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2200      	movs	r2, #0
 8007144:	2120      	movs	r1, #32
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fe28 	bl	8007d9c <OSPI_WaitFlagStateUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007150:	7ffb      	ldrb	r3, [r7, #31]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11a      	bne.n	800718c <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	041a      	lsls	r2, r3, #16
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	431a      	orrs	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	ea42 0103 	orr.w	r1, r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2202      	movs	r2, #2
 800717e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007180:	e004      	b.n	800718c <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2210      	movs	r2, #16
 800718a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 800718c:	7ffb      	ldrb	r3, [r7, #31]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b088      	sub	sp, #32
 800723a:	af02      	add	r7, sp, #8
 800723c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007242:	f7fc fa69 	bl	8003718 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800724c:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <HAL_OSPI_Abort+0x2c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d052      	beq.n	8007308 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d014      	beq.n	800729a <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0204 	bic.w	r2, r2, #4
 800727e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007284:	4618      	mov	r0, r3
 8007286:	f7fc fcf4 	bl	8003c72 <HAL_DMA_Abort>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02b      	beq.n	8007300 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0202 	orr.w	r2, r2, #2
 80072b6:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2201      	movs	r2, #1
 80072c2:	2102      	movs	r1, #2
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fd69 	bl	8007d9c <OSPI_WaitFlagStateUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11f      	bne.n	8007314 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2202      	movs	r2, #2
 80072da:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2200      	movs	r2, #0
 80072e6:	2120      	movs	r1, #32
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fd57 	bl	8007d9c <OSPI_WaitFlagStateUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10d      	bne.n	8007314 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80072fe:	e009      	b.n	8007314 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007306:	e005      	b.n	8007314 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2210      	movs	r2, #16
 8007310:	655a      	str	r2, [r3, #84]	@ 0x54
 8007312:	e000      	b.n	8007316 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007314:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b094      	sub	sp, #80	@ 0x50
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a9d      	ldr	r2, [pc, #628]	@ (80075d4 <HAL_OSPIM_Config+0x294>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d105      	bne.n	800736e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800736c:	e004      	b.n	8007378 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800736e:	2301      	movs	r3, #1
 8007370:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007378:	2300      	movs	r3, #0
 800737a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800737e:	e01d      	b.n	80073bc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007380:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007384:	3301      	adds	r3, #1
 8007386:	b2d8      	uxtb	r0, r3
 8007388:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800738c:	f107 0114 	add.w	r1, r7, #20
 8007390:	4613      	mov	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	440b      	add	r3, r1
 800739a:	4619      	mov	r1, r3
 800739c:	f000 fd3e 	bl	8007e1c <OSPIM_GetConfig>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2208      	movs	r2, #8
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80073b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073b6:	3301      	adds	r3, #1
 80073b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d9dd      	bls.n	8007380 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80073c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 849e 	bne.w	8007d0a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80073ce:	4b81      	ldr	r3, [pc, #516]	@ (80075d4 <HAL_OSPIM_Config+0x294>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80073da:	4b7e      	ldr	r3, [pc, #504]	@ (80075d4 <HAL_OSPIM_Config+0x294>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a7d      	ldr	r2, [pc, #500]	@ (80075d4 <HAL_OSPIM_Config+0x294>)
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80073e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80073f2:	4b79      	ldr	r3, [pc, #484]	@ (80075d8 <HAL_OSPIM_Config+0x298>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80073fe:	4b76      	ldr	r3, [pc, #472]	@ (80075d8 <HAL_OSPIM_Config+0x298>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a75      	ldr	r2, [pc, #468]	@ (80075d8 <HAL_OSPIM_Config+0x298>)
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800740a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800740e:	f043 0302 	orr.w	r3, r3, #2
 8007412:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007416:	4971      	ldr	r1, [pc, #452]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	3350      	adds	r3, #80	@ 0x50
 8007424:	443b      	add	r3, r7
 8007426:	3b34      	subs	r3, #52	@ 0x34
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	486a      	ldr	r0, [pc, #424]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	3350      	adds	r3, #80	@ 0x50
 8007440:	443b      	add	r3, r7
 8007442:	3b34      	subs	r3, #52	@ 0x34
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3b01      	subs	r3, #1
 8007448:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4403      	add	r3, r0
 8007450:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007452:	4b62      	ldr	r3, [pc, #392]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80c0 	beq.w	80075e0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007460:	4b5e      	ldr	r3, [pc, #376]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5d      	ldr	r2, [pc, #372]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800746c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007470:	2b01      	cmp	r3, #1
 8007472:	f040 8162 	bne.w	800773a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8007476:	4959      	ldr	r1, [pc, #356]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007478:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800747c:	4613      	mov	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	3350      	adds	r3, #80	@ 0x50
 8007486:	443b      	add	r3, r7
 8007488:	3b3c      	subs	r3, #60	@ 0x3c
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3b01      	subs	r3, #1
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	6859      	ldr	r1, [r3, #4]
 8007494:	4851      	ldr	r0, [pc, #324]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007496:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	3350      	adds	r3, #80	@ 0x50
 80074a4:	443b      	add	r3, r7
 80074a6:	3b3c      	subs	r3, #60	@ 0x3c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	f041 0202 	orr.w	r2, r1, #2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4403      	add	r3, r0
 80074b4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80074b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	3350      	adds	r3, #80	@ 0x50
 80074c4:	443b      	add	r3, r7
 80074c6:	3b38      	subs	r3, #56	@ 0x38
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01f      	beq.n	800750e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80074ce:	4943      	ldr	r1, [pc, #268]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 80074d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074d4:	4613      	mov	r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	3350      	adds	r3, #80	@ 0x50
 80074de:	443b      	add	r3, r7
 80074e0:	3b38      	subs	r3, #56	@ 0x38
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	6859      	ldr	r1, [r3, #4]
 80074ec:	483b      	ldr	r0, [pc, #236]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 80074ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074f2:	4613      	mov	r3, r2
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	3350      	adds	r3, #80	@ 0x50
 80074fc:	443b      	add	r3, r7
 80074fe:	3b38      	subs	r3, #56	@ 0x38
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	f041 0220 	orr.w	r2, r1, #32
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4403      	add	r3, r0
 800750c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800750e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	3350      	adds	r3, #80	@ 0x50
 800751c:	443b      	add	r3, r7
 800751e:	3b30      	subs	r3, #48	@ 0x30
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d023      	beq.n	800756e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8007526:	492d      	ldr	r1, [pc, #180]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 8007528:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800752c:	4613      	mov	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3350      	adds	r3, #80	@ 0x50
 8007536:	443b      	add	r3, r7
 8007538:	3b30      	subs	r3, #48	@ 0x30
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	6859      	ldr	r1, [r3, #4]
 8007548:	4824      	ldr	r0, [pc, #144]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 800754a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	3350      	adds	r3, #80	@ 0x50
 8007558:	443b      	add	r3, r7
 800755a:	3b30      	subs	r3, #48	@ 0x30
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3b01      	subs	r3, #1
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4403      	add	r3, r0
 800756c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800756e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007572:	4613      	mov	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4413      	add	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	3350      	adds	r3, #80	@ 0x50
 800757c:	443b      	add	r3, r7
 800757e:	3b2c      	subs	r3, #44	@ 0x2c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80d9 	beq.w	800773a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8007588:	4914      	ldr	r1, [pc, #80]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 800758a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	3350      	adds	r3, #80	@ 0x50
 8007598:	443b      	add	r3, r7
 800759a:	3b2c      	subs	r3, #44	@ 0x2c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3b01      	subs	r3, #1
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	480c      	ldr	r0, [pc, #48]	@ (80075dc <HAL_OSPIM_Config+0x29c>)
 80075ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075b0:	4613      	mov	r3, r2
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	4413      	add	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	3350      	adds	r3, #80	@ 0x50
 80075ba:	443b      	add	r3, r7
 80075bc:	3b2c      	subs	r3, #44	@ 0x2c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4403      	add	r3, r0
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	e0b3      	b.n	800773a <HAL_OSPIM_Config+0x3fa>
 80075d2:	bf00      	nop
 80075d4:	420d1400 	.word	0x420d1400
 80075d8:	420d2400 	.word	0x420d2400
 80075dc:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80075e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	3350      	adds	r3, #80	@ 0x50
 80075ec:	443b      	add	r3, r7
 80075ee:	3b3c      	subs	r3, #60	@ 0x3c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80a1 	beq.w	800773a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075f8:	4993      	ldr	r1, [pc, #588]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 80075fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075fc:	4613      	mov	r3, r2
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	3350      	adds	r3, #80	@ 0x50
 8007606:	443b      	add	r3, r7
 8007608:	3b3c      	subs	r3, #60	@ 0x3c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	488c      	ldr	r0, [pc, #560]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 8007616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007618:	4613      	mov	r3, r2
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4413      	add	r3, r2
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	3350      	adds	r3, #80	@ 0x50
 8007622:	443b      	add	r3, r7
 8007624:	3b3c      	subs	r3, #60	@ 0x3c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	f021 0201 	bic.w	r2, r1, #1
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4403      	add	r3, r0
 8007632:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	3350      	adds	r3, #80	@ 0x50
 8007640:	443b      	add	r3, r7
 8007642:	3b38      	subs	r3, #56	@ 0x38
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01d      	beq.n	8007686 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800764a:	497f      	ldr	r1, [pc, #508]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 800764c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	3350      	adds	r3, #80	@ 0x50
 8007658:	443b      	add	r3, r7
 800765a:	3b38      	subs	r3, #56	@ 0x38
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	4878      	ldr	r0, [pc, #480]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 8007668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	3350      	adds	r3, #80	@ 0x50
 8007674:	443b      	add	r3, r7
 8007676:	3b38      	subs	r3, #56	@ 0x38
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	f021 0210 	bic.w	r2, r1, #16
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4403      	add	r3, r0
 8007684:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3350      	adds	r3, #80	@ 0x50
 8007692:	443b      	add	r3, r7
 8007694:	3b30      	subs	r3, #48	@ 0x30
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d021      	beq.n	80076e0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800769c:	496a      	ldr	r1, [pc, #424]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 800769e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	3350      	adds	r3, #80	@ 0x50
 80076aa:	443b      	add	r3, r7
 80076ac:	3b30      	subs	r3, #48	@ 0x30
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	4862      	ldr	r0, [pc, #392]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 80076be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076c0:	4613      	mov	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	4413      	add	r3, r2
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	3350      	adds	r3, #80	@ 0x50
 80076ca:	443b      	add	r3, r7
 80076cc:	3b30      	subs	r3, #48	@ 0x30
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4403      	add	r3, r0
 80076de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e2:	4613      	mov	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	3350      	adds	r3, #80	@ 0x50
 80076ec:	443b      	add	r3, r7
 80076ee:	3b2c      	subs	r3, #44	@ 0x2c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d021      	beq.n	800773a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80076f6:	4954      	ldr	r1, [pc, #336]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 80076f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fa:	4613      	mov	r3, r2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4413      	add	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	3350      	adds	r3, #80	@ 0x50
 8007704:	443b      	add	r3, r7
 8007706:	3b2c      	subs	r3, #44	@ 0x2c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3b01      	subs	r3, #1
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	484c      	ldr	r0, [pc, #304]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 8007718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	3350      	adds	r3, #80	@ 0x50
 8007724:	443b      	add	r3, r7
 8007726:	3b2c      	subs	r3, #44	@ 0x2c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3b01      	subs	r3, #1
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4403      	add	r3, r0
 8007738:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007742:	4613      	mov	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4413      	add	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	3350      	adds	r3, #80	@ 0x50
 800774c:	443b      	add	r3, r7
 800774e:	3b3c      	subs	r3, #60	@ 0x3c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4299      	cmp	r1, r3
 8007754:	d038      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6859      	ldr	r1, [r3, #4]
 800775a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	3350      	adds	r3, #80	@ 0x50
 8007768:	443b      	add	r3, r7
 800776a:	3b38      	subs	r3, #56	@ 0x38
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4299      	cmp	r1, r3
 8007770:	d02a      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6899      	ldr	r1, [r3, #8]
 8007776:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	3350      	adds	r3, #80	@ 0x50
 8007784:	443b      	add	r3, r7
 8007786:	3b34      	subs	r3, #52	@ 0x34
 8007788:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800778a:	4299      	cmp	r1, r3
 800778c:	d01c      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68d9      	ldr	r1, [r3, #12]
 8007792:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007796:	4613      	mov	r3, r2
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	4413      	add	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	3350      	adds	r3, #80	@ 0x50
 80077a0:	443b      	add	r3, r7
 80077a2:	3b30      	subs	r3, #48	@ 0x30
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d00e      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6919      	ldr	r1, [r3, #16]
 80077ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077b2:	4613      	mov	r3, r2
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	4413      	add	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	3350      	adds	r3, #80	@ 0x50
 80077bc:	443b      	add	r3, r7
 80077be:	3b2c      	subs	r3, #44	@ 0x2c
 80077c0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077c2:	4299      	cmp	r1, r3
 80077c4:	f040 810e 	bne.w	80079e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	3350      	adds	r3, #80	@ 0x50
 80077da:	443b      	add	r3, r7
 80077dc:	3b3c      	subs	r3, #60	@ 0x3c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d133      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	3350      	adds	r3, #80	@ 0x50
 80077f6:	443b      	add	r3, r7
 80077f8:	3b38      	subs	r3, #56	@ 0x38
 80077fa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077fc:	4299      	cmp	r1, r3
 80077fe:	d125      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	68d9      	ldr	r1, [r3, #12]
 8007804:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007808:	4613      	mov	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	4413      	add	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	3350      	adds	r3, #80	@ 0x50
 8007812:	443b      	add	r3, r7
 8007814:	3b30      	subs	r3, #48	@ 0x30
 8007816:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007818:	4299      	cmp	r1, r3
 800781a:	d117      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6919      	ldr	r1, [r3, #16]
 8007820:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	3350      	adds	r3, #80	@ 0x50
 800782e:	443b      	add	r3, r7
 8007830:	3b2c      	subs	r3, #44	@ 0x2c
 8007832:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007834:	4299      	cmp	r1, r3
 8007836:	d109      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007838:	4b03      	ldr	r3, [pc, #12]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a02      	ldr	r2, [pc, #8]	@ (8007848 <HAL_OSPIM_Config+0x508>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e0ce      	b.n	80079e4 <HAL_OSPIM_Config+0x6a4>
 8007846:	bf00      	nop
 8007848:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800784c:	49a4      	ldr	r1, [pc, #656]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800784e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	3350      	adds	r3, #80	@ 0x50
 800785c:	443b      	add	r3, r7
 800785e:	3b3c      	subs	r3, #60	@ 0x3c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3b01      	subs	r3, #1
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	489d      	ldr	r0, [pc, #628]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800786c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3350      	adds	r3, #80	@ 0x50
 800787a:	443b      	add	r3, r7
 800787c:	3b3c      	subs	r3, #60	@ 0x3c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	f021 0201 	bic.w	r2, r1, #1
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4403      	add	r3, r0
 800788a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800788c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007890:	4613      	mov	r3, r2
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	4413      	add	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	3350      	adds	r3, #80	@ 0x50
 800789a:	443b      	add	r3, r7
 800789c:	3b38      	subs	r3, #56	@ 0x38
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01f      	beq.n	80078e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80078a4:	498e      	ldr	r1, [pc, #568]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80078aa:	4613      	mov	r3, r2
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	4413      	add	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	3350      	adds	r3, #80	@ 0x50
 80078b4:	443b      	add	r3, r7
 80078b6:	3b38      	subs	r3, #56	@ 0x38
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	4887      	ldr	r0, [pc, #540]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	3350      	adds	r3, #80	@ 0x50
 80078d2:	443b      	add	r3, r7
 80078d4:	3b38      	subs	r3, #56	@ 0x38
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	f021 0210 	bic.w	r2, r1, #16
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4403      	add	r3, r0
 80078e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80078e4:	497e      	ldr	r1, [pc, #504]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80078ea:	4613      	mov	r3, r2
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4413      	add	r3, r2
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	3350      	adds	r3, #80	@ 0x50
 80078f4:	443b      	add	r3, r7
 80078f6:	3b34      	subs	r3, #52	@ 0x34
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	6859      	ldr	r1, [r3, #4]
 8007902:	4877      	ldr	r0, [pc, #476]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007904:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	3350      	adds	r3, #80	@ 0x50
 8007912:	443b      	add	r3, r7
 8007914:	3b34      	subs	r3, #52	@ 0x34
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4403      	add	r3, r0
 8007922:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007924:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007928:	4613      	mov	r3, r2
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	4413      	add	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	3350      	adds	r3, #80	@ 0x50
 8007932:	443b      	add	r3, r7
 8007934:	3b30      	subs	r3, #48	@ 0x30
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d023      	beq.n	8007984 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800793c:	4968      	ldr	r1, [pc, #416]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800793e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	3350      	adds	r3, #80	@ 0x50
 800794c:	443b      	add	r3, r7
 800794e:	3b30      	subs	r3, #48	@ 0x30
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	4860      	ldr	r0, [pc, #384]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007960:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	3350      	adds	r3, #80	@ 0x50
 800796e:	443b      	add	r3, r7
 8007970:	3b30      	subs	r3, #48	@ 0x30
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3b01      	subs	r3, #1
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4403      	add	r3, r0
 8007982:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007984:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007988:	4613      	mov	r3, r2
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	4413      	add	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	3350      	adds	r3, #80	@ 0x50
 8007992:	443b      	add	r3, r7
 8007994:	3b2c      	subs	r3, #44	@ 0x2c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d023      	beq.n	80079e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800799c:	4950      	ldr	r1, [pc, #320]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800799e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	3350      	adds	r3, #80	@ 0x50
 80079ac:	443b      	add	r3, r7
 80079ae:	3b2c      	subs	r3, #44	@ 0x2c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	6859      	ldr	r1, [r3, #4]
 80079be:	4848      	ldr	r0, [pc, #288]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	3350      	adds	r3, #80	@ 0x50
 80079ce:	443b      	add	r3, r7
 80079d0:	3b2c      	subs	r3, #44	@ 0x2c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4403      	add	r3, r0
 80079e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80079e4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079f8:	025b      	lsls	r3, r3, #9
 80079fa:	431a      	orrs	r2, r3
 80079fc:	4938      	ldr	r1, [pc, #224]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d018      	beq.n	8007a48 <HAL_OSPIM_Config+0x708>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a1e:	d813      	bhi.n	8007a48 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	1e5a      	subs	r2, r3, #1
 8007a26:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d90a      	bls.n	8007a48 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007a32:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	4927      	ldr	r1, [pc, #156]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007a48:	4b25      	ldr	r3, [pc, #148]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 809a 	beq.w	8007b8a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007a56:	4a22      	ldr	r2, [pc, #136]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f023 0203 	bic.w	r2, r3, #3
 8007a68:	491d      	ldr	r1, [pc, #116]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007a82:	4a17      	ldr	r2, [pc, #92]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007a94:	4912      	ldr	r1, [pc, #72]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	f042 0210 	orr.w	r2, r2, #16
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007ac8:	4905      	ldr	r1, [pc, #20]	@ (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	e01b      	b.n	8007b18 <HAL_OSPIM_Config+0x7d8>
 8007ae0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007aec:	4a8a      	ldr	r2, [pc, #552]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007b02:	4985      	ldr	r1, [pc, #532]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d016      	beq.n	8007b52 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b24:	4a7c      	ldr	r2, [pc, #496]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007b3a:	4977      	ldr	r1, [pc, #476]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	e0c3      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80bf 	beq.w	8007cda <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007b72:	4969      	ldr	r1, [pc, #420]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	605a      	str	r2, [r3, #4]
 8007b88:	e0a7      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007b8a:	4a63      	ldr	r2, [pc, #396]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f023 0203 	bic.w	r2, r3, #3
 8007b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	495d      	ldr	r1, [pc, #372]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d014      	beq.n	8007be6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007bbc:	4a56      	ldr	r2, [pc, #344]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd0:	015b      	lsls	r3, r3, #5
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	4950      	ldr	r1, [pc, #320]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	f042 0210 	orr.w	r2, r2, #16
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d019      	beq.n	8007c26 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bf2:	4a49      	ldr	r2, [pc, #292]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0a:	049b      	lsls	r3, r3, #18
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	4942      	ldr	r1, [pc, #264]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	e01c      	b.n	8007c60 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c2e:	4a3a      	ldr	r2, [pc, #232]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c46:	069b      	lsls	r3, r3, #26
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	4933      	ldr	r1, [pc, #204]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d019      	beq.n	8007ca0 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c84:	049b      	lsls	r3, r3, #18
 8007c86:	431a      	orrs	r2, r3
 8007c88:	4923      	ldr	r1, [pc, #140]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	e01c      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc0:	069b      	lsls	r3, r3, #26
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	4914      	ldr	r1, [pc, #80]	@ (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007cda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d1c <HAL_OSPIM_Config+0x9dc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a0c      	ldr	r2, [pc, #48]	@ (8007d1c <HAL_OSPIM_Config+0x9dc>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007cf2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007cfe:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <HAL_OSPIM_Config+0x9e0>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a07      	ldr	r2, [pc, #28]	@ (8007d20 <HAL_OSPIM_Config+0x9e0>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3750      	adds	r7, #80	@ 0x50
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	420c4000 	.word	0x420c4000
 8007d1c:	420d1400 	.word	0x420d1400
 8007d20:	420d2400 	.word	0x420d2400

08007d24 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d30:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d40:	d122      	bne.n	8007d88 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d014      	beq.n	8007d7a <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2202      	movs	r2, #2
 8007d56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007d66:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0202 	orr.w	r2, r2, #2
 8007d76:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8007d78:	e00c      	b.n	8007d94 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fa12 	bl	80071aa <HAL_OSPI_AbortCpltCallback>
}
 8007d86:	e005      	b.n	8007d94 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fa01 	bl	8007196 <HAL_OSPI_ErrorCallback>
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007dac:	e022      	b.n	8007df4 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d01e      	beq.n	8007df4 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fb fcaf 	bl	8003718 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d113      	bne.n	8007df4 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	401a      	ands	r2, r3
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d00b      	beq.n	8007df4 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007de2:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de8:	f043 0201 	orr.w	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e00e      	b.n	8007e12 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a1a      	ldr	r2, [r3, #32]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bf14      	ite	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	2300      	moveq	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d1ce      	bne.n	8007dae <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <OSPIM_GetConfig+0x26>
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d802      	bhi.n	8007e42 <OSPIM_GetConfig+0x26>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
 8007e46:	e098      	b.n	8007f7a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d10b      	bne.n	8007e84 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007e6c:	4b46      	ldr	r3, [pc, #280]	@ (8007f88 <OSPIM_GetConfig+0x16c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007e78:	4b44      	ldr	r3, [pc, #272]	@ (8007f8c <OSPIM_GetConfig+0x170>)
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	e002      	b.n	8007e84 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e82:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e074      	b.n	8007f74 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f88 <OSPIM_GetConfig+0x16c>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4053      	eors	r3, r2
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	4053      	eors	r3, r2
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	4053      	eors	r3, r2
 8007ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d018      	beq.n	8007f32 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4053      	eors	r3, r2
 8007f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d111      	bne.n	8007f32 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	e005      	b.n	8007f32 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d018      	beq.n	8007f6e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4053      	eors	r3, r2
 8007f42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d111      	bne.n	8007f6e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	611a      	str	r2, [r3, #16]
 8007f60:	e005      	b.n	8007f6e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d987      	bls.n	8007e8a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	420c4000 	.word	0x420c4000
 8007f8c:	04040222 	.word	0x04040222

08007f90 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0202 	orr.w	r2, r2, #2
 8007fac:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a15      	ldr	r2, [pc, #84]	@ (8008010 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d109      	bne.n	8007fd2 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007fbe:	4815      	ldr	r0, [pc, #84]	@ (8008014 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fc0:	f7fe fe9c 	bl	8006cfc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	4813      	ldr	r0, [pc, #76]	@ (8008014 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fc8:	f006 f928 	bl	800e21c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
 8007fd0:	e00d      	b.n	8007fee <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a10      	ldr	r2, [pc, #64]	@ (8008018 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d108      	bne.n	8007fee <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007fdc:	480f      	ldr	r0, [pc, #60]	@ (800801c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fde:	f7fe fe8d 	bl	8006cfc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	480d      	ldr	r0, [pc, #52]	@ (800801c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fe6:	f006 f919 	bl	800e21c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff f921 	bl	8007236 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0202 	bic.w	r2, r2, #2
 8008002:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	420d1400 	.word	0x420d1400
 8008014:	420cf000 	.word	0x420cf000
 8008018:	420d2400 	.word	0x420d2400
 800801c:	420cf400 	.word	0x420cf400

08008020 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008024:	4b05      	ldr	r3, [pc, #20]	@ (800803c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	4a04      	ldr	r2, [pc, #16]	@ (800803c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	46020800 	.word	0x46020800

08008040 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008048:	4b39      	ldr	r3, [pc, #228]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800804a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008050:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	429a      	cmp	r2, r3
 8008058:	d10b      	bne.n	8008072 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008060:	d905      	bls.n	800806e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008062:	4b33      	ldr	r3, [pc, #204]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4a32      	ldr	r2, [pc, #200]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800806c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e057      	b.n	8008122 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008078:	d90a      	bls.n	8008090 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800807a:	4b2d      	ldr	r3, [pc, #180]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4313      	orrs	r3, r2
 8008086:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800808c:	60d3      	str	r3, [r2, #12]
 800808e:	e007      	b.n	80080a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008090:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008098:	4925      	ldr	r1, [pc, #148]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4313      	orrs	r3, r2
 800809e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080a0:	4b24      	ldr	r3, [pc, #144]	@ (8008134 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a24      	ldr	r2, [pc, #144]	@ (8008138 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	099b      	lsrs	r3, r3, #6
 80080ac:	2232      	movs	r2, #50	@ 0x32
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
 80080b2:	4a21      	ldr	r2, [pc, #132]	@ (8008138 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080b4:	fba2 2303 	umull	r2, r3, r2, r3
 80080b8:	099b      	lsrs	r3, r3, #6
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080be:	e002      	b.n	80080c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f3      	bne.n	80080c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01b      	beq.n	8008116 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080de:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080e4:	fba2 2303 	umull	r2, r3, r2, r3
 80080e8:	099b      	lsrs	r3, r3, #6
 80080ea:	2232      	movs	r2, #50	@ 0x32
 80080ec:	fb02 f303 	mul.w	r3, r2, r3
 80080f0:	4a11      	ldr	r2, [pc, #68]	@ (8008138 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	099b      	lsrs	r3, r3, #6
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80080fc:	e002      	b.n	8008104 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b01      	subs	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008104:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f3      	bne.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e000      	b.n	8008122 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	46020800 	.word	0x46020800
 8008134:	20000d00 	.word	0x20000d00
 8008138:	10624dd3 	.word	0x10624dd3

0800813c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008140:	4b04      	ldr	r3, [pc, #16]	@ (8008154 <HAL_PWREx_GetVoltageRange+0x18>)
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	46020800 	.word	0x46020800

08008158 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008160:	4b22      	ldr	r3, [pc, #136]	@ (80081ec <HAL_PWREx_ConfigSupply+0x94>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a22      	ldr	r2, [pc, #136]	@ (80081f0 <HAL_PWREx_ConfigSupply+0x98>)
 8008166:	fba2 2303 	umull	r2, r3, r2, r3
 800816a:	099b      	lsrs	r3, r3, #6
 800816c:	2232      	movs	r2, #50	@ 0x32
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	@ (80081f0 <HAL_PWREx_ConfigSupply+0x98>)
 8008174:	fba2 2303 	umull	r2, r3, r2, r3
 8008178:	099b      	lsrs	r3, r3, #6
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d113      	bne.n	80081ac <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008184:	4b1b      	ldr	r3, [pc, #108]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a1a      	ldr	r2, [pc, #104]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800818a:	f023 0302 	bic.w	r3, r3, #2
 800818e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008190:	e002      	b.n	8008198 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3b01      	subs	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008198:	4b16      	ldr	r3, [pc, #88]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800819a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d116      	bne.n	80081d2 <HAL_PWREx_ConfigSupply+0x7a>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f3      	bne.n	8008192 <HAL_PWREx_ConfigSupply+0x3a>
 80081aa:	e012      	b.n	80081d2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081ac:	4b11      	ldr	r3, [pc, #68]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4a10      	ldr	r2, [pc, #64]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081b8:	e002      	b.n	80081c0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b01      	subs	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081c0:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <HAL_PWREx_ConfigSupply+0x7a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f3      	bne.n	80081ba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e000      	b.n	80081de <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000d00 	.word	0x20000d00
 80081f0:	10624dd3 	.word	0x10624dd3
 80081f4:	46020800 	.word	0x46020800

080081f8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80081fc:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <HAL_PWREx_EnableVddIO2+0x1c>)
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	4a04      	ldr	r2, [pc, #16]	@ (8008214 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008202:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008206:	6113      	str	r3, [r2, #16]
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	46020800 	.word	0x46020800

08008218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	@ 0x38
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f000 bec8 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008232:	4b99      	ldr	r3, [pc, #612]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f003 030c 	and.w	r3, r3, #12
 800823a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800823c:	4b96      	ldr	r3, [pc, #600]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 816c 	beq.w	800852c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	2b00      	cmp	r3, #0
 8008258:	d007      	beq.n	800826a <HAL_RCC_OscConfig+0x52>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	2b0c      	cmp	r3, #12
 800825e:	f040 80de 	bne.w	800841e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008264:	2b01      	cmp	r3, #1
 8008266:	f040 80da 	bne.w	800841e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f000 bea5 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800827c:	4b86      	ldr	r3, [pc, #536]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <HAL_RCC_OscConfig+0x7a>
 8008288:	4b83      	ldr	r3, [pc, #524]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008290:	e005      	b.n	800829e <HAL_RCC_OscConfig+0x86>
 8008292:	4b81      	ldr	r3, [pc, #516]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800829e:	4293      	cmp	r3, r2
 80082a0:	d255      	bcs.n	800834e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fa3d 	bl	800972c <RCC_SetFlashLatencyFromMSIRange>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f000 be82 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80082be:	4b76      	ldr	r3, [pc, #472]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	4a75      	ldr	r2, [pc, #468]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082c8:	6093      	str	r3, [r2, #8]
 80082ca:	4b73      	ldr	r3, [pc, #460]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	4970      	ldr	r1, [pc, #448]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80082e4:	d309      	bcc.n	80082fa <HAL_RCC_OscConfig+0xe2>
 80082e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 021f 	bic.w	r2, r3, #31
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	4969      	ldr	r1, [pc, #420]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60cb      	str	r3, [r1, #12]
 80082f8:	e07e      	b.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da0a      	bge.n	8008318 <HAL_RCC_OscConfig+0x100>
 8008302:	4b65      	ldr	r3, [pc, #404]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	015b      	lsls	r3, r3, #5
 8008310:	4961      	ldr	r1, [pc, #388]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008312:	4313      	orrs	r3, r2
 8008314:	60cb      	str	r3, [r1, #12]
 8008316:	e06f      	b.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008320:	d30a      	bcc.n	8008338 <HAL_RCC_OscConfig+0x120>
 8008322:	4b5d      	ldr	r3, [pc, #372]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	029b      	lsls	r3, r3, #10
 8008330:	4959      	ldr	r1, [pc, #356]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008332:	4313      	orrs	r3, r2
 8008334:	60cb      	str	r3, [r1, #12]
 8008336:	e05f      	b.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
 8008338:	4b57      	ldr	r3, [pc, #348]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	03db      	lsls	r3, r3, #15
 8008346:	4954      	ldr	r1, [pc, #336]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008348:	4313      	orrs	r3, r2
 800834a:	60cb      	str	r3, [r1, #12]
 800834c:	e054      	b.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800834e:	4b52      	ldr	r3, [pc, #328]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	4a51      	ldr	r2, [pc, #324]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008358:	6093      	str	r3, [r2, #8]
 800835a:	4b4f      	ldr	r3, [pc, #316]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	494c      	ldr	r1, [pc, #304]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008368:	4313      	orrs	r3, r2
 800836a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008374:	d309      	bcc.n	800838a <HAL_RCC_OscConfig+0x172>
 8008376:	4b48      	ldr	r3, [pc, #288]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f023 021f 	bic.w	r2, r3, #31
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	4945      	ldr	r1, [pc, #276]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008384:	4313      	orrs	r3, r2
 8008386:	60cb      	str	r3, [r1, #12]
 8008388:	e028      	b.n	80083dc <HAL_RCC_OscConfig+0x1c4>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	2b00      	cmp	r3, #0
 8008390:	da0a      	bge.n	80083a8 <HAL_RCC_OscConfig+0x190>
 8008392:	4b41      	ldr	r3, [pc, #260]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	015b      	lsls	r3, r3, #5
 80083a0:	493d      	ldr	r1, [pc, #244]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60cb      	str	r3, [r1, #12]
 80083a6:	e019      	b.n	80083dc <HAL_RCC_OscConfig+0x1c4>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b0:	d30a      	bcc.n	80083c8 <HAL_RCC_OscConfig+0x1b0>
 80083b2:	4b39      	ldr	r3, [pc, #228]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	029b      	lsls	r3, r3, #10
 80083c0:	4935      	ldr	r1, [pc, #212]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60cb      	str	r3, [r1, #12]
 80083c6:	e009      	b.n	80083dc <HAL_RCC_OscConfig+0x1c4>
 80083c8:	4b33      	ldr	r3, [pc, #204]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	03db      	lsls	r3, r3, #15
 80083d6:	4930      	ldr	r1, [pc, #192]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 f9a0 	bl	800972c <RCC_SetFlashLatencyFromMSIRange>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f000 bde5 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80083f8:	f001 f8de 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083fc:	4b27      	ldr	r3, [pc, #156]	@ (800849c <HAL_RCC_OscConfig+0x284>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f7fa fff3 	bl	80033ec <HAL_InitTick>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 808a 	beq.w	800852a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800841a:	f000 bdd2 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d066      	beq.n	80084f4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008426:	4b1c      	ldr	r3, [pc, #112]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008432:	f7fb f971 	bl	8003718 <HAL_GetTick>
 8008436:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008438:	e009      	b.n	800844e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800843a:	f7fb f96d 	bl	8003718 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d902      	bls.n	800844e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	f000 bdba 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800844e:	4b12      	ldr	r3, [pc, #72]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ef      	beq.n	800843a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800845a:	4b0f      	ldr	r3, [pc, #60]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	4a0e      	ldr	r2, [pc, #56]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008464:	6093      	str	r3, [r2, #8]
 8008466:	4b0c      	ldr	r3, [pc, #48]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008472:	4909      	ldr	r1, [pc, #36]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008474:	4313      	orrs	r3, r2
 8008476:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008480:	d30e      	bcc.n	80084a0 <HAL_RCC_OscConfig+0x288>
 8008482:	4b05      	ldr	r3, [pc, #20]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f023 021f 	bic.w	r2, r3, #31
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	4902      	ldr	r1, [pc, #8]	@ (8008498 <HAL_RCC_OscConfig+0x280>)
 8008490:	4313      	orrs	r3, r2
 8008492:	60cb      	str	r3, [r1, #12]
 8008494:	e04a      	b.n	800852c <HAL_RCC_OscConfig+0x314>
 8008496:	bf00      	nop
 8008498:	46020c00 	.word	0x46020c00
 800849c:	20000d04 	.word	0x20000d04
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da0a      	bge.n	80084be <HAL_RCC_OscConfig+0x2a6>
 80084a8:	4b98      	ldr	r3, [pc, #608]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	015b      	lsls	r3, r3, #5
 80084b6:	4995      	ldr	r1, [pc, #596]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60cb      	str	r3, [r1, #12]
 80084bc:	e036      	b.n	800852c <HAL_RCC_OscConfig+0x314>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c6:	d30a      	bcc.n	80084de <HAL_RCC_OscConfig+0x2c6>
 80084c8:	4b90      	ldr	r3, [pc, #576]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	029b      	lsls	r3, r3, #10
 80084d6:	498d      	ldr	r1, [pc, #564]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	60cb      	str	r3, [r1, #12]
 80084dc:	e026      	b.n	800852c <HAL_RCC_OscConfig+0x314>
 80084de:	4b8b      	ldr	r3, [pc, #556]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	03db      	lsls	r3, r3, #15
 80084ec:	4987      	ldr	r1, [pc, #540]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60cb      	str	r3, [r1, #12]
 80084f2:	e01b      	b.n	800852c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80084f4:	4b85      	ldr	r3, [pc, #532]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a84      	ldr	r2, [pc, #528]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80084fa:	f023 0301 	bic.w	r3, r3, #1
 80084fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008500:	f7fb f90a 	bl	8003718 <HAL_GetTick>
 8008504:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008506:	e009      	b.n	800851c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008508:	f7fb f906 	bl	8003718 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d902      	bls.n	800851c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	f000 bd53 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800851c:	4b7b      	ldr	r3, [pc, #492]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ef      	bne.n	8008508 <HAL_RCC_OscConfig+0x2f0>
 8008528:	e000      	b.n	800852c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800852a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 808b 	beq.w	8008650 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2b08      	cmp	r3, #8
 800853e:	d005      	beq.n	800854c <HAL_RCC_OscConfig+0x334>
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	2b0c      	cmp	r3, #12
 8008544:	d109      	bne.n	800855a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	2b03      	cmp	r3, #3
 800854a:	d106      	bne.n	800855a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d17d      	bne.n	8008650 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f000 bd34 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008562:	d106      	bne.n	8008572 <HAL_RCC_OscConfig+0x35a>
 8008564:	4b69      	ldr	r3, [pc, #420]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a68      	ldr	r2, [pc, #416]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800856a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	e041      	b.n	80085f6 <HAL_RCC_OscConfig+0x3de>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800857a:	d112      	bne.n	80085a2 <HAL_RCC_OscConfig+0x38a>
 800857c:	4b63      	ldr	r3, [pc, #396]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a62      	ldr	r2, [pc, #392]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 8008582:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b60      	ldr	r3, [pc, #384]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5f      	ldr	r2, [pc, #380]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800858e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	4b5d      	ldr	r3, [pc, #372]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a5c      	ldr	r2, [pc, #368]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800859a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e029      	b.n	80085f6 <HAL_RCC_OscConfig+0x3de>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80085aa:	d112      	bne.n	80085d2 <HAL_RCC_OscConfig+0x3ba>
 80085ac:	4b57      	ldr	r3, [pc, #348]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a56      	ldr	r2, [pc, #344]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	4b54      	ldr	r3, [pc, #336]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a53      	ldr	r2, [pc, #332]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	4b51      	ldr	r3, [pc, #324]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a50      	ldr	r2, [pc, #320]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	e011      	b.n	80085f6 <HAL_RCC_OscConfig+0x3de>
 80085d2:	4b4e      	ldr	r3, [pc, #312]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a4d      	ldr	r2, [pc, #308]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	4b4b      	ldr	r3, [pc, #300]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a4a      	ldr	r2, [pc, #296]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4b48      	ldr	r3, [pc, #288]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a47      	ldr	r2, [pc, #284]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80085f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d014      	beq.n	8008628 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80085fe:	f7fb f88b 	bl	8003718 <HAL_GetTick>
 8008602:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008604:	e009      	b.n	800861a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008606:	f7fb f887 	bl	8003718 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b64      	cmp	r3, #100	@ 0x64
 8008612:	d902      	bls.n	800861a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	f000 bcd4 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800861a:	4b3c      	ldr	r3, [pc, #240]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0ef      	beq.n	8008606 <HAL_RCC_OscConfig+0x3ee>
 8008626:	e013      	b.n	8008650 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008628:	f7fb f876 	bl	8003718 <HAL_GetTick>
 800862c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800862e:	e009      	b.n	8008644 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008630:	f7fb f872 	bl	8003718 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b64      	cmp	r3, #100	@ 0x64
 800863c:	d902      	bls.n	8008644 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	f000 bcbf 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008644:	4b31      	ldr	r3, [pc, #196]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1ef      	bne.n	8008630 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d05f      	beq.n	800871c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	2b04      	cmp	r3, #4
 8008660:	d005      	beq.n	800866e <HAL_RCC_OscConfig+0x456>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	2b0c      	cmp	r3, #12
 8008666:	d114      	bne.n	8008692 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	2b02      	cmp	r3, #2
 800866c:	d111      	bne.n	8008692 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f000 bca3 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800867c:	4b23      	ldr	r3, [pc, #140]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	041b      	lsls	r3, r3, #16
 800868a:	4920      	ldr	r1, [pc, #128]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800868c:	4313      	orrs	r3, r2
 800868e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008690:	e044      	b.n	800871c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d024      	beq.n	80086e4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800869a:	4b1c      	ldr	r3, [pc, #112]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086a6:	f7fb f837 	bl	8003718 <HAL_GetTick>
 80086aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086ac:	e009      	b.n	80086c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086ae:	f7fb f833 	bl	8003718 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d902      	bls.n	80086c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	f000 bc80 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c2:	4b12      	ldr	r3, [pc, #72]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ef      	beq.n	80086ae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80086ce:	4b0f      	ldr	r3, [pc, #60]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	490b      	ldr	r1, [pc, #44]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	610b      	str	r3, [r1, #16]
 80086e2:	e01b      	b.n	800871c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80086e4:	4b09      	ldr	r3, [pc, #36]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a08      	ldr	r2, [pc, #32]	@ (800870c <HAL_RCC_OscConfig+0x4f4>)
 80086ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086f0:	f7fb f812 	bl	8003718 <HAL_GetTick>
 80086f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086f6:	e00b      	b.n	8008710 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f8:	f7fb f80e 	bl	8003718 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d904      	bls.n	8008710 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	f000 bc5b 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
 800870c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008710:	4baf      	ldr	r3, [pc, #700]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ed      	bne.n	80086f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80c8 	beq.w	80088ba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800872a:	2300      	movs	r3, #0
 800872c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008730:	4ba7      	ldr	r3, [pc, #668]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d111      	bne.n	8008762 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800873e:	4ba4      	ldr	r3, [pc, #656]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008744:	4aa2      	ldr	r2, [pc, #648]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008746:	f043 0304 	orr.w	r3, r3, #4
 800874a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800874e:	4ba0      	ldr	r3, [pc, #640]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800875c:	2301      	movs	r3, #1
 800875e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008762:	4b9c      	ldr	r3, [pc, #624]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d119      	bne.n	80087a2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800876e:	4b99      	ldr	r3, [pc, #612]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008772:	4a98      	ldr	r2, [pc, #608]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800877a:	f7fa ffcd 	bl	8003718 <HAL_GetTick>
 800877e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008780:	e009      	b.n	8008796 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008782:	f7fa ffc9 	bl	8003718 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d902      	bls.n	8008796 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	f000 bc16 	b.w	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008796:	4b8f      	ldr	r3, [pc, #572]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0ef      	beq.n	8008782 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d05f      	beq.n	800886a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80087aa:	4b89      	ldr	r3, [pc, #548]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80087ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087b0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087bc:	429a      	cmp	r2, r3
 80087be:	d037      	beq.n	8008830 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d006      	beq.n	80087d8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e3f4      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01b      	beq.n	800881a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80087e2:	4b7b      	ldr	r3, [pc, #492]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80087e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087e8:	4a79      	ldr	r2, [pc, #484]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80087ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80087ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80087f2:	f7fa ff91 	bl	8003718 <HAL_GetTick>
 80087f6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087fa:	f7fa ff8d 	bl	8003718 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b05      	cmp	r3, #5
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e3da      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800880c:	4b70      	ldr	r3, [pc, #448]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800880e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1ef      	bne.n	80087fa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800881a:	4b6d      	ldr	r3, [pc, #436]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800881c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008820:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	4969      	ldr	r1, [pc, #420]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008830:	4b67      	ldr	r3, [pc, #412]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008836:	4a66      	ldr	r2, [pc, #408]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008838:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800883c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008840:	f7fa ff6a 	bl	8003718 <HAL_GetTick>
 8008844:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008848:	f7fa ff66 	bl	8003718 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b05      	cmp	r3, #5
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e3b3      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800885a:	4b5d      	ldr	r3, [pc, #372]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800885c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0ef      	beq.n	8008848 <HAL_RCC_OscConfig+0x630>
 8008868:	e01b      	b.n	80088a2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800886a:	4b59      	ldr	r3, [pc, #356]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800886c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008870:	4a57      	ldr	r2, [pc, #348]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008872:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008876:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800887a:	f7fa ff4d 	bl	8003718 <HAL_GetTick>
 800887e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008880:	e008      	b.n	8008894 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008882:	f7fa ff49 	bl	8003718 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b05      	cmp	r3, #5
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e396      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008894:	4b4e      	ldr	r3, [pc, #312]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800889a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1ef      	bne.n	8008882 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d107      	bne.n	80088ba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088aa:	4b49      	ldr	r3, [pc, #292]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088b0:	4a47      	ldr	r2, [pc, #284]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088b2:	f023 0304 	bic.w	r3, r3, #4
 80088b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0304 	and.w	r3, r3, #4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 8111 	beq.w	8008aea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ce:	4b40      	ldr	r3, [pc, #256]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d111      	bne.n	8008900 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088dc:	4b3c      	ldr	r3, [pc, #240]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088e2:	4a3b      	ldr	r2, [pc, #236]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088e4:	f043 0304 	orr.w	r3, r3, #4
 80088e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80088ec:	4b38      	ldr	r3, [pc, #224]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80088ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008900:	4b34      	ldr	r3, [pc, #208]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d118      	bne.n	800893e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800890c:	4b31      	ldr	r3, [pc, #196]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	4a30      	ldr	r2, [pc, #192]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008912:	f043 0301 	orr.w	r3, r3, #1
 8008916:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008918:	f7fa fefe 	bl	8003718 <HAL_GetTick>
 800891c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800891e:	e008      	b.n	8008932 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008920:	f7fa fefa 	bl	8003718 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e347      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008932:	4b28      	ldr	r3, [pc, #160]	@ (80089d4 <HAL_RCC_OscConfig+0x7bc>)
 8008934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f0      	beq.n	8008920 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01f      	beq.n	800898a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d010      	beq.n	8008978 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008956:	4b1e      	ldr	r3, [pc, #120]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800895c:	4a1c      	ldr	r2, [pc, #112]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800895e:	f043 0304 	orr.w	r3, r3, #4
 8008962:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008966:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800896c:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800896e:	f043 0301 	orr.w	r3, r3, #1
 8008972:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008976:	e018      	b.n	80089aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008978:	4b15      	ldr	r3, [pc, #84]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800897a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800897e:	4a14      	ldr	r2, [pc, #80]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008980:	f043 0301 	orr.w	r3, r3, #1
 8008984:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008988:	e00f      	b.n	80089aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800898a:	4b11      	ldr	r3, [pc, #68]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800898c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008990:	4a0f      	ldr	r2, [pc, #60]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800899a:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 800899c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089a0:	4a0b      	ldr	r2, [pc, #44]	@ (80089d0 <HAL_RCC_OscConfig+0x7b8>)
 80089a2:	f023 0304 	bic.w	r3, r3, #4
 80089a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d057      	beq.n	8008a62 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80089b2:	f7fa feb1 	bl	8003718 <HAL_GetTick>
 80089b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089b8:	e00e      	b.n	80089d8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ba:	f7fa fead 	bl	8003718 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d905      	bls.n	80089d8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e2f8      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
 80089d0:	46020c00 	.word	0x46020c00
 80089d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089d8:	4b9c      	ldr	r3, [pc, #624]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 80089da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0e9      	beq.n	80089ba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01b      	beq.n	8008a2a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80089f2:	4b96      	ldr	r3, [pc, #600]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 80089f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089f8:	4a94      	ldr	r2, [pc, #592]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 80089fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a02:	e00a      	b.n	8008a1a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a04:	f7fa fe88 	bl	8003718 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e2d3      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a1a:	4b8c      	ldr	r3, [pc, #560]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0ed      	beq.n	8008a04 <HAL_RCC_OscConfig+0x7ec>
 8008a28:	e053      	b.n	8008ad2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a2a:	4b88      	ldr	r3, [pc, #544]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a30:	4a86      	ldr	r2, [pc, #536]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a3a:	e00a      	b.n	8008a52 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7fa fe6c 	bl	8003718 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e2b7      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a52:	4b7e      	ldr	r3, [pc, #504]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1ed      	bne.n	8008a3c <HAL_RCC_OscConfig+0x824>
 8008a60:	e037      	b.n	8008ad2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008a62:	f7fa fe59 	bl	8003718 <HAL_GetTick>
 8008a66:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fa fe55 	bl	8003718 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e2a0      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a80:	4b72      	ldr	r3, [pc, #456]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ed      	bne.n	8008a6a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01a      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aac:	e00a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aae:	f7fa fe33 	bl	8003718 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e27e      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ac4:	4b61      	ldr	r3, [pc, #388]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1ed      	bne.n	8008aae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ad2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d107      	bne.n	8008aea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ada:	4b5c      	ldr	r3, [pc, #368]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008ae2:	f023 0304 	bic.w	r3, r3, #4
 8008ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d036      	beq.n	8008b64 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d019      	beq.n	8008b32 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008afe:	4b53      	ldr	r3, [pc, #332]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a52      	ldr	r2, [pc, #328]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b08:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b0a:	f7fa fe05 	bl	8003718 <HAL_GetTick>
 8008b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b12:	f7fa fe01 	bl	8003718 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e24e      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b24:	4b49      	ldr	r3, [pc, #292]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <HAL_RCC_OscConfig+0x8fa>
 8008b30:	e018      	b.n	8008b64 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008b32:	4b46      	ldr	r3, [pc, #280]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a45      	ldr	r2, [pc, #276]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b3c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b3e:	f7fa fdeb 	bl	8003718 <HAL_GetTick>
 8008b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b44:	e008      	b.n	8008b58 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b46:	f7fa fde7 	bl	8003718 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d901      	bls.n	8008b58 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e234      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b58:	4b3c      	ldr	r3, [pc, #240]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1f0      	bne.n	8008b46 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d036      	beq.n	8008bde <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d019      	beq.n	8008bac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008b78:	4b34      	ldr	r3, [pc, #208]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a33      	ldr	r2, [pc, #204]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b84:	f7fa fdc8 	bl	8003718 <HAL_GetTick>
 8008b88:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008b8c:	f7fa fdc4 	bl	8003718 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e211      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x974>
 8008baa:	e018      	b.n	8008bde <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008bac:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a26      	ldr	r2, [pc, #152]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008bb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bb6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bb8:	f7fa fdae 	bl	8003718 <HAL_GetTick>
 8008bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008bc0:	f7fa fdaa 	bl	8003718 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e1f7      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d07f      	beq.n	8008cea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d062      	beq.n	8008cb8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008bf2:	4b16      	ldr	r3, [pc, #88]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008bf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008bfc:	6093      	str	r3, [r2, #8]
 8008bfe:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0a:	4910      	ldr	r1, [pc, #64]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008c18:	d309      	bcc.n	8008c2e <HAL_RCC_OscConfig+0xa16>
 8008c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f023 021f 	bic.w	r2, r3, #31
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	4909      	ldr	r1, [pc, #36]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60cb      	str	r3, [r1, #12]
 8008c2c:	e02a      	b.n	8008c84 <HAL_RCC_OscConfig+0xa6c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	da0c      	bge.n	8008c50 <HAL_RCC_OscConfig+0xa38>
 8008c36:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	015b      	lsls	r3, r3, #5
 8008c44:	4901      	ldr	r1, [pc, #4]	@ (8008c4c <HAL_RCC_OscConfig+0xa34>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60cb      	str	r3, [r1, #12]
 8008c4a:	e01b      	b.n	8008c84 <HAL_RCC_OscConfig+0xa6c>
 8008c4c:	46020c00 	.word	0x46020c00
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c58:	d30a      	bcc.n	8008c70 <HAL_RCC_OscConfig+0xa58>
 8008c5a:	4ba1      	ldr	r3, [pc, #644]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	029b      	lsls	r3, r3, #10
 8008c68:	499d      	ldr	r1, [pc, #628]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60cb      	str	r3, [r1, #12]
 8008c6e:	e009      	b.n	8008c84 <HAL_RCC_OscConfig+0xa6c>
 8008c70:	4b9b      	ldr	r3, [pc, #620]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	03db      	lsls	r3, r3, #15
 8008c7e:	4998      	ldr	r1, [pc, #608]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008c84:	4b96      	ldr	r3, [pc, #600]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a95      	ldr	r2, [pc, #596]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008c8a:	f043 0310 	orr.w	r3, r3, #16
 8008c8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c90:	f7fa fd42 	bl	8003718 <HAL_GetTick>
 8008c94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008c98:	f7fa fd3e 	bl	8003718 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e18b      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008caa:	4b8d      	ldr	r3, [pc, #564]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0f0      	beq.n	8008c98 <HAL_RCC_OscConfig+0xa80>
 8008cb6:	e018      	b.n	8008cea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008cb8:	4b89      	ldr	r3, [pc, #548]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a88      	ldr	r2, [pc, #544]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008cbe:	f023 0310 	bic.w	r3, r3, #16
 8008cc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008cc4:	f7fa fd28 	bl	8003718 <HAL_GetTick>
 8008cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008ccc:	f7fa fd24 	bl	8003718 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e171      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cde:	4b80      	ldr	r3, [pc, #512]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8166 	beq.w	8008fc0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cfa:	4b79      	ldr	r3, [pc, #484]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f003 030c 	and.w	r3, r3, #12
 8008d02:	2b0c      	cmp	r3, #12
 8008d04:	f000 80f2 	beq.w	8008eec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	f040 80c5 	bne.w	8008e9c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008d12:	4b73      	ldr	r3, [pc, #460]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a72      	ldr	r2, [pc, #456]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d1e:	f7fa fcfb 	bl	8003718 <HAL_GetTick>
 8008d22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d24:	e008      	b.n	8008d38 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d26:	f7fa fcf7 	bl	8003718 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e144      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d38:	4b69      	ldr	r3, [pc, #420]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d44:	4b66      	ldr	r3, [pc, #408]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d111      	bne.n	8008d76 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008d52:	4b63      	ldr	r3, [pc, #396]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d58:	4a61      	ldr	r2, [pc, #388]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d5a:	f043 0304 	orr.w	r3, r3, #4
 8008d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008d62:	4b5f      	ldr	r3, [pc, #380]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008d76:	4b5b      	ldr	r3, [pc, #364]	@ (8008ee4 <HAL_RCC_OscConfig+0xccc>)
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d82:	d102      	bne.n	8008d8a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008d8a:	4b56      	ldr	r3, [pc, #344]	@ (8008ee4 <HAL_RCC_OscConfig+0xccc>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	4a55      	ldr	r2, [pc, #340]	@ (8008ee4 <HAL_RCC_OscConfig+0xccc>)
 8008d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d94:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008d96:	4b52      	ldr	r3, [pc, #328]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008daa:	3a01      	subs	r2, #1
 8008dac:	0212      	lsls	r2, r2, #8
 8008dae:	4311      	orrs	r1, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008db4:	430a      	orrs	r2, r1
 8008db6:	494a      	ldr	r1, [pc, #296]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	628b      	str	r3, [r1, #40]	@ 0x28
 8008dbc:	4b48      	ldr	r3, [pc, #288]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dc0:	4b49      	ldr	r3, [pc, #292]	@ (8008ee8 <HAL_RCC_OscConfig+0xcd0>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008dc8:	3a01      	subs	r2, #1
 8008dca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008dd2:	3a01      	subs	r2, #1
 8008dd4:	0252      	lsls	r2, r2, #9
 8008dd6:	b292      	uxth	r2, r2
 8008dd8:	4311      	orrs	r1, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008dde:	3a01      	subs	r2, #1
 8008de0:	0412      	lsls	r2, r2, #16
 8008de2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008de6:	4311      	orrs	r1, r2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008dec:	3a01      	subs	r2, #1
 8008dee:	0612      	lsls	r2, r2, #24
 8008df0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008df4:	430a      	orrs	r2, r1
 8008df6:	493a      	ldr	r1, [pc, #232]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008dfc:	4b38      	ldr	r3, [pc, #224]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e00:	4a37      	ldr	r2, [pc, #220]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e0c:	4a34      	ldr	r2, [pc, #208]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008e12:	4b33      	ldr	r3, [pc, #204]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e16:	4a32      	ldr	r2, [pc, #200]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e18:	f043 0310 	orr.w	r3, r3, #16
 8008e1c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008e1e:	4b30      	ldr	r3, [pc, #192]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e22:	f023 020c 	bic.w	r2, r3, #12
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	492d      	ldr	r1, [pc, #180]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d105      	bne.n	8008e44 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e38:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee4 <HAL_RCC_OscConfig+0xccc>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	4a29      	ldr	r2, [pc, #164]	@ (8008ee4 <HAL_RCC_OscConfig+0xccc>)
 8008e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e42:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008e44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d107      	bne.n	8008e5c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008e4c:	4b24      	ldr	r3, [pc, #144]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e52:	4a23      	ldr	r2, [pc, #140]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e54:	f023 0304 	bic.w	r3, r3, #4
 8008e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e5c:	4b20      	ldr	r3, [pc, #128]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e66:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008e74:	f7fa fc50 	bl	8003718 <HAL_GetTick>
 8008e78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e7c:	f7fa fc4c 	bl	8003718 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e099      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e8e:	4b14      	ldr	r3, [pc, #80]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCC_OscConfig+0xc64>
 8008e9a:	e091      	b.n	8008fc0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008e9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ea6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ea8:	f7fa fc36 	bl	8003718 <HAL_GetTick>
 8008eac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb0:	f7fa fc32 	bl	8003718 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e07f      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ec2:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008ece:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed2:	4a03      	ldr	r2, [pc, #12]	@ (8008ee0 <HAL_RCC_OscConfig+0xcc8>)
 8008ed4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008ed8:	f023 0303 	bic.w	r3, r3, #3
 8008edc:	6293      	str	r3, [r2, #40]	@ 0x28
 8008ede:	e06f      	b.n	8008fc0 <HAL_RCC_OscConfig+0xda8>
 8008ee0:	46020c00 	.word	0x46020c00
 8008ee4:	46020800 	.word	0x46020800
 8008ee8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008eec:	4b37      	ldr	r3, [pc, #220]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ef2:	4b36      	ldr	r3, [pc, #216]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d039      	beq.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f003 0203 	and.w	r2, r3, #3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d132      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d129      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d122      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f38:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d11a      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	0a5b      	lsrs	r3, r3, #9
 8008f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d111      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d108      	bne.n	8008f74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	0e1b      	lsrs	r3, r3, #24
 8008f66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d001      	beq.n	8008f78 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e024      	b.n	8008fc2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f78:	4b14      	ldr	r3, [pc, #80]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d01a      	beq.n	8008fc0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008f8a:	4b10      	ldr	r3, [pc, #64]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008f90:	f023 0310 	bic.w	r3, r3, #16
 8008f94:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f96:	f7fa fbbf 	bl	8003718 <HAL_GetTick>
 8008f9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008f9c:	bf00      	nop
 8008f9e:	f7fa fbbb 	bl	8003718 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d0f9      	beq.n	8008f9e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fae:	4a07      	ldr	r2, [pc, #28]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb8:	4a04      	ldr	r2, [pc, #16]	@ (8008fcc <HAL_RCC_OscConfig+0xdb4>)
 8008fba:	f043 0310 	orr.w	r3, r3, #16
 8008fbe:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3738      	adds	r7, #56	@ 0x38
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	46020c00 	.word	0x46020c00

08008fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e1d9      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fe4:	4b9b      	ldr	r3, [pc, #620]	@ (8009254 <HAL_RCC_ClockConfig+0x284>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d910      	bls.n	8009014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff2:	4b98      	ldr	r3, [pc, #608]	@ (8009254 <HAL_RCC_ClockConfig+0x284>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f023 020f 	bic.w	r2, r3, #15
 8008ffa:	4996      	ldr	r1, [pc, #600]	@ (8009254 <HAL_RCC_ClockConfig+0x284>)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009002:	4b94      	ldr	r3, [pc, #592]	@ (8009254 <HAL_RCC_ClockConfig+0x284>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d001      	beq.n	8009014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e1c1      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695a      	ldr	r2, [r3, #20]
 8009024:	4b8c      	ldr	r3, [pc, #560]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800902c:	429a      	cmp	r2, r3
 800902e:	d908      	bls.n	8009042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009030:	4b89      	ldr	r3, [pc, #548]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	4986      	ldr	r1, [pc, #536]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800903e:	4313      	orrs	r3, r2
 8009040:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	4b81      	ldr	r3, [pc, #516]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	091b      	lsrs	r3, r3, #4
 8009058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800905c:	429a      	cmp	r2, r3
 800905e:	d909      	bls.n	8009074 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009060:	4b7d      	ldr	r3, [pc, #500]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	497a      	ldr	r1, [pc, #488]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009070:	4313      	orrs	r3, r2
 8009072:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d010      	beq.n	80090a2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	4b74      	ldr	r3, [pc, #464]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800908c:	429a      	cmp	r2, r3
 800908e:	d908      	bls.n	80090a2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009090:	4b71      	ldr	r3, [pc, #452]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	496e      	ldr	r1, [pc, #440]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	4b69      	ldr	r3, [pc, #420]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d908      	bls.n	80090d0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80090be:	4b66      	ldr	r3, [pc, #408]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f023 020f 	bic.w	r2, r3, #15
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	4963      	ldr	r1, [pc, #396]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80d2 	beq.w	8009282 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80090de:	2300      	movs	r3, #0
 80090e0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d143      	bne.n	8009172 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80090ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d110      	bne.n	800911a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090f8:	4b57      	ldr	r3, [pc, #348]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80090fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090fe:	4a56      	ldr	r2, [pc, #344]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009100:	f043 0304 	orr.w	r3, r3, #4
 8009104:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009108:	4b53      	ldr	r3, [pc, #332]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800910a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	60bb      	str	r3, [r7, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009116:	2301      	movs	r3, #1
 8009118:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800911a:	f7fa fafd 	bl	8003718 <HAL_GetTick>
 800911e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009120:	4b4e      	ldr	r3, [pc, #312]	@ (800925c <HAL_RCC_ClockConfig+0x28c>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00f      	beq.n	800914c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800912e:	f7fa faf3 	bl	8003718 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e12b      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009140:	4b46      	ldr	r3, [pc, #280]	@ (800925c <HAL_RCC_ClockConfig+0x28c>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0f0      	beq.n	800912e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d107      	bne.n	8009162 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009152:	4b41      	ldr	r3, [pc, #260]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009158:	4a3f      	ldr	r2, [pc, #252]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800915a:	f023 0304 	bic.w	r3, r3, #4
 800915e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009162:	4b3d      	ldr	r3, [pc, #244]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d121      	bne.n	80091b2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e112      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d107      	bne.n	800918a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800917a:	4b37      	ldr	r3, [pc, #220]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d115      	bne.n	80091b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e106      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d107      	bne.n	80091a2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009192:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0304 	and.w	r3, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e0fa      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e0f2      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80091b2:	4b29      	ldr	r3, [pc, #164]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f023 0203 	bic.w	r2, r3, #3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4926      	ldr	r1, [pc, #152]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80091c4:	f7fa faa8 	bl	8003718 <HAL_GetTick>
 80091c8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d112      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091d2:	e00a      	b.n	80091ea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d4:	f7fa faa0 	bl	8003718 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e0d6      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 030c 	and.w	r3, r3, #12
 80091f2:	2b0c      	cmp	r3, #12
 80091f4:	d1ee      	bne.n	80091d4 <HAL_RCC_ClockConfig+0x204>
 80091f6:	e044      	b.n	8009282 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d112      	bne.n	8009226 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009200:	e00a      	b.n	8009218 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009202:	f7fa fa89 	bl	8003718 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009210:	4293      	cmp	r3, r2
 8009212:	d901      	bls.n	8009218 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e0bf      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009218:	4b0f      	ldr	r3, [pc, #60]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f003 030c 	and.w	r3, r3, #12
 8009220:	2b08      	cmp	r3, #8
 8009222:	d1ee      	bne.n	8009202 <HAL_RCC_ClockConfig+0x232>
 8009224:	e02d      	b.n	8009282 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d123      	bne.n	8009276 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800922e:	e00a      	b.n	8009246 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009230:	f7fa fa72 	bl	8003718 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800923e:	4293      	cmp	r3, r2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e0a8      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009246:	4b04      	ldr	r3, [pc, #16]	@ (8009258 <HAL_RCC_ClockConfig+0x288>)
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f003 030c 	and.w	r3, r3, #12
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1ee      	bne.n	8009230 <HAL_RCC_ClockConfig+0x260>
 8009252:	e016      	b.n	8009282 <HAL_RCC_ClockConfig+0x2b2>
 8009254:	40022000 	.word	0x40022000
 8009258:	46020c00 	.word	0x46020c00
 800925c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009260:	f7fa fa5a 	bl	8003718 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e090      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009276:	4b4a      	ldr	r3, [pc, #296]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f003 030c 	and.w	r3, r3, #12
 800927e:	2b04      	cmp	r3, #4
 8009280:	d1ee      	bne.n	8009260 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d010      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	4b43      	ldr	r3, [pc, #268]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	429a      	cmp	r2, r3
 800929c:	d208      	bcs.n	80092b0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800929e:	4b40      	ldr	r3, [pc, #256]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	f023 020f 	bic.w	r2, r3, #15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	493d      	ldr	r1, [pc, #244]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092b0:	4b3c      	ldr	r3, [pc, #240]	@ (80093a4 <HAL_RCC_ClockConfig+0x3d4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d210      	bcs.n	80092e0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092be:	4b39      	ldr	r3, [pc, #228]	@ (80093a4 <HAL_RCC_ClockConfig+0x3d4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f023 020f 	bic.w	r2, r3, #15
 80092c6:	4937      	ldr	r1, [pc, #220]	@ (80093a4 <HAL_RCC_ClockConfig+0x3d4>)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ce:	4b35      	ldr	r3, [pc, #212]	@ (80093a4 <HAL_RCC_ClockConfig+0x3d4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d001      	beq.n	80092e0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e05b      	b.n	8009398 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d010      	beq.n	800930e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	4b2b      	ldr	r3, [pc, #172]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d208      	bcs.n	800930e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80092fc:	4b28      	ldr	r3, [pc, #160]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4925      	ldr	r1, [pc, #148]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 800930a:	4313      	orrs	r3, r2
 800930c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d012      	beq.n	8009340 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	4b20      	ldr	r3, [pc, #128]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	091b      	lsrs	r3, r3, #4
 8009324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009328:	429a      	cmp	r2, r3
 800932a:	d209      	bcs.n	8009340 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800932c:	4b1c      	ldr	r3, [pc, #112]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	011b      	lsls	r3, r3, #4
 800933a:	4919      	ldr	r1, [pc, #100]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 800933c:	4313      	orrs	r3, r2
 800933e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b00      	cmp	r3, #0
 800934a:	d010      	beq.n	800936e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	695a      	ldr	r2, [r3, #20]
 8009350:	4b13      	ldr	r3, [pc, #76]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009358:	429a      	cmp	r2, r3
 800935a:	d208      	bcs.n	800936e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800935c:	4b10      	ldr	r3, [pc, #64]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 800935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009360:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	490d      	ldr	r1, [pc, #52]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 800936a:	4313      	orrs	r3, r2
 800936c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800936e:	f000 f821 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 8009372:	4602      	mov	r2, r0
 8009374:	4b0a      	ldr	r3, [pc, #40]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d0>)
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	f003 030f 	and.w	r3, r3, #15
 800937c:	490a      	ldr	r1, [pc, #40]	@ (80093a8 <HAL_RCC_ClockConfig+0x3d8>)
 800937e:	5ccb      	ldrb	r3, [r1, r3]
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
 8009384:	4a09      	ldr	r2, [pc, #36]	@ (80093ac <HAL_RCC_ClockConfig+0x3dc>)
 8009386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009388:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <HAL_RCC_ClockConfig+0x3e0>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f7fa f82d 	bl	80033ec <HAL_InitTick>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]

  return status;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	46020c00 	.word	0x46020c00
 80093a4:	40022000 	.word	0x40022000
 80093a8:	0800e2cc 	.word	0x0800e2cc
 80093ac:	20000d00 	.word	0x20000d00
 80093b0:	20000d04 	.word	0x20000d04

080093b4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b08b      	sub	sp, #44	@ 0x2c
 80093b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093c2:	4b78      	ldr	r3, [pc, #480]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 030c 	and.w	r3, r3, #12
 80093ca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093cc:	4b75      	ldr	r3, [pc, #468]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x34>
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b0c      	cmp	r3, #12
 80093e0:	d121      	bne.n	8009426 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d11e      	bne.n	8009426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80093e8:	4b6e      	ldr	r3, [pc, #440]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d107      	bne.n	8009404 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80093f4:	4b6b      	ldr	r3, [pc, #428]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093fa:	0b1b      	lsrs	r3, r3, #12
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	627b      	str	r3, [r7, #36]	@ 0x24
 8009402:	e005      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009404:	4b67      	ldr	r3, [pc, #412]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0f1b      	lsrs	r3, r3, #28
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009410:	4a65      	ldr	r2, [pc, #404]	@ (80095a8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d110      	bne.n	8009442 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009424:	e00d      	b.n	8009442 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009426:	4b5f      	ldr	r3, [pc, #380]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f003 030c 	and.w	r3, r3, #12
 800942e:	2b04      	cmp	r3, #4
 8009430:	d102      	bne.n	8009438 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009432:	4b5e      	ldr	r3, [pc, #376]	@ (80095ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009434:	623b      	str	r3, [r7, #32]
 8009436:	e004      	b.n	8009442 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b08      	cmp	r3, #8
 800943c:	d101      	bne.n	8009442 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800943e:	4b5b      	ldr	r3, [pc, #364]	@ (80095ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009440:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	2b0c      	cmp	r3, #12
 8009446:	f040 80a5 	bne.w	8009594 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800944a:	4b56      	ldr	r3, [pc, #344]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800944c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009454:	4b53      	ldr	r3, [pc, #332]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009462:	4b50      	ldr	r3, [pc, #320]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009466:	091b      	lsrs	r3, r3, #4
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800946e:	4b4d      	ldr	r3, [pc, #308]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009472:	08db      	lsrs	r3, r3, #3
 8009474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	fb02 f303 	mul.w	r3, r2, r3
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d003      	beq.n	8009498 <HAL_RCC_GetSysClockFreq+0xe4>
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b03      	cmp	r3, #3
 8009494:	d022      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0x128>
 8009496:	e043      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80095b0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094aa:	4b3e      	ldr	r3, [pc, #248]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80094be:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80095b4 <HAL_RCC_GetSysClockFreq+0x200>
 80094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094da:	e046      	b.n	800956a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80095b0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b2d      	ldr	r3, [pc, #180]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8009502:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80095b4 <HAL_RCC_GetSysClockFreq+0x200>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800950e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800951e:	e024      	b.n	800956a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009538:	4b1a      	ldr	r3, [pc, #104]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800953a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009548:	ed97 6a01 	vldr	s12, [r7, #4]
 800954c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80095b4 <HAL_RCC_GetSysClockFreq+0x200>
 8009550:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009554:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800955c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009568:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800956a:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800956c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956e:	0e1b      	lsrs	r3, r3, #24
 8009570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009574:	3301      	adds	r3, #1
 8009576:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009582:	edd7 6a07 	vldr	s13, [r7, #28]
 8009586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800958a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958e:	ee17 3a90 	vmov	r3, s15
 8009592:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009594:	6a3b      	ldr	r3, [r7, #32]
}
 8009596:	4618      	mov	r0, r3
 8009598:	372c      	adds	r7, #44	@ 0x2c
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	46020c00 	.word	0x46020c00
 80095a8:	0800e2e4 	.word	0x0800e2e4
 80095ac:	00f42400 	.word	0x00f42400
 80095b0:	4b742400 	.word	0x4b742400
 80095b4:	46000000 	.word	0x46000000

080095b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80095bc:	f7ff fefa 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <HAL_RCC_GetHCLKFreq+0x28>)
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	4906      	ldr	r1, [pc, #24]	@ (80095e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80095cc:	5ccb      	ldrb	r3, [r1, r3]
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	4a05      	ldr	r2, [pc, #20]	@ (80095e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80095d4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80095d6:	4b04      	ldr	r3, [pc, #16]	@ (80095e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80095d8:	681b      	ldr	r3, [r3, #0]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	46020c00 	.word	0x46020c00
 80095e4:	0800e2cc 	.word	0x0800e2cc
 80095e8:	20000d00 	.word	0x20000d00

080095ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80095f0:	f7ff ffe2 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b05      	ldr	r3, [pc, #20]	@ (800960c <HAL_RCC_GetPCLK1Freq+0x20>)
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4903      	ldr	r1, [pc, #12]	@ (8009610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009608:	4618      	mov	r0, r3
 800960a:	bd80      	pop	{r7, pc}
 800960c:	46020c00 	.word	0x46020c00
 8009610:	0800e2dc 	.word	0x0800e2dc

08009614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009618:	f7ff ffce 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 800961c:	4602      	mov	r2, r0
 800961e:	4b05      	ldr	r3, [pc, #20]	@ (8009634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	0a1b      	lsrs	r3, r3, #8
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	4903      	ldr	r1, [pc, #12]	@ (8009638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800962a:	5ccb      	ldrb	r3, [r1, r3]
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009630:	4618      	mov	r0, r3
 8009632:	bd80      	pop	{r7, pc}
 8009634:	46020c00 	.word	0x46020c00
 8009638:	0800e2dc 	.word	0x0800e2dc

0800963c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009640:	f7ff ffba 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 8009644:	4602      	mov	r2, r0
 8009646:	4b05      	ldr	r3, [pc, #20]	@ (800965c <HAL_RCC_GetPCLK3Freq+0x20>)
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	091b      	lsrs	r3, r3, #4
 800964c:	f003 0307 	and.w	r3, r3, #7
 8009650:	4903      	ldr	r1, [pc, #12]	@ (8009660 <HAL_RCC_GetPCLK3Freq+0x24>)
 8009652:	5ccb      	ldrb	r3, [r1, r3]
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009658:	4618      	mov	r0, r3
 800965a:	bd80      	pop	{r7, pc}
 800965c:	46020c00 	.word	0x46020c00
 8009660:	0800e2dc 	.word	0x0800e2dc

08009664 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	221f      	movs	r2, #31
 8009672:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8009674:	4b15      	ldr	r3, [pc, #84]	@ (80096cc <HAL_RCC_GetClockConfig+0x68>)
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	f003 0203 	and.w	r2, r3, #3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009680:	4b12      	ldr	r3, [pc, #72]	@ (80096cc <HAL_RCC_GetClockConfig+0x68>)
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	f003 020f 	and.w	r2, r3, #15
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800968c:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <HAL_RCC_GetClockConfig+0x68>)
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009698:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <HAL_RCC_GetClockConfig+0x68>)
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	091b      	lsrs	r3, r3, #4
 800969e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80096a6:	4b09      	ldr	r3, [pc, #36]	@ (80096cc <HAL_RCC_GetClockConfig+0x68>)
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096b2:	4b07      	ldr	r3, [pc, #28]	@ (80096d0 <HAL_RCC_GetClockConfig+0x6c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 020f 	and.w	r2, r3, #15
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	46020c00 	.word	0x46020c00
 80096d0:	40022000 	.word	0x40022000

080096d4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80096d8:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <HAL_RCC_EnableCSS+0x1c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a04      	ldr	r2, [pc, #16]	@ (80096f0 <HAL_RCC_EnableCSS+0x1c>)
 80096de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	46020c00 	.word	0x46020c00

080096f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80096f8:	4b07      	ldr	r3, [pc, #28]	@ (8009718 <HAL_RCC_NMI_IRQHandler+0x24>)
 80096fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009704:	d105      	bne.n	8009712 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009706:	f000 f809 	bl	800971c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800970a:	4b03      	ldr	r3, [pc, #12]	@ (8009718 <HAL_RCC_NMI_IRQHandler+0x24>)
 800970c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009710:	659a      	str	r2, [r3, #88]	@ 0x58
  }
}
 8009712:	bf00      	nop
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	46020c00 	.word	0x46020c00

0800971c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
	...

0800972c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009734:	4b3e      	ldr	r3, [pc, #248]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009742:	f7fe fcfb 	bl	800813c <HAL_PWREx_GetVoltageRange>
 8009746:	6178      	str	r0, [r7, #20]
 8009748:	e019      	b.n	800977e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800974a:	4b39      	ldr	r3, [pc, #228]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800974c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009750:	4a37      	ldr	r2, [pc, #220]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009752:	f043 0304 	orr.w	r3, r3, #4
 8009756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800975a:	4b35      	ldr	r3, [pc, #212]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800975c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009768:	f7fe fce8 	bl	800813c <HAL_PWREx_GetVoltageRange>
 800976c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800976e:	4b30      	ldr	r3, [pc, #192]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009774:	4a2e      	ldr	r2, [pc, #184]	@ (8009830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009776:	f023 0304 	bic.w	r3, r3, #4
 800977a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009784:	d003      	beq.n	800978e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800978c:	d109      	bne.n	80097a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009794:	d202      	bcs.n	800979c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009796:	2301      	movs	r3, #1
 8009798:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800979a:	e033      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800979c:	2300      	movs	r3, #0
 800979e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80097a0:	e030      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a8:	d208      	bcs.n	80097bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b0:	d102      	bne.n	80097b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80097b2:	2303      	movs	r3, #3
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	e025      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e035      	b.n	8009828 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c2:	d90f      	bls.n	80097e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097d0:	d902      	bls.n	80097d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	e015      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80097d8:	2301      	movs	r3, #1
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	e012      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	e00f      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ea:	d109      	bne.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f2:	d102      	bne.n	80097fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80097f4:	2301      	movs	r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	e004      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80097fa:	2302      	movs	r3, #2
 80097fc:	613b      	str	r3, [r7, #16]
 80097fe:	e001      	b.n	8009804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009800:	2301      	movs	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009804:	4b0b      	ldr	r3, [pc, #44]	@ (8009834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f023 020f 	bic.w	r2, r3, #15
 800980c:	4909      	ldr	r1, [pc, #36]	@ (8009834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009814:	4b07      	ldr	r3, [pc, #28]	@ (8009834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	d001      	beq.n	8009826 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	46020c00 	.word	0x46020c00
 8009834:	40022000 	.word	0x40022000

08009838 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b0c8      	sub	sp, #288	@ 0x120
 800983e:	af00      	add	r7, sp, #0
 8009840:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009844:	2300      	movs	r3, #0
 8009846:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800984a:	2300      	movs	r3, #0
 800984c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f002 0401 	and.w	r4, r2, #1
 800985c:	2500      	movs	r5, #0
 800985e:	ea54 0305 	orrs.w	r3, r4, r5
 8009862:	d00b      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009864:	4bd5      	ldr	r3, [pc, #852]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800986a:	f023 0103 	bic.w	r1, r3, #3
 800986e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009874:	4ad1      	ldr	r2, [pc, #836]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009876:	430b      	orrs	r3, r1
 8009878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800987c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f002 0802 	and.w	r8, r2, #2
 8009888:	f04f 0900 	mov.w	r9, #0
 800988c:	ea58 0309 	orrs.w	r3, r8, r9
 8009890:	d00b      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009892:	4bca      	ldr	r3, [pc, #808]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009898:	f023 010c 	bic.w	r1, r3, #12
 800989c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a2:	4ac6      	ldr	r2, [pc, #792]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098a4:	430b      	orrs	r3, r1
 80098a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b2:	f002 0a04 	and.w	sl, r2, #4
 80098b6:	f04f 0b00 	mov.w	fp, #0
 80098ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80098be:	d00b      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80098c0:	4bbe      	ldr	r3, [pc, #760]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098c6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80098ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d0:	4aba      	ldr	r2, [pc, #744]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098d2:	430b      	orrs	r3, r1
 80098d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f002 0308 	and.w	r3, r2, #8
 80098e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80098ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80098f2:	460b      	mov	r3, r1
 80098f4:	4313      	orrs	r3, r2
 80098f6:	d00b      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80098f8:	4bb0      	ldr	r3, [pc, #704]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009908:	4aac      	ldr	r2, [pc, #688]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800990a:	430b      	orrs	r3, r1
 800990c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f002 0310 	and.w	r3, r2, #16
 800991c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009920:	2300      	movs	r3, #0
 8009922:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009926:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800992a:	460b      	mov	r3, r1
 800992c:	4313      	orrs	r3, r2
 800992e:	d00b      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009930:	4ba2      	ldr	r3, [pc, #648]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009936:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800993a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009940:	4a9e      	ldr	r2, [pc, #632]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009942:	430b      	orrs	r3, r1
 8009944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009954:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009958:	2300      	movs	r3, #0
 800995a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800995e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009962:	460b      	mov	r3, r1
 8009964:	4313      	orrs	r3, r2
 8009966:	d00b      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009968:	4b94      	ldr	r3, [pc, #592]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800996a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800996e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009978:	4a90      	ldr	r2, [pc, #576]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800997a:	430b      	orrs	r3, r1
 800997c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f002 0320 	and.w	r3, r2, #32
 800998c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009990:	2300      	movs	r3, #0
 8009992:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009996:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800999a:	460b      	mov	r3, r1
 800999c:	4313      	orrs	r3, r2
 800999e:	d00b      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80099a0:	4b86      	ldr	r3, [pc, #536]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099a6:	f023 0107 	bic.w	r1, r3, #7
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099b0:	4a82      	ldr	r2, [pc, #520]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099b2:	430b      	orrs	r3, r1
 80099b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	d00b      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80099d8:	4b78      	ldr	r3, [pc, #480]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099de:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80099e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e8:	4a74      	ldr	r2, [pc, #464]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099ea:	430b      	orrs	r3, r1
 80099ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80099fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	d00b      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009a10:	4b6a      	ldr	r3, [pc, #424]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a20:	4a66      	ldr	r2, [pc, #408]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a22:	430b      	orrs	r3, r1
 8009a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4313      	orrs	r3, r2
 8009a46:	d00b      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009a48:	4b5c      	ldr	r3, [pc, #368]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a58:	4a58      	ldr	r2, [pc, #352]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d00b      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009a80:	4b4e      	ldr	r3, [pc, #312]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a86:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a90:	4a4a      	ldr	r2, [pc, #296]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009aae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009ab8:	4b40      	ldr	r3, [pc, #256]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009abe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aca:	430b      	orrs	r3, r1
 8009acc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ae6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009aea:	460b      	mov	r3, r1
 8009aec:	4313      	orrs	r3, r2
 8009aee:	d00c      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009af0:	4b32      	ldr	r3, [pc, #200]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009af6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b02:	4a2e      	ldr	r2, [pc, #184]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b04:	430b      	orrs	r3, r1
 8009b06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009b16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4313      	orrs	r3, r2
 8009b28:	d00c      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009b2a:	4b24      	ldr	r3, [pc, #144]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b30:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b54:	2300      	movs	r3, #0
 8009b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4313      	orrs	r3, r2
 8009b62:	d00c      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009b64:	4b15      	ldr	r3, [pc, #84]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b6a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b76:	4a11      	ldr	r2, [pc, #68]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	d010      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009b9e:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ba4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb0:	4a02      	ldr	r2, [pc, #8]	@ (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bb2:	430b      	orrs	r3, r1
 8009bb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009bba:	bf00      	nop
 8009bbc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bd6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	d04c      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009be8:	2b80      	cmp	r3, #128	@ 0x80
 8009bea:	d02d      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009bec:	2b80      	cmp	r3, #128	@ 0x80
 8009bee:	d827      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf0:	2b60      	cmp	r3, #96	@ 0x60
 8009bf2:	d02b      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bf4:	2b60      	cmp	r3, #96	@ 0x60
 8009bf6:	d823      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf8:	2b40      	cmp	r3, #64	@ 0x40
 8009bfa:	d006      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009bfc:	2b40      	cmp	r3, #64	@ 0x40
 8009bfe:	d81f      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d011      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c08:	e01a      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c0a:	4bc0      	ldr	r3, [pc, #768]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	4abf      	ldr	r2, [pc, #764]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c16:	e01a      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 fce8 	bl	800c5f4 <RCCEx_PLL2_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c2a:	e010      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c30:	332c      	adds	r3, #44	@ 0x2c
 8009c32:	4618      	mov	r0, r3
 8009c34:	f002 fd76 	bl	800c724 <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c3e:	e006      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c46:	e002      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c48:	bf00      	nop
 8009c4a:	e000      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10d      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009c56:	4bad      	ldr	r3, [pc, #692]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c5c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c68:	4aa8      	ldr	r2, [pc, #672]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009c70:	e003      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c72:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c76:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c90:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c94:	460b      	mov	r3, r1
 8009c96:	4313      	orrs	r3, r2
 8009c98:	d053      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca6:	d033      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cac:	d82c      	bhi.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cb2:	d02f      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cb8:	d826      	bhi.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cbe:	d008      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc4:	d820      	bhi.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cce:	d011      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cd0:	e01a      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd6:	4a8d      	ldr	r2, [pc, #564]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cdc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cde:	e01a      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 fc84 	bl	800c5f4 <RCCEx_PLL2_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cf2:	e010      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf8:	332c      	adds	r3, #44	@ 0x2c
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f002 fd12 	bl	800c724 <RCCEx_PLL3_Config>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d06:	e006      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009d0e:	e002      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d10:	bf00      	nop
 8009d12:	e000      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10d      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d24:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d30:	4a76      	ldr	r2, [pc, #472]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d32:	430b      	orrs	r3, r1
 8009d34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009d38:	e003      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d3e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	d046      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d6e:	d028      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d74:	d821      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d7a:	d022      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d80:	d81b      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d86:	d01c      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d8c:	d815      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d92:	d008      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d98:	d80f      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d011      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009da2:	d00e      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009da4:	e009      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009daa:	3308      	adds	r3, #8
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 fc21 	bl	800c5f4 <RCCEx_PLL2_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009db8:	e004      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009dc0:	e000      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10d      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dd2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009dde:	4a4b      	ldr	r2, [pc, #300]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009de0:	430b      	orrs	r3, r1
 8009de2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009de6:	e003      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009dec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e00:	2300      	movs	r3, #0
 8009e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	d03f      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	d81e      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e63 	.word	0x08009e63
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e47 	.word	0x08009e47
 8009e30:	08009e63 	.word	0x08009e63
 8009e34:	08009e63 	.word	0x08009e63
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e38:	4b34      	ldr	r3, [pc, #208]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3c:	4a33      	ldr	r2, [pc, #204]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e42:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009e44:	e00e      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e4a:	332c      	adds	r3, #44	@ 0x2c
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 fc69 	bl	800c724 <RCCEx_PLL3_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e58:	e004      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e60:	e000      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009e62:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e64:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10d      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009e6c:	4b27      	ldr	r3, [pc, #156]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e72:	f023 0107 	bic.w	r1, r3, #7
 8009e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e7e:	4a23      	ldr	r2, [pc, #140]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e80:	430b      	orrs	r3, r1
 8009e82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009e86:	e003      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e88:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e8c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ea2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d04c      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009eb8:	d02a      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009eba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ebe:	d821      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ec0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ec4:	d026      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009ec6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009eca:	d81b      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed6:	d815      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01d      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee0:	d110      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	4a09      	ldr	r2, [pc, #36]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eec:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009eee:	e014      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef4:	332c      	adds	r3, #44	@ 0x2c
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 fc14 	bl	800c724 <RCCEx_PLL3_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f02:	e00a      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f0a:	e006      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009f0c:	46020c00 	.word	0x46020c00
        break;
 8009f10:	bf00      	nop
 8009f12:	e002      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f14:	bf00      	nop
 8009f16:	e000      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f18:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009f1a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10d      	bne.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009f22:	4baf      	ldr	r3, [pc, #700]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f34:	4aaa      	ldr	r2, [pc, #680]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f36:	430b      	orrs	r3, r1
 8009f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f42:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009f52:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f54:	2300      	movs	r3, #0
 8009f56:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	f000 80b5 	beq.w	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f6a:	4b9d      	ldr	r3, [pc, #628]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d113      	bne.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f78:	4b99      	ldr	r3, [pc, #612]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f7e:	4a98      	ldr	r2, [pc, #608]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f80:	f043 0304 	orr.w	r3, r3, #4
 8009f84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009f88:	4b95      	ldr	r3, [pc, #596]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009f96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009fa0:	4b90      	ldr	r3, [pc, #576]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa4:	4a8f      	ldr	r2, [pc, #572]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fac:	f7f9 fbb4 	bl	8003718 <HAL_GetTick>
 8009fb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fb4:	e00b      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb6:	f7f9 fbaf 	bl	8003718 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d903      	bls.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009fcc:	e005      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fce:	4b85      	ldr	r3, [pc, #532]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0ed      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009fda:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d165      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fe2:	4b7f      	ldr	r3, [pc, #508]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d023      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ffc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a004:	4293      	cmp	r3, r2
 800a006:	d01b      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a008:	4b75      	ldr	r3, [pc, #468]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a00a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a00e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a012:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a016:	4b72      	ldr	r3, [pc, #456]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a01c:	4a70      	ldr	r2, [pc, #448]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a01e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a026:	4b6e      	ldr	r3, [pc, #440]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a02c:	4a6c      	ldr	r2, [pc, #432]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a02e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a036:	4a6a      	ldr	r2, [pc, #424]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a03c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d019      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a04c:	f7f9 fb64 	bl	8003718 <HAL_GetTick>
 800a050:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a054:	e00d      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a056:	f7f9 fb5f 	bl	8003718 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a066:	429a      	cmp	r2, r3
 800a068:	d903      	bls.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800a070:	e006      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a072:	4b5b      	ldr	r3, [pc, #364]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0ea      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a080:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10d      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a088:	4b55      	ldr	r3, [pc, #340]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a08a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a08e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a096:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a09a:	4a51      	ldr	r2, [pc, #324]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a09c:	430b      	orrs	r3, r1
 800a09e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0a2:	e008      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0a8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800a0ac:	e003      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0b6:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d107      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0be:	4b48      	ldr	r3, [pc, #288]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0c4:	4a46      	ldr	r2, [pc, #280]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c6:	f023 0304 	bic.w	r3, r3, #4
 800a0ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a0da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0dc:	2300      	movs	r3, #0
 800a0de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	d042      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a0f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a0f6:	d022      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a0f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a0fc:	d81b      	bhi.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a0fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a102:	d011      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a108:	d815      	bhi.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d019      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a10e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a112:	d110      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a118:	3308      	adds	r3, #8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f002 fa6a 	bl	800c5f4 <RCCEx_PLL2_Config>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a126:	e00d      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a128:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a12c:	4a2c      	ldr	r2, [pc, #176]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a12e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a132:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a134:	e006      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a13e:	bf00      	nop
 800a140:	e000      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a142:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a144:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10d      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a14c:	4b24      	ldr	r3, [pc, #144]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a152:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a15e:	4a20      	ldr	r2, [pc, #128]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a160:	430b      	orrs	r3, r1
 800a162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a166:	e003      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a168:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a16c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a17c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a17e:	2300      	movs	r3, #0
 800a180:	667b      	str	r3, [r7, #100]	@ 0x64
 800a182:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a186:	460b      	mov	r3, r1
 800a188:	4313      	orrs	r3, r2
 800a18a:	d031      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a198:	d00b      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a19a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a19e:	d804      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a8:	d007      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a1b0:	e004      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b2:	bf00      	nop
 800a1b4:	e002      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b6:	bf00      	nop
 800a1b8:	e000      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d111      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a1c4:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1d6:	4a02      	ldr	r2, [pc, #8]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a1de:	e007      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a1e0:	46020c00 	.word	0x46020c00
 800a1e4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1ec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1fe:	2300      	movs	r3, #0
 800a200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a202:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a206:	460b      	mov	r3, r1
 800a208:	4313      	orrs	r3, r2
 800a20a:	d00c      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a20c:	4bb2      	ldr	r3, [pc, #712]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a20e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a212:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800a216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a21a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a21e:	4aae      	ldr	r2, [pc, #696]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a220:	430b      	orrs	r3, r1
 800a222:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a232:	653b      	str	r3, [r7, #80]	@ 0x50
 800a234:	2300      	movs	r3, #0
 800a236:	657b      	str	r3, [r7, #84]	@ 0x54
 800a238:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a23c:	460b      	mov	r3, r1
 800a23e:	4313      	orrs	r3, r2
 800a240:	d019      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a24a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a24e:	d105      	bne.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a250:	4ba1      	ldr	r3, [pc, #644]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	4aa0      	ldr	r2, [pc, #640]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a25a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a25c:	4b9e      	ldr	r3, [pc, #632]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a25e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a262:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a26e:	4a9a      	ldr	r2, [pc, #616]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a270:	430b      	orrs	r3, r1
 800a272:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a282:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a284:	2300      	movs	r3, #0
 800a286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a288:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d00c      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a292:	4b91      	ldr	r3, [pc, #580]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a298:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a2a4:	4a8c      	ldr	r2, [pc, #560]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a2b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	d00c      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a2c8:	4b83      	ldr	r3, [pc, #524]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a2da:	4a7f      	ldr	r2, [pc, #508]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a2ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	d00c      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a2fe:	4b76      	ldr	r3, [pc, #472]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a304:	f023 0118 	bic.w	r1, r3, #24
 800a308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a30c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a310:	4a71      	ldr	r2, [pc, #452]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a312:	430b      	orrs	r3, r1
 800a314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a324:	633b      	str	r3, [r7, #48]	@ 0x30
 800a326:	2300      	movs	r3, #0
 800a328:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a32e:	460b      	mov	r3, r1
 800a330:	4313      	orrs	r3, r2
 800a332:	d032      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a33c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a340:	d105      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a342:	4b65      	ldr	r3, [pc, #404]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a346:	4a64      	ldr	r2, [pc, #400]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a34c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a352:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a356:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a35a:	d108      	bne.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a360:	3308      	adds	r3, #8
 800a362:	4618      	mov	r0, r3
 800a364:	f002 f946 	bl	800c5f4 <RCCEx_PLL2_Config>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a36e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10d      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a376:	4b58      	ldr	r3, [pc, #352]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a37c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a388:	4a53      	ldr	r2, [pc, #332]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a38a:	430b      	orrs	r3, r1
 800a38c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a396:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	d04a      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a3c2:	d01e      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a3c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a3c8:	d825      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3ce:	d00e      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a3d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3d4:	d81f      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d021      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a3da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3de:	d11a      	bne.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e0:	4b3d      	ldr	r3, [pc, #244]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e4:	4a3c      	ldr	r2, [pc, #240]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ea:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3ec:	e018      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 f8fd 	bl	800c5f4 <RCCEx_PLL2_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a400:	e00e      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a406:	332c      	adds	r3, #44	@ 0x2c
 800a408:	4618      	mov	r0, r3
 800a40a:	f002 f98b 	bl	800c724 <RCCEx_PLL3_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a414:	e004      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a41c:	e000      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a41e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a420:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10d      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a428:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a42a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a42e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a436:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a43a:	4927      	ldr	r1, [pc, #156]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a442:	e003      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a444:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a448:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	2300      	movs	r3, #0
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a45e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a462:	460b      	mov	r3, r1
 800a464:	4313      	orrs	r3, r2
 800a466:	d03d      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a474:	d00e      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a47a:	d815      	bhi.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d017      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a484:	d110      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a486:	4b14      	ldr	r3, [pc, #80]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48a:	4a13      	ldr	r2, [pc, #76]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a48c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a490:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a492:	e00e      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a498:	3308      	adds	r3, #8
 800a49a:	4618      	mov	r0, r3
 800a49c:	f002 f8aa 	bl	800c5f4 <RCCEx_PLL2_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a4a6:	e004      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a4ae:	e000      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a4b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d110      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a4ba:	4b07      	ldr	r3, [pc, #28]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a4c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4cc:	4902      	ldr	r1, [pc, #8]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a4d4:	e006      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a4d6:	bf00      	nop
 800a4d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a4e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a4f0:	61bb      	str	r3, [r7, #24]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d00c      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a500:	4b68      	ldr	r3, [pc, #416]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a506:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a50e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a512:	4964      	ldr	r1, [pc, #400]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	2100      	movs	r1, #0
 800a524:	6139      	str	r1, [r7, #16]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	617b      	str	r3, [r7, #20]
 800a52c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a530:	460b      	mov	r3, r1
 800a532:	4313      	orrs	r3, r2
 800a534:	d036      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a53a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00c      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a546:	d113      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a54c:	3308      	adds	r3, #8
 800a54e:	4618      	mov	r0, r3
 800a550:	f002 f850 	bl	800c5f4 <RCCEx_PLL2_Config>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a55a:	e00d      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a560:	332c      	adds	r3, #44	@ 0x2c
 800a562:	4618      	mov	r0, r3
 800a564:	f002 f8de 	bl	800c724 <RCCEx_PLL3_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a56e:	e003      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a578:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a580:	4b48      	ldr	r3, [pc, #288]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a582:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a586:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a592:	4944      	ldr	r1, [pc, #272]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a594:	4313      	orrs	r3, r2
 800a596:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a59a:	e003      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	d024      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d108      	bne.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d0:	332c      	adds	r3, #44	@ 0x2c
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 f8a6 	bl	800c724 <RCCEx_PLL3_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a5de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10d      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a5e6:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5ec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5f8:	492a      	ldr	r1, [pc, #168]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a600:	e003      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a606:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	2100      	movs	r1, #0
 800a614:	6039      	str	r1, [r7, #0]
 800a616:	f003 0308 	and.w	r3, r3, #8
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a620:	460b      	mov	r3, r1
 800a622:	4313      	orrs	r3, r2
 800a624:	d036      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a62a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a62e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a632:	d00d      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a634:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a638:	d811      	bhi.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a63a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a63e:	d012      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a644:	d80b      	bhi.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00d      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64e:	d106      	bne.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a650:	4b14      	ldr	r3, [pc, #80]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a654:	4a13      	ldr	r2, [pc, #76]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a65a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a65c:	e004      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a664:	e000      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a668:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10d      	bne.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a670:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a676:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a67e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a682:	4908      	ldr	r1, [pc, #32]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a684:	4313      	orrs	r3, r2
 800a686:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a68a:	e003      	b.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a690:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a694:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a698:	4618      	mov	r0, r3
 800a69a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a4:	46020c00 	.word	0x46020c00

0800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b089      	sub	sp, #36	@ 0x24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a6b0:	4ba6      	ldr	r3, [pc, #664]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a6ba:	4ba4      	ldr	r3, [pc, #656]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a6c4:	4ba1      	ldr	r3, [pc, #644]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a6d2:	4b9e      	ldr	r3, [pc, #632]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d6:	091b      	lsrs	r3, r3, #4
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6de:	4b9b      	ldr	r3, [pc, #620]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e2:	08db      	lsrs	r3, r3, #3
 800a6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d062      	beq.n	800a7c6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2b03      	cmp	r3, #3
 800a704:	f200 8081 	bhi.w	800a80a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d024      	beq.n	800a758 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d17a      	bne.n	800a80a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a726:	4b89      	ldr	r3, [pc, #548]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a736:	ed97 6a02 	vldr	s12, [r7, #8]
 800a73a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a742:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a756:	e08f      	b.n	800a878 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a758:	4b7c      	ldr	r3, [pc, #496]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a764:	4b79      	ldr	r3, [pc, #484]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	0f1b      	lsrs	r3, r3, #28
 800a76a:	f003 030f 	and.w	r3, r3, #15
 800a76e:	e006      	b.n	800a77e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a770:	4b76      	ldr	r3, [pc, #472]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	0f1b      	lsrs	r3, r3, #28
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	4a76      	ldr	r2, [pc, #472]	@ (800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a784:	ee07 3a90 	vmov	s15, r3
 800a788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	ee07 3a90 	vmov	s15, r3
 800a7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7c4:	e058      	b.n	800a878 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a7d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a800:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a808:	e036      	b.n	800a878 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a80a:	4b50      	ldr	r3, [pc, #320]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a816:	4b4d      	ldr	r3, [pc, #308]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	0f1b      	lsrs	r3, r3, #28
 800a81c:	f003 030f 	and.w	r3, r3, #15
 800a820:	e006      	b.n	800a830 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a822:	4b4a      	ldr	r3, [pc, #296]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a828:	041b      	lsls	r3, r3, #16
 800a82a:	0f1b      	lsrs	r3, r3, #28
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	4a49      	ldr	r2, [pc, #292]	@ (800a958 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	ee07 3a90 	vmov	s15, r3
 800a844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a856:	ed97 6a02 	vldr	s12, [r7, #8]
 800a85a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a876:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a878:	4b34      	ldr	r3, [pc, #208]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d017      	beq.n	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a884:	4b31      	ldr	r3, [pc, #196]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a888:	0a5b      	lsrs	r3, r3, #9
 800a88a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a89a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a89e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8aa:	ee17 2a90 	vmov	r2, s15
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	e002      	b.n	800a8ba <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a8ba:	4b24      	ldr	r3, [pc, #144]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8c6:	4b21      	ldr	r3, [pc, #132]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ca:	0c1b      	lsrs	r3, r3, #16
 800a8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8d0:	ee07 3a90 	vmov	s15, r3
 800a8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a8d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ec:	ee17 2a90 	vmov	r2, s15
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	605a      	str	r2, [r3, #4]
 800a8f4:	e002      	b.n	800a8fc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a8fc:	4b13      	ldr	r3, [pc, #76]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d017      	beq.n	800a938 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a908:	4b10      	ldr	r3, [pc, #64]	@ (800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90c:	0e1b      	lsrs	r3, r3, #24
 800a90e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a91a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a91e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a922:	edd7 6a07 	vldr	s13, [r7, #28]
 800a926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a92e:	ee17 2a90 	vmov	r2, s15
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a936:	e002      	b.n	800a93e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	609a      	str	r2, [r3, #8]
}
 800a93e:	bf00      	nop
 800a940:	3724      	adds	r7, #36	@ 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	46020c00 	.word	0x46020c00
 800a950:	4b742400 	.word	0x4b742400
 800a954:	46000000 	.word	0x46000000
 800a958:	0800e2e4 	.word	0x0800e2e4

0800a95c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b089      	sub	sp, #36	@ 0x24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a964:	4ba6      	ldr	r3, [pc, #664]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a96e:	4ba4      	ldr	r3, [pc, #656]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a978:	4ba1      	ldr	r3, [pc, #644]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97c:	0a1b      	lsrs	r3, r3, #8
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	3301      	adds	r3, #1
 800a984:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a986:	4b9e      	ldr	r3, [pc, #632]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98a:	091b      	lsrs	r3, r3, #4
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a992:	4b9b      	ldr	r3, [pc, #620]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a996:	08db      	lsrs	r3, r3, #3
 800a998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	fb02 f303 	mul.w	r3, r2, r3
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d062      	beq.n	800aa7a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	f200 8081 	bhi.w	800aabe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d024      	beq.n	800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d17a      	bne.n	800aabe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9da:	4b89      	ldr	r3, [pc, #548]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa0a:	e08f      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa0c:	4b7c      	ldr	r3, [pc, #496]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800aa18:	4b79      	ldr	r3, [pc, #484]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	0f1b      	lsrs	r3, r3, #28
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	e006      	b.n	800aa32 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800aa24:	4b76      	ldr	r3, [pc, #472]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa2a:	041b      	lsls	r3, r3, #16
 800aa2c:	0f1b      	lsrs	r3, r3, #28
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	4a76      	ldr	r2, [pc, #472]	@ (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aa34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa58:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa78:	e058      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aa88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa9c:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaa0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aaa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aabc:	e036      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aabe:	4b50      	ldr	r3, [pc, #320]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d005      	beq.n	800aad6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800aaca:	4b4d      	ldr	r3, [pc, #308]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	0f1b      	lsrs	r3, r3, #28
 800aad0:	f003 030f 	and.w	r3, r3, #15
 800aad4:	e006      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800aad6:	4b4a      	ldr	r3, [pc, #296]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aadc:	041b      	lsls	r3, r3, #16
 800aade:	0f1b      	lsrs	r3, r3, #28
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	4a49      	ldr	r2, [pc, #292]	@ (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	ee07 3a90 	vmov	s15, r3
 800aaf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab2c:	4b34      	ldr	r3, [pc, #208]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d017      	beq.n	800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab38:	4b31      	ldr	r3, [pc, #196]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab3c:	0a5b      	lsrs	r3, r3, #9
 800ab3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ab4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5e:	ee17 2a90 	vmov	r2, s15
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	e002      	b.n	800ab6e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ab6e:	4b24      	ldr	r3, [pc, #144]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d017      	beq.n	800abaa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab7a:	4b21      	ldr	r3, [pc, #132]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7e:	0c1b      	lsrs	r3, r3, #16
 800ab80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ab8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba0:	ee17 2a90 	vmov	r2, s15
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	605a      	str	r2, [r3, #4]
 800aba8:	e002      	b.n	800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800abb0:	4b13      	ldr	r3, [pc, #76]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d017      	beq.n	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abbc:	4b10      	ldr	r3, [pc, #64]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abc0:	0e1b      	lsrs	r3, r3, #24
 800abc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800abce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe2:	ee17 2a90 	vmov	r2, s15
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abea:	e002      	b.n	800abf2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
}
 800abf2:	bf00      	nop
 800abf4:	3724      	adds	r7, #36	@ 0x24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	46020c00 	.word	0x46020c00
 800ac04:	4b742400 	.word	0x4b742400
 800ac08:	46000000 	.word	0x46000000
 800ac0c:	0800e2e4 	.word	0x0800e2e4

0800ac10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b089      	sub	sp, #36	@ 0x24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac18:	4ba6      	ldr	r3, [pc, #664]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac20:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac22:	4ba4      	ldr	r3, [pc, #656]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ac2c:	4ba1      	ldr	r3, [pc, #644]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac30:	0a1b      	lsrs	r3, r3, #8
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	3301      	adds	r3, #1
 800ac38:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ac3a:	4b9e      	ldr	r3, [pc, #632]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac3e:	091b      	lsrs	r3, r3, #4
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ac46:	4b9b      	ldr	r3, [pc, #620]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac4a:	08db      	lsrs	r3, r3, #3
 800ac4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d062      	beq.n	800ad2e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	f200 8081 	bhi.w	800ad72 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d024      	beq.n	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d17a      	bne.n	800ad72 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b89      	ldr	r3, [pc, #548]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aca2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800acae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800acbe:	e08f      	b.n	800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800acc0:	4b7c      	ldr	r3, [pc, #496]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800accc:	4b79      	ldr	r3, [pc, #484]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	0f1b      	lsrs	r3, r3, #28
 800acd2:	f003 030f 	and.w	r3, r3, #15
 800acd6:	e006      	b.n	800ace6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800acd8:	4b76      	ldr	r3, [pc, #472]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	0f1b      	lsrs	r3, r3, #28
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	4a76      	ldr	r2, [pc, #472]	@ (800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ace8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	ee07 3a90 	vmov	s15, r3
 800ad08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad10:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad20:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad2c:	e058      	b.n	800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad38:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ad3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad40:	4b5c      	ldr	r3, [pc, #368]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad50:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad54:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad58:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad70:	e036      	b.n	800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad72:	4b50      	ldr	r3, [pc, #320]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800ad7e:	4b4d      	ldr	r3, [pc, #308]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	0f1b      	lsrs	r3, r3, #28
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	e006      	b.n	800ad98 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ad8a:	4b4a      	ldr	r3, [pc, #296]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad90:	041b      	lsls	r3, r3, #16
 800ad92:	0f1b      	lsrs	r3, r3, #28
 800ad94:	f003 030f 	and.w	r3, r3, #15
 800ad98:	4a49      	ldr	r2, [pc, #292]	@ (800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ad9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	ee07 3a90 	vmov	s15, r3
 800adac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800adc2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800adc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800add6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adde:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ade0:	4b34      	ldr	r3, [pc, #208]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ade2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d017      	beq.n	800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adec:	4b31      	ldr	r3, [pc, #196]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adf0:	0a5b      	lsrs	r3, r3, #9
 800adf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800adfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae02:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae12:	ee17 2a90 	vmov	r2, s15
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	e002      	b.n	800ae22 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae22:	4b24      	ldr	r3, [pc, #144]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d017      	beq.n	800ae5e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae2e:	4b21      	ldr	r3, [pc, #132]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae32:	0c1b      	lsrs	r3, r3, #16
 800ae34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ae40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae44:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae54:	ee17 2a90 	vmov	r2, s15
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	605a      	str	r2, [r3, #4]
 800ae5c:	e002      	b.n	800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ae64:	4b13      	ldr	r3, [pc, #76]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae70:	4b10      	ldr	r3, [pc, #64]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae74:	0e1b      	lsrs	r3, r3, #24
 800ae76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ae82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae86:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae96:	ee17 2a90 	vmov	r2, s15
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae9e:	e002      	b.n	800aea6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	609a      	str	r2, [r3, #8]
}
 800aea6:	bf00      	nop
 800aea8:	3724      	adds	r7, #36	@ 0x24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	46020c00 	.word	0x46020c00
 800aeb8:	4b742400 	.word	0x4b742400
 800aebc:	46000000 	.word	0x46000000
 800aec0:	0800e2e4 	.word	0x0800e2e4

0800aec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08e      	sub	sp, #56	@ 0x38
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aece:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800aed6:	430b      	orrs	r3, r1
 800aed8:	d145      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aeda:	4ba7      	ldr	r3, [pc, #668]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aedc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aee4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aee6:	4ba4      	ldr	r3, [pc, #656]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d108      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aefa:	d104      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800aefc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
 800af02:	f001 bb5a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af06:	4b9c      	ldr	r3, [pc, #624]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af14:	d114      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af1c:	d110      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af1e:	4b96      	ldr	r3, [pc, #600]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af2c:	d103      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800af2e:	23fa      	movs	r3, #250	@ 0xfa
 800af30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af32:	f001 bb42 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af36:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af3c:	f001 bb3d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800af40:	4b8d      	ldr	r3, [pc, #564]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af4c:	d107      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af54:	d103      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800af56:	4b89      	ldr	r3, [pc, #548]	@ (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800af58:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5a:	f001 bb2e 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	637b      	str	r3, [r7, #52]	@ 0x34
 800af62:	f001 bb2a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800af6e:	430b      	orrs	r3, r1
 800af70:	d151      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800af72:	4b81      	ldr	r3, [pc, #516]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af78:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800af7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	2b80      	cmp	r3, #128	@ 0x80
 800af82:	d035      	beq.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	2b80      	cmp	r3, #128	@ 0x80
 800af88:	d841      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	2b60      	cmp	r3, #96	@ 0x60
 800af8e:	d02a      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	2b60      	cmp	r3, #96	@ 0x60
 800af94:	d83b      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	2b40      	cmp	r3, #64	@ 0x40
 800af9a:	d009      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	2b40      	cmp	r3, #64	@ 0x40
 800afa0:	d835      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00c      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800afa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afaa:	2b20      	cmp	r3, #32
 800afac:	d012      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800afae:	e02e      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fb77 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800afba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afbe:	f001 bafc 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc2:	f107 0318 	add.w	r3, r7, #24
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff fcc8 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afd0:	f001 baf3 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd4:	f107 030c 	add.w	r3, r7, #12
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fe19 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afe2:	f001 baea 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800afe6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800afea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afec:	f001 bae5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aff0:	4b61      	ldr	r3, [pc, #388]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800affc:	d103      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800affe:	4b60      	ldr	r3, [pc, #384]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b002:	f001 bada 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b00a:	f001 bad6 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b00e:	2300      	movs	r3, #0
 800b010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b012:	f001 bad2 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b01a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b01e:	430b      	orrs	r3, r1
 800b020:	d158      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b022:	4b55      	ldr	r3, [pc, #340]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b028:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b02c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b034:	d03b      	beq.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b03c:	d846      	bhi.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b044:	d02e      	beq.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b04c:	d83e      	bhi.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b054:	d00b      	beq.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05c:	d836      	bhi.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00d      	beq.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b06a:	d012      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b06c:	e02e      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff fb18 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b07c:	f001 ba9d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b080:	f107 0318 	add.w	r3, r7, #24
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fc69 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b08e:	f001 ba94 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fdba 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0a0:	f001 ba8b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0a4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b0a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0aa:	f001 ba86 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0ae:	4b32      	ldr	r3, [pc, #200]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ba:	d103      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b0bc:	4b30      	ldr	r3, [pc, #192]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0c0:	f001 ba7b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c8:	f001 ba77 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0d0:	f001 ba73 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	d126      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b0e0:	4b25      	ldr	r3, [pc, #148]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b0ec:	4b22      	ldr	r3, [pc, #136]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0f8:	d106      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b100:	4b1f      	ldr	r3, [pc, #124]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b102:	637b      	str	r3, [r7, #52]	@ 0x34
 800b104:	f001 ba59 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b108:	4b1b      	ldr	r3, [pc, #108]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b114:	d107      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b11c:	d103      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b11e:	4b19      	ldr	r3, [pc, #100]	@ (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b120:	637b      	str	r3, [r7, #52]	@ 0x34
 800b122:	f001 ba4a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	637b      	str	r3, [r7, #52]	@ 0x34
 800b12a:	f001 ba46 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b12e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b132:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800b136:	430b      	orrs	r3, r1
 800b138:	d16e      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b13a:	4b0f      	ldr	r3, [pc, #60]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b13c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b140:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b144:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b14c:	d03d      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b150:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b154:	d85c      	bhi.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b15c:	d014      	beq.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b164:	d854      	bhi.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d01f      	beq.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b172:	d012      	beq.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b174:	e04c      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b176:	bf00      	nop
 800b178:	46020c00 	.word	0x46020c00
 800b17c:	0007a120 	.word	0x0007a120
 800b180:	00f42400 	.word	0x00f42400
 800b184:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff fa8b 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b196:	f001 ba10 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fbdc 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a8:	f001 ba07 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b1ac:	4ba7      	ldr	r3, [pc, #668]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b8:	d103      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b1ba:	4ba5      	ldr	r3, [pc, #660]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1be:	f001 b9fc 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1c6:	f001 b9f8 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1ca:	4ba0      	ldr	r3, [pc, #640]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	d118      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1d6:	4b9d      	ldr	r3, [pc, #628]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b1e2:	4b9a      	ldr	r3, [pc, #616]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	0e1b      	lsrs	r3, r3, #24
 800b1e8:	f003 030f 	and.w	r3, r3, #15
 800b1ec:	e006      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b1ee:	4b97      	ldr	r3, [pc, #604]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1f4:	041b      	lsls	r3, r3, #16
 800b1f6:	0e1b      	lsrs	r3, r3, #24
 800b1f8:	f003 030f 	and.w	r3, r3, #15
 800b1fc:	4a95      	ldr	r2, [pc, #596]	@ (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b204:	f001 b9d9 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b20c:	f001 b9d5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b214:	f001 b9d1 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b21c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800b220:	430b      	orrs	r3, r1
 800b222:	d17f      	bne.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b224:	4b89      	ldr	r3, [pc, #548]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b22a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b22e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	d165      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b236:	4b85      	ldr	r3, [pc, #532]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b23c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b240:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b248:	d034      	beq.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b250:	d853      	bhi.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b258:	d00b      	beq.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b260:	d84b      	bhi.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	2b00      	cmp	r3, #0
 800b266:	d016      	beq.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b26e:	d009      	beq.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b270:	e043      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fa16 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b280:	f001 b99b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b284:	f107 0318 	add.w	r3, r7, #24
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fb67 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b292:	f001 b992 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b296:	4b6d      	ldr	r3, [pc, #436]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b29e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2a2:	d103      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b2a4:	4b6a      	ldr	r3, [pc, #424]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2a6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2a8:	f001 b987 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2b0:	f001 b983 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2b4:	4b65      	ldr	r3, [pc, #404]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d118      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2c0:	4b62      	ldr	r3, [pc, #392]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b2cc:	4b5f      	ldr	r3, [pc, #380]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	0e1b      	lsrs	r3, r3, #24
 800b2d2:	f003 030f 	and.w	r3, r3, #15
 800b2d6:	e006      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b2d8:	4b5c      	ldr	r3, [pc, #368]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2de:	041b      	lsls	r3, r3, #16
 800b2e0:	0e1b      	lsrs	r3, r3, #24
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	4a5b      	ldr	r2, [pc, #364]	@ (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ec:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2ee:	f001 b964 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2f6:	f001 b960 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2fe:	f001 b95c 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b308:	d108      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b30a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff f9ca 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	637b      	str	r3, [r7, #52]	@ 0x34
 800b318:	f001 b94f 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b320:	f001 b94b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b328:	1e51      	subs	r1, r2, #1
 800b32a:	430b      	orrs	r3, r1
 800b32c:	d136      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b32e:	4b47      	ldr	r3, [pc, #284]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b334:	f003 0303 	and.w	r3, r3, #3
 800b338:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b340:	f7fe f968 	bl	8009614 <HAL_RCC_GetPCLK2Freq>
 800b344:	6378      	str	r0, [r7, #52]	@ 0x34
 800b346:	f001 b938 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d104      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b350:	f7fe f830 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b354:	6378      	str	r0, [r7, #52]	@ 0x34
 800b356:	f001 b930 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b35a:	4b3c      	ldr	r3, [pc, #240]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b366:	d106      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d103      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b36e:	4b3a      	ldr	r3, [pc, #232]	@ (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b370:	637b      	str	r3, [r7, #52]	@ 0x34
 800b372:	f001 b922 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b376:	4b35      	ldr	r3, [pc, #212]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b02      	cmp	r3, #2
 800b382:	d107      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	2b03      	cmp	r3, #3
 800b388:	d104      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b390:	f001 b913 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34
 800b398:	f001 b90f 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a0:	1e91      	subs	r1, r2, #2
 800b3a2:	430b      	orrs	r3, r1
 800b3a4:	d136      	bne.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b3a6:	4b29      	ldr	r3, [pc, #164]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3ac:	f003 030c 	and.w	r3, r3, #12
 800b3b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b3b8:	f7fe f918 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b3bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3be:	f001 b8fc 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	d104      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3c8:	f7fd fff4 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b3cc:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3ce:	f001 b8f4 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b3d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3de:	d106      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	d103      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b3e6:	4b1c      	ldr	r3, [pc, #112]	@ (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ea:	f001 b8e6 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b3ee:	4b17      	ldr	r3, [pc, #92]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	2b0c      	cmp	r3, #12
 800b400:	d104      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b406:	637b      	str	r3, [r7, #52]	@ 0x34
 800b408:	f001 b8d7 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b410:	f001 b8d3 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b418:	1f11      	subs	r1, r2, #4
 800b41a:	430b      	orrs	r3, r1
 800b41c:	d13f      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b41e:	4b0b      	ldr	r3, [pc, #44]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b424:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b428:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b430:	f7fe f8dc 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b434:	6378      	str	r0, [r7, #52]	@ 0x34
 800b436:	f001 b8c0 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d10d      	bne.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b440:	f7fd ffb8 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b444:	6378      	str	r0, [r7, #52]	@ 0x34
 800b446:	f001 b8b8 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b44a:	bf00      	nop
 800b44c:	46020c00 	.word	0x46020c00
 800b450:	02dc6c00 	.word	0x02dc6c00
 800b454:	0800e2e4 	.word	0x0800e2e4
 800b458:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b45c:	4ba8      	ldr	r3, [pc, #672]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b468:	d106      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	d103      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b470:	4ba4      	ldr	r3, [pc, #656]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b472:	637b      	str	r3, [r7, #52]	@ 0x34
 800b474:	f001 b8a1 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b478:	4ba1      	ldr	r3, [pc, #644]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b47a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b02      	cmp	r3, #2
 800b484:	d107      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b488:	2b30      	cmp	r3, #48	@ 0x30
 800b48a:	d104      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b48c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b490:	637b      	str	r3, [r7, #52]	@ 0x34
 800b492:	f001 b892 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
 800b49a:	f001 b88e 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a2:	f1a2 0108 	sub.w	r1, r2, #8
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	d136      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b4aa:	4b95      	ldr	r3, [pc, #596]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d104      	bne.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4bc:	f7fe f896 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b4c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4c2:	f001 b87a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	2b40      	cmp	r3, #64	@ 0x40
 800b4ca:	d104      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4cc:	f7fd ff72 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b4d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4d2:	f001 b872 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b4d6:	4b8a      	ldr	r3, [pc, #552]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e2:	d106      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	2b80      	cmp	r3, #128	@ 0x80
 800b4e8:	d103      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b4ea:	4b86      	ldr	r3, [pc, #536]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ee:	f001 b864 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b4f2:	4b83      	ldr	r3, [pc, #524]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d107      	bne.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b502:	2bc0      	cmp	r3, #192	@ 0xc0
 800b504:	d104      	bne.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b50a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b50c:	f001 b855 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	637b      	str	r3, [r7, #52]	@ 0x34
 800b514:	f001 b851 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51c:	f1a2 0110 	sub.w	r1, r2, #16
 800b520:	430b      	orrs	r3, r1
 800b522:	d139      	bne.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b524:	4b76      	ldr	r3, [pc, #472]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b52a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b52e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b536:	f7fe f859 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b53a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b53c:	f001 b83d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b546:	d104      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b548:	f7fd ff34 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b54c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b54e:	f001 b834 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b552:	4b6b      	ldr	r3, [pc, #428]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b55a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b55e:	d107      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b566:	d103      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b568:	4b66      	ldr	r3, [pc, #408]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b56c:	f001 b825 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b570:	4b63      	ldr	r3, [pc, #396]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d108      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b584:	d104      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b58c:	f001 b815 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b590:	2300      	movs	r3, #0
 800b592:	637b      	str	r3, [r7, #52]	@ 0x34
 800b594:	f001 b811 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b59c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	d139      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b5a4:	4b56      	ldr	r3, [pc, #344]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b5ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d104      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5b6:	f7fe f819 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b5ba:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5bc:	f000 bffd 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c6:	d104      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5c8:	f7fd fef4 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b5cc:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5ce:	f000 bff4 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b5d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5de:	d107      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5e6:	d103      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b5e8:	4b46      	ldr	r3, [pc, #280]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ec:	f000 bfe5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b5f0:	4b43      	ldr	r3, [pc, #268]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d108      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b600:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b604:	d104      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b60c:	f000 bfd5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34
 800b614:	f000 bfd1 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b61c:	f1a2 0120 	sub.w	r1, r2, #32
 800b620:	430b      	orrs	r3, r1
 800b622:	d158      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b624:	4b36      	ldr	r3, [pc, #216]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	2b00      	cmp	r3, #0
 800b634:	d104      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b636:	f7fe f801 	bl	800963c <HAL_RCC_GetPCLK3Freq>
 800b63a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b63c:	f000 bfbd 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b642:	2b01      	cmp	r3, #1
 800b644:	d104      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b646:	f7fd feb5 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b64a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b64c:	f000 bfb5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b650:	4b2b      	ldr	r3, [pc, #172]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b65c:	d106      	bne.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b660:	2b02      	cmp	r3, #2
 800b662:	d103      	bne.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b664:	4b27      	ldr	r3, [pc, #156]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b666:	637b      	str	r3, [r7, #52]	@ 0x34
 800b668:	f000 bfa7 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b66c:	4b24      	ldr	r3, [pc, #144]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b66e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b02      	cmp	r3, #2
 800b678:	d107      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d104      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b684:	637b      	str	r3, [r7, #52]	@ 0x34
 800b686:	f000 bf98 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b68a:	4b1d      	ldr	r3, [pc, #116]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 0320 	and.w	r3, r3, #32
 800b692:	2b20      	cmp	r3, #32
 800b694:	d11b      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d118      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b69c:	4b18      	ldr	r3, [pc, #96]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d005      	beq.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b6a8:	4b15      	ldr	r3, [pc, #84]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	0e1b      	lsrs	r3, r3, #24
 800b6ae:	f003 030f 	and.w	r3, r3, #15
 800b6b2:	e006      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b6b4:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6ba:	041b      	lsls	r3, r3, #16
 800b6bc:	0e1b      	lsrs	r3, r3, #24
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	4a11      	ldr	r2, [pc, #68]	@ (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ca:	f000 bf76 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d2:	f000 bf72 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6da:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	d172      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b6e2:	4b07      	ldr	r3, [pc, #28]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b6ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6f4:	d10a      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6f6:	f7fd fe5d 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b6fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6fc:	f000 bf5d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b700:	46020c00 	.word	0x46020c00
 800b704:	00f42400 	.word	0x00f42400
 800b708:	0800e2e4 	.word	0x0800e2e4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b712:	d108      	bne.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b714:	f107 0318 	add.w	r3, r7, #24
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff f91f 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	637b      	str	r3, [r7, #52]	@ 0x34
 800b722:	f000 bf4a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b72c:	f7fd ff44 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 800b730:	6378      	str	r0, [r7, #52]	@ 0x34
 800b732:	f000 bf42 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b73c:	d122      	bne.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b73e:	4bb0      	ldr	r3, [pc, #704]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0320 	and.w	r3, r3, #32
 800b746:	2b20      	cmp	r3, #32
 800b748:	d118      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b74a:	4bad      	ldr	r3, [pc, #692]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b756:	4baa      	ldr	r3, [pc, #680]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	0e1b      	lsrs	r3, r3, #24
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	e006      	b.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b762:	4ba7      	ldr	r3, [pc, #668]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	0e1b      	lsrs	r3, r3, #24
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	4aa4      	ldr	r2, [pc, #656]	@ (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b776:	637b      	str	r3, [r7, #52]	@ 0x34
 800b778:	f000 bf1f 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b77c:	2300      	movs	r3, #0
 800b77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b780:	f000 bf1b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b784:	4b9e      	ldr	r3, [pc, #632]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b78c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b790:	d107      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b798:	d103      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b79a:	4b9b      	ldr	r3, [pc, #620]	@ (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b79e:	f000 bf0c 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b7a2:	4b97      	ldr	r3, [pc, #604]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7ae:	d107      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7b6:	d103      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b7b8:	4b93      	ldr	r3, [pc, #588]	@ (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7bc:	f000 befd 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7c4:	f000 bef9 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7cc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	d158      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b7d4:	4b8a      	ldr	r3, [pc, #552]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	2b04      	cmp	r3, #4
 800b7e4:	d84b      	bhi.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b825 	.word	0x0800b825
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b813 	.word	0x0800b813
 800b7f8:	0800b82f 	.word	0x0800b82f
 800b7fc:	0800b839 	.word	0x0800b839
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe ff4f 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b80e:	f000 bed4 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b812:	f107 030c 	add.w	r3, r7, #12
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff f9fa 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b820:	f000 becb 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b824:	f7fd fec8 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 800b828:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b82a:	f000 bec6 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b82e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b834:	f000 bec1 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b838:	4b71      	ldr	r3, [pc, #452]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0320 	and.w	r3, r3, #32
 800b840:	2b20      	cmp	r3, #32
 800b842:	d118      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b844:	4b6e      	ldr	r3, [pc, #440]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b850:	4b6b      	ldr	r3, [pc, #428]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	0e1b      	lsrs	r3, r3, #24
 800b856:	f003 030f 	and.w	r3, r3, #15
 800b85a:	e006      	b.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b85c:	4b68      	ldr	r3, [pc, #416]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b85e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b862:	041b      	lsls	r3, r3, #16
 800b864:	0e1b      	lsrs	r3, r3, #24
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	4a66      	ldr	r2, [pc, #408]	@ (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b872:	f000 bea2 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b87a:	f000 be9e 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b882:	f000 be9a 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b88e:	430b      	orrs	r3, r1
 800b890:	d167      	bne.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b892:	4b5b      	ldr	r3, [pc, #364]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b898:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b89c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8a4:	d036      	beq.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8ac:	d855      	bhi.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8b4:	d029      	beq.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8bc:	d84d      	bhi.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8c4:	d013      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8cc:	d845      	bhi.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d015      	beq.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8da:	d13e      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fee1 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8ea:	f000 be66 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8ee:	f107 030c 	add.w	r3, r7, #12
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff f98c 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8fc:	f000 be5d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b900:	f7fd fe5a 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 800b904:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b906:	f000 be58 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b90a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b910:	f000 be53 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b914:	4b3a      	ldr	r3, [pc, #232]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0320 	and.w	r3, r3, #32
 800b91c:	2b20      	cmp	r3, #32
 800b91e:	d118      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b920:	4b37      	ldr	r3, [pc, #220]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b92c:	4b34      	ldr	r3, [pc, #208]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	0e1b      	lsrs	r3, r3, #24
 800b932:	f003 030f 	and.w	r3, r3, #15
 800b936:	e006      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b938:	4b31      	ldr	r3, [pc, #196]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b93a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b93e:	041b      	lsls	r3, r3, #16
 800b940:	0e1b      	lsrs	r3, r3, #24
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	4a2f      	ldr	r2, [pc, #188]	@ (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b94c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b94e:	f000 be34 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b952:	2300      	movs	r3, #0
 800b954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b956:	f000 be30 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b95a:	2300      	movs	r3, #0
 800b95c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b95e:	f000 be2c 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b966:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b96a:	430b      	orrs	r3, r1
 800b96c:	d152      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b96e:	4b24      	ldr	r3, [pc, #144]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b974:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b978:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d104      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b980:	f7fd fe34 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800b984:	6378      	str	r0, [r7, #52]	@ 0x34
 800b986:	f000 be18 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b990:	d104      	bne.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b992:	f7fd fd0f 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800b996:	6378      	str	r0, [r7, #52]	@ 0x34
 800b998:	f000 be0f 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b99c:	4b18      	ldr	r3, [pc, #96]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9a8:	d107      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9b0:	d103      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b6:	f000 be00 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b9ba:	4b11      	ldr	r3, [pc, #68]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	d122      	bne.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9cc:	d11e      	bne.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d005      	beq.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b9da:	4b09      	ldr	r3, [pc, #36]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	0e1b      	lsrs	r3, r3, #24
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	e006      	b.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b9e6:	4b06      	ldr	r3, [pc, #24]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9ec:	041b      	lsls	r3, r3, #16
 800b9ee:	0e1b      	lsrs	r3, r3, #24
 800b9f0:	f003 030f 	and.w	r3, r3, #15
 800b9f4:	4a03      	ldr	r2, [pc, #12]	@ (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9fc:	f000 bddd 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ba00:	46020c00 	.word	0x46020c00
 800ba04:	0800e2e4 	.word	0x0800e2e4
 800ba08:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba10:	f000 bdd3 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ba14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba18:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ba1c:	430b      	orrs	r3, r1
 800ba1e:	d14c      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ba20:	4ba8      	ldr	r3, [pc, #672]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba26:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ba2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d104      	bne.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba32:	f7fd fddb 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800ba36:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba38:	f000 bdbf 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba42:	d104      	bne.n	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba44:	f7fd fcb6 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800ba48:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba4a:	f000 bdb6 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ba4e:	4b9d      	ldr	r3, [pc, #628]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba5a:	d107      	bne.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba62:	d103      	bne.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ba64:	4b98      	ldr	r3, [pc, #608]	@ (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ba66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba68:	f000 bda7 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ba6c:	4b95      	ldr	r3, [pc, #596]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	2b20      	cmp	r3, #32
 800ba76:	d11c      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ba78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba7e:	d118      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba80:	4b90      	ldr	r3, [pc, #576]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d005      	beq.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ba8c:	4b8d      	ldr	r3, [pc, #564]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	0e1b      	lsrs	r3, r3, #24
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	e006      	b.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ba98:	4b8a      	ldr	r3, [pc, #552]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba9e:	041b      	lsls	r3, r3, #16
 800baa0:	0e1b      	lsrs	r3, r3, #24
 800baa2:	f003 030f 	and.w	r3, r3, #15
 800baa6:	4a89      	ldr	r2, [pc, #548]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800baa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baac:	637b      	str	r3, [r7, #52]	@ 0x34
 800baae:	f000 bd84 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab6:	f000 bd80 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800baba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800babe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bac2:	430b      	orrs	r3, r1
 800bac4:	d158      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bac6:	4b7f      	ldr	r3, [pc, #508]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bacc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bad0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad4:	2bc0      	cmp	r3, #192	@ 0xc0
 800bad6:	d028      	beq.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bada:	2bc0      	cmp	r3, #192	@ 0xc0
 800badc:	d848      	bhi.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	2b80      	cmp	r3, #128	@ 0x80
 800bae2:	d00e      	beq.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	2b80      	cmp	r3, #128	@ 0x80
 800bae8:	d842      	bhi.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf2:	2b40      	cmp	r3, #64	@ 0x40
 800baf4:	d014      	beq.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800baf6:	e03b      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800baf8:	f7fd fda0 	bl	800963c <HAL_RCC_GetPCLK3Freq>
 800bafc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bafe:	f000 bd5c 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb02:	4b70      	ldr	r3, [pc, #448]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb0e:	d103      	bne.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bb10:	4b6d      	ldr	r3, [pc, #436]	@ (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb14:	f000 bd51 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb1c:	f000 bd4d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bb20:	f7fd fc48 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800bb24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bb26:	f000 bd48 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb2a:	4b66      	ldr	r3, [pc, #408]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	d118      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb36:	4b63      	ldr	r3, [pc, #396]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bb42:	4b60      	ldr	r3, [pc, #384]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	0e1b      	lsrs	r3, r3, #24
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	e006      	b.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bb4e:	4b5d      	ldr	r3, [pc, #372]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb54:	041b      	lsls	r3, r3, #16
 800bb56:	0e1b      	lsrs	r3, r3, #24
 800bb58:	f003 030f 	and.w	r3, r3, #15
 800bb5c:	4a5b      	ldr	r2, [pc, #364]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb64:	f000 bd29 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb6c:	f000 bd25 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb74:	f000 bd21 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb7c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800bb80:	430b      	orrs	r3, r1
 800bb82:	d14c      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bb84:	4b4f      	ldr	r3, [pc, #316]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d104      	bne.n	800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb96:	f7fd fd29 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800bb9a:	6378      	str	r0, [r7, #52]	@ 0x34
 800bb9c:	f000 bd0d 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bba6:	d104      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bba8:	f7fd fc04 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800bbac:	6378      	str	r0, [r7, #52]	@ 0x34
 800bbae:	f000 bd04 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bbb2:	4b44      	ldr	r3, [pc, #272]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbbe:	d107      	bne.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbc6:	d103      	bne.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bbc8:	4b3f      	ldr	r3, [pc, #252]	@ (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bbca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbcc:	f000 bcf5 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bbd0:	4b3c      	ldr	r3, [pc, #240]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b20      	cmp	r3, #32
 800bbda:	d11c      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbde:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbe2:	d118      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbe4:	4b37      	ldr	r3, [pc, #220]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bbf0:	4b34      	ldr	r3, [pc, #208]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	0e1b      	lsrs	r3, r3, #24
 800bbf6:	f003 030f 	and.w	r3, r3, #15
 800bbfa:	e006      	b.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bbfc:	4b31      	ldr	r3, [pc, #196]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	0e1b      	lsrs	r3, r3, #24
 800bc06:	f003 030f 	and.w	r3, r3, #15
 800bc0a:	4a30      	ldr	r2, [pc, #192]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc12:	f000 bcd2 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc1a:	f000 bcce 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bc1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc22:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800bc26:	430b      	orrs	r3, r1
 800bc28:	d152      	bne.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bc2a:	4b26      	ldr	r3, [pc, #152]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc30:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bc34:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d104      	bne.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc3c:	f7fd fcd6 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800bc40:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc42:	f000 bcba 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc4c:	d104      	bne.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc4e:	f7fd fbb1 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800bc52:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc54:	f000 bcb1 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bc58:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc64:	d107      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc6c:	d103      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bc6e:	4b16      	ldr	r3, [pc, #88]	@ (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc70:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc72:	f000 bca2 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bc76:	4b13      	ldr	r3, [pc, #76]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	d11c      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc88:	d118      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bc96:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	0e1b      	lsrs	r3, r3, #24
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	e006      	b.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bca2:	4b08      	ldr	r3, [pc, #32]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bca8:	041b      	lsls	r3, r3, #16
 800bcaa:	0e1b      	lsrs	r3, r3, #24
 800bcac:	f003 030f 	and.w	r3, r3, #15
 800bcb0:	4a06      	ldr	r2, [pc, #24]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb8:	f000 bc7f 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcc0:	f000 bc7b 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bcc4:	46020c00 	.word	0x46020c00
 800bcc8:	00f42400 	.word	0x00f42400
 800bccc:	0800e2e4 	.word	0x0800e2e4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	d14c      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bcdc:	4ba6      	ldr	r3, [pc, #664]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bce2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bce6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bcee:	f7fd fc7d 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800bcf2:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcf4:	f000 bc61 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcfe:	d104      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd00:	f7fd fb58 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800bd04:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd06:	f000 bc58 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bd0a:	4b9b      	ldr	r3, [pc, #620]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd16:	d107      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd1e:	d103      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bd20:	4b96      	ldr	r3, [pc, #600]	@ (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd22:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd24:	f000 bc49 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bd28:	4b93      	ldr	r3, [pc, #588]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0320 	and.w	r3, r3, #32
 800bd30:	2b20      	cmp	r3, #32
 800bd32:	d11c      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bd3a:	d118      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd3c:	4b8e      	ldr	r3, [pc, #568]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bd48:	4b8b      	ldr	r3, [pc, #556]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	0e1b      	lsrs	r3, r3, #24
 800bd4e:	f003 030f 	and.w	r3, r3, #15
 800bd52:	e006      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bd54:	4b88      	ldr	r3, [pc, #544]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd5a:	041b      	lsls	r3, r3, #16
 800bd5c:	0e1b      	lsrs	r3, r3, #24
 800bd5e:	f003 030f 	and.w	r3, r3, #15
 800bd62:	4a87      	ldr	r2, [pc, #540]	@ (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd6a:	f000 bc26 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd72:	f000 bc22 	b.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bd76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd7a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bd7e:	430b      	orrs	r3, r1
 800bd80:	d164      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bd82:	4b7d      	ldr	r3, [pc, #500]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d120      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd94:	4b78      	ldr	r3, [pc, #480]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b20      	cmp	r3, #32
 800bd9e:	d117      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bda0:	4b75      	ldr	r3, [pc, #468]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d005      	beq.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bdac:	4b72      	ldr	r3, [pc, #456]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	0e1b      	lsrs	r3, r3, #24
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	e006      	b.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bdb8:	4b6f      	ldr	r3, [pc, #444]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdbe:	041b      	lsls	r3, r3, #16
 800bdc0:	0e1b      	lsrs	r3, r3, #24
 800bdc2:	f003 030f 	and.w	r3, r3, #15
 800bdc6:	4a6e      	ldr	r2, [pc, #440]	@ (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdce:	e3f4      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd4:	e3f1      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bdd6:	4b68      	ldr	r3, [pc, #416]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bde0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bde4:	d112      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdec:	d10e      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdee:	4b62      	ldr	r3, [pc, #392]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdfc:	d102      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bdfe:	23fa      	movs	r3, #250	@ 0xfa
 800be00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be02:	e3da      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be0a:	e3d6      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800be0c:	4b5a      	ldr	r3, [pc, #360]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be18:	d106      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be20:	d102      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800be22:	4b56      	ldr	r3, [pc, #344]	@ (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be24:	637b      	str	r3, [r7, #52]	@ 0x34
 800be26:	e3c8      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be28:	4b53      	ldr	r3, [pc, #332]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b02      	cmp	r3, #2
 800be34:	d107      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be3c:	d103      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800be3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be42:	637b      	str	r3, [r7, #52]	@ 0x34
 800be44:	e3b9      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	637b      	str	r3, [r7, #52]	@ 0x34
 800be4a:	e3b6      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800be4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be50:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800be54:	430b      	orrs	r3, r1
 800be56:	d164      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be58:	4b47      	ldr	r3, [pc, #284]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be5e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800be62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800be64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be66:	2b00      	cmp	r3, #0
 800be68:	d120      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be6a:	4b43      	ldr	r3, [pc, #268]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 0320 	and.w	r3, r3, #32
 800be72:	2b20      	cmp	r3, #32
 800be74:	d117      	bne.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be76:	4b40      	ldr	r3, [pc, #256]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800be82:	4b3d      	ldr	r3, [pc, #244]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	0e1b      	lsrs	r3, r3, #24
 800be88:	f003 030f 	and.w	r3, r3, #15
 800be8c:	e006      	b.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800be8e:	4b3a      	ldr	r3, [pc, #232]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be94:	041b      	lsls	r3, r3, #16
 800be96:	0e1b      	lsrs	r3, r3, #24
 800be98:	f003 030f 	and.w	r3, r3, #15
 800be9c:	4a38      	ldr	r2, [pc, #224]	@ (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800be9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea4:	e389      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beaa:	e386      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800beac:	4b32      	ldr	r3, [pc, #200]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800beb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beba:	d112      	bne.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bec2:	d10e      	bne.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bec4:	4b2c      	ldr	r3, [pc, #176]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800beca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bed2:	d102      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800bed4:	23fa      	movs	r3, #250	@ 0xfa
 800bed6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bed8:	e36f      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800beda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bede:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bee0:	e36b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bee2:	4b25      	ldr	r3, [pc, #148]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800beea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beee:	d106      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bef6:	d102      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800bef8:	4b20      	ldr	r3, [pc, #128]	@ (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800befa:	637b      	str	r3, [r7, #52]	@ 0x34
 800befc:	e35d      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800befe:	4b1e      	ldr	r3, [pc, #120]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d107      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf12:	d103      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bf14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1a:	e34e      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf20:	e34b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf26:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	d14e      	bne.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf2e:	4b12      	ldr	r3, [pc, #72]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800bf38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf40:	f7fd fb54 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800bf44:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf46:	e338      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bf48:	4b0b      	ldr	r3, [pc, #44]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf56:	d119      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf5e:	d115      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf60:	4b05      	ldr	r3, [pc, #20]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf6e:	d109      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bf70:	23fa      	movs	r3, #250	@ 0xfa
 800bf72:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf74:	e321      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bf76:	bf00      	nop
 800bf78:	46020c00 	.word	0x46020c00
 800bf7c:	00f42400 	.word	0x00f42400
 800bf80:	0800e2e4 	.word	0x0800e2e4
      }
      else
      {
        frequency = LSI_VALUE;
 800bf84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf8a:	e316      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bf8c:	4ba8      	ldr	r3, [pc, #672]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf98:	d106      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bfa0:	d102      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bfa2:	4ba4      	ldr	r3, [pc, #656]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa6:	e308      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bfa8:	4ba1      	ldr	r3, [pc, #644]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d107      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bfbc:	d103      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bfbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc4:	e2f9      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfca:	e2f6      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bfcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfd0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	d12d      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bfd8:	4b95      	ldr	r3, [pc, #596]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfde:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bfe2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bfe4:	4b92      	ldr	r3, [pc, #584]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bff0:	d105      	bne.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bff8:	4b8e      	ldr	r3, [pc, #568]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bffc:	e2dd      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c004:	d107      	bne.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fb4c 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c012:	637b      	str	r3, [r7, #52]	@ 0x34
 800c014:	e2d1      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c01c:	d107      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01e:	f107 0318 	add.w	r3, r7, #24
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fc9a 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c02c:	e2c5      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	637b      	str	r3, [r7, #52]	@ 0x34
 800c032:	e2c2      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c034:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c038:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c03c:	430b      	orrs	r3, r1
 800c03e:	d156      	bne.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c040:	4b7b      	ldr	r3, [pc, #492]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c046:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c04a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c052:	d028      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c056:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c05a:	d845      	bhi.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c062:	d013      	beq.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c06a:	d83d      	bhi.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c078:	d004      	beq.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c07a:	e035      	b.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c07c:	f7fd faca 	bl	8009614 <HAL_RCC_GetPCLK2Freq>
 800c080:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c082:	e29a      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c084:	f7fd f996 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800c088:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c08a:	e296      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c08c:	4b68      	ldr	r3, [pc, #416]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c098:	d102      	bne.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c09a:	4b66      	ldr	r3, [pc, #408]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c09c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c09e:	e28c      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0a4:	e289      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c0a6:	4b62      	ldr	r3, [pc, #392]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b20      	cmp	r3, #32
 800c0b0:	d117      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0b2:	4b5f      	ldr	r3, [pc, #380]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d005      	beq.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c0be:	4b5c      	ldr	r3, [pc, #368]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	0e1b      	lsrs	r3, r3, #24
 800c0c4:	f003 030f 	and.w	r3, r3, #15
 800c0c8:	e006      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c0ca:	4b59      	ldr	r3, [pc, #356]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0d0:	041b      	lsls	r3, r3, #16
 800c0d2:	0e1b      	lsrs	r3, r3, #24
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	4a57      	ldr	r2, [pc, #348]	@ (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0e0:	e26b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0e6:	e268      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0ec:	e265      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	d156      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c0fa:	4b4d      	ldr	r3, [pc, #308]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c104:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c10c:	d028      	beq.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c114:	d845      	bhi.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c11c:	d013      	beq.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c124:	d83d      	bhi.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c132:	d004      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c134:	e035      	b.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c136:	f7fd fa59 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800c13a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c13c:	e23d      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c13e:	f7fd f939 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800c142:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c144:	e239      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c146:	4b3a      	ldr	r3, [pc, #232]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c14e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c152:	d102      	bne.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c154:	4b37      	ldr	r3, [pc, #220]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c156:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c158:	e22f      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c15e:	e22c      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c160:	4b33      	ldr	r3, [pc, #204]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0320 	and.w	r3, r3, #32
 800c168:	2b20      	cmp	r3, #32
 800c16a:	d117      	bne.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c16c:	4b30      	ldr	r3, [pc, #192]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d005      	beq.n	800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c178:	4b2d      	ldr	r3, [pc, #180]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	0e1b      	lsrs	r3, r3, #24
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	e006      	b.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c184:	4b2a      	ldr	r3, [pc, #168]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c18a:	041b      	lsls	r3, r3, #16
 800c18c:	0e1b      	lsrs	r3, r3, #24
 800c18e:	f003 030f 	and.w	r3, r3, #15
 800c192:	4a29      	ldr	r2, [pc, #164]	@ (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c198:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c19a:	e20e      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c19c:	2300      	movs	r3, #0
 800c19e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1a0:	e20b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1a6:	e208      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ac:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c1b0:	430b      	orrs	r3, r1
 800c1b2:	d17c      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c1b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c1ba:	f003 0318 	and.w	r3, r3, #24
 800c1be:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c2:	2b18      	cmp	r3, #24
 800c1c4:	d870      	bhi.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c23d 	.word	0x0800c23d
 800c1d0:	0800c2a9 	.word	0x0800c2a9
 800c1d4:	0800c2a9 	.word	0x0800c2a9
 800c1d8:	0800c2a9 	.word	0x0800c2a9
 800c1dc:	0800c2a9 	.word	0x0800c2a9
 800c1e0:	0800c2a9 	.word	0x0800c2a9
 800c1e4:	0800c2a9 	.word	0x0800c2a9
 800c1e8:	0800c2a9 	.word	0x0800c2a9
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c2a9 	.word	0x0800c2a9
 800c1f4:	0800c2a9 	.word	0x0800c2a9
 800c1f8:	0800c2a9 	.word	0x0800c2a9
 800c1fc:	0800c2a9 	.word	0x0800c2a9
 800c200:	0800c2a9 	.word	0x0800c2a9
 800c204:	0800c2a9 	.word	0x0800c2a9
 800c208:	0800c2a9 	.word	0x0800c2a9
 800c20c:	0800c24d 	.word	0x0800c24d
 800c210:	0800c2a9 	.word	0x0800c2a9
 800c214:	0800c2a9 	.word	0x0800c2a9
 800c218:	0800c2a9 	.word	0x0800c2a9
 800c21c:	0800c2a9 	.word	0x0800c2a9
 800c220:	0800c2a9 	.word	0x0800c2a9
 800c224:	0800c2a9 	.word	0x0800c2a9
 800c228:	0800c2a9 	.word	0x0800c2a9
 800c22c:	0800c267 	.word	0x0800c267
 800c230:	46020c00 	.word	0x46020c00
 800c234:	00f42400 	.word	0x00f42400
 800c238:	0800e2e4 	.word	0x0800e2e4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c23c:	f7fd f9fe 	bl	800963c <HAL_RCC_GetPCLK3Freq>
 800c240:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c242:	e1ba      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c244:	f7fd f8b6 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800c248:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c24a:	e1b6      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c24c:	4b9f      	ldr	r3, [pc, #636]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c258:	d102      	bne.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c25a:	4b9d      	ldr	r3, [pc, #628]	@ (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c25c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c25e:	e1ac      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c264:	e1a9      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c266:	4b99      	ldr	r3, [pc, #612]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b20      	cmp	r3, #32
 800c270:	d117      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c272:	4b96      	ldr	r3, [pc, #600]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d005      	beq.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c27e:	4b93      	ldr	r3, [pc, #588]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	0e1b      	lsrs	r3, r3, #24
 800c284:	f003 030f 	and.w	r3, r3, #15
 800c288:	e006      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c28a:	4b90      	ldr	r3, [pc, #576]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c28c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c290:	041b      	lsls	r3, r3, #16
 800c292:	0e1b      	lsrs	r3, r3, #24
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	4a8e      	ldr	r2, [pc, #568]	@ (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c29e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2a0:	e18b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2a6:	e188      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2ac:	e185      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800c2b6:	430b      	orrs	r3, r1
 800c2b8:	d155      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c2ba:	4b84      	ldr	r3, [pc, #528]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c2c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2cc:	d013      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2d4:	d844      	bhi.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2dc:	d013      	beq.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2e4:	d83c      	bhi.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d014      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2f2:	d014      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c2f4:	e034      	b.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f6:	f107 0318 	add.w	r3, r7, #24
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fb2e 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c304:	e159      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fe f9cc 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c314:	e151      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c316:	f7fd f84d 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800c31a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c31c:	e14d      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c31e:	4b6b      	ldr	r3, [pc, #428]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0320 	and.w	r3, r3, #32
 800c326:	2b20      	cmp	r3, #32
 800c328:	d117      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c32a:	4b68      	ldr	r3, [pc, #416]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d005      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c336:	4b65      	ldr	r3, [pc, #404]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	0e1b      	lsrs	r3, r3, #24
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	e006      	b.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c342:	4b62      	ldr	r3, [pc, #392]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c348:	041b      	lsls	r3, r3, #16
 800c34a:	0e1b      	lsrs	r3, r3, #24
 800c34c:	f003 030f 	and.w	r3, r3, #15
 800c350:	4a60      	ldr	r2, [pc, #384]	@ (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c356:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c358:	e12f      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c35a:	2300      	movs	r3, #0
 800c35c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c35e:	e12c      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c364:	e129      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c36a:	1e59      	subs	r1, r3, #1
 800c36c:	ea52 0301 	orrs.w	r3, r2, r1
 800c370:	d13c      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c372:	4b56      	ldr	r3, [pc, #344]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c378:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c37c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c384:	d027      	beq.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c38c:	d82b      	bhi.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c394:	d017      	beq.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c398:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c39c:	d823      	bhi.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d004      	beq.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3aa:	d004      	beq.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c3ac:	e01b      	b.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c3ae:	f7fd f801 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 800c3b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c3b4:	e101      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe f974 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3c4:	e0f9      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3c6:	f107 0318 	add.w	r3, r7, #24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe fac6 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3d4:	e0f1      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3d6:	f107 030c 	add.w	r3, r7, #12
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fc18 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3e4:	e0e9      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3ea:	e0e6      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c3ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c3f4:	430b      	orrs	r3, r1
 800c3f6:	d131      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c3f8:	4b34      	ldr	r3, [pc, #208]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c3fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c402:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c404:	4b31      	ldr	r3, [pc, #196]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d106      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c414:	2b00      	cmp	r3, #0
 800c416:	d103      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c41e:	e0cc      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c420:	4b2a      	ldr	r3, [pc, #168]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c42a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c42e:	d112      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c436:	d10e      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c438:	4b24      	ldr	r3, [pc, #144]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c43a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c43e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c446:	d102      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c448:	23fa      	movs	r3, #250	@ 0xfa
 800c44a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c44c:	e0b5      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c44e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c452:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c454:	e0b1      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45a:	e0ae      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c45c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c460:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c464:	430b      	orrs	r3, r1
 800c466:	d13b      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c468:	4b18      	ldr	r3, [pc, #96]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c46a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c46e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c472:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c474:	4b15      	ldr	r3, [pc, #84]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c47c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c480:	d105      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c488:	4b13      	ldr	r3, [pc, #76]	@ (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c48a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48c:	e095      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c48e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c49a:	d106      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a2:	d102      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c4a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c4a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4a8:	e087      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c4aa:	4b08      	ldr	r3, [pc, #32]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4b6:	d106      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c4c0:	4b03      	ldr	r3, [pc, #12]	@ (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c4c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4c4:	e079      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ca:	e076      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4cc:	46020c00 	.word	0x46020c00
 800c4d0:	00f42400 	.word	0x00f42400
 800c4d4:	0800e2e4 	.word	0x0800e2e4
 800c4d8:	02dc6c00 	.word	0x02dc6c00
 800c4dc:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e4:	1e99      	subs	r1, r3, #2
 800c4e6:	ea52 0301 	orrs.w	r3, r2, r1
 800c4ea:	d120      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c4ec:	4b35      	ldr	r3, [pc, #212]	@ (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c504:	d008      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c506:	e00f      	b.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c508:	f107 030c 	add.w	r3, r7, #12
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe fb7f 	bl	800ac10 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c516:	e050      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c518:	f107 0318 	add.w	r3, r7, #24
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fa1d 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c526:	e048      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c52c:	e045      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c532:	f1a3 0108 	sub.w	r1, r3, #8
 800c536:	ea52 0301 	orrs.w	r3, r2, r1
 800c53a:	d13c      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c53c:	4b21      	ldr	r3, [pc, #132]	@ (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c53e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c542:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c546:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c548:	4b1e      	ldr	r3, [pc, #120]	@ (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c554:	d105      	bne.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c55c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c560:	e02b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c562:	4b18      	ldr	r3, [pc, #96]	@ (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c56a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c56e:	d106      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c576:	d102      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c578:	4b14      	ldr	r3, [pc, #80]	@ (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c57c:	e01d      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c584:	d107      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe f88c 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c592:	637b      	str	r3, [r7, #52]	@ 0x34
 800c594:	e011      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c59c:	d108      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c59e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe f880 	bl	800a6a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ae:	e004      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b4:	e001      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3738      	adds	r7, #56	@ 0x38
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	46020c00 	.word	0x46020c00
 800c5c8:	00f42400 	.word	0x00f42400
 800c5cc:	007a1200 	.word	0x007a1200

0800c5d0 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c5d4:	4b06      	ldr	r3, [pc, #24]	@ (800c5f0 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5da:	4a05      	ldr	r2, [pc, #20]	@ (800c5f0 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5dc:	f043 0320 	orr.w	r3, r3, #32
 800c5e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	46020c00 	.word	0x46020c00

0800c5f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c5fc:	4b47      	ldr	r3, [pc, #284]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a46      	ldr	r2, [pc, #280]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c606:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c608:	f7f7 f886 	bl	8003718 <HAL_GetTick>
 800c60c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c60e:	e008      	b.n	800c622 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c610:	f7f7 f882 	bl	8003718 <HAL_GetTick>
 800c614:	4602      	mov	r2, r0
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d901      	bls.n	800c622 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e077      	b.n	800c712 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c622:	4b3e      	ldr	r3, [pc, #248]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1f0      	bne.n	800c610 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c62e:	4b3b      	ldr	r3, [pc, #236]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c636:	f023 0303 	bic.w	r3, r3, #3
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6811      	ldr	r1, [r2, #0]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	6852      	ldr	r2, [r2, #4]
 800c642:	3a01      	subs	r2, #1
 800c644:	0212      	lsls	r2, r2, #8
 800c646:	430a      	orrs	r2, r1
 800c648:	4934      	ldr	r1, [pc, #208]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c64a:	4313      	orrs	r3, r2
 800c64c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c64e:	4b33      	ldr	r3, [pc, #204]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c652:	4b33      	ldr	r3, [pc, #204]	@ (800c720 <RCCEx_PLL2_Config+0x12c>)
 800c654:	4013      	ands	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6892      	ldr	r2, [r2, #8]
 800c65a:	3a01      	subs	r2, #1
 800c65c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68d2      	ldr	r2, [r2, #12]
 800c664:	3a01      	subs	r2, #1
 800c666:	0252      	lsls	r2, r2, #9
 800c668:	b292      	uxth	r2, r2
 800c66a:	4311      	orrs	r1, r2
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6912      	ldr	r2, [r2, #16]
 800c670:	3a01      	subs	r2, #1
 800c672:	0412      	lsls	r2, r2, #16
 800c674:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c678:	4311      	orrs	r1, r2
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	6952      	ldr	r2, [r2, #20]
 800c67e:	3a01      	subs	r2, #1
 800c680:	0612      	lsls	r2, r2, #24
 800c682:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c686:	430a      	orrs	r2, r1
 800c688:	4924      	ldr	r1, [pc, #144]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c68a:	4313      	orrs	r3, r2
 800c68c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c68e:	4b23      	ldr	r3, [pc, #140]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c692:	f023 020c 	bic.w	r2, r3, #12
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	4920      	ldr	r1, [pc, #128]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c69c:	4313      	orrs	r3, r2
 800c69e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c6a0:	4b1e      	ldr	r3, [pc, #120]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a1b      	ldr	r3, [r3, #32]
 800c6a8:	491c      	ldr	r1, [pc, #112]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c6ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b2:	4a1a      	ldr	r2, [pc, #104]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6b4:	f023 0310 	bic.w	r3, r3, #16
 800c6b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6ba:	4b18      	ldr	r3, [pc, #96]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	69d2      	ldr	r2, [r2, #28]
 800c6ca:	00d2      	lsls	r2, r2, #3
 800c6cc:	4913      	ldr	r1, [pc, #76]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c6d2:	4b12      	ldr	r3, [pc, #72]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d6:	4a11      	ldr	r2, [pc, #68]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6d8:	f043 0310 	orr.w	r3, r3, #16
 800c6dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c6de:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a0e      	ldr	r2, [pc, #56]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c6e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6ea:	f7f7 f815 	bl	8003718 <HAL_GetTick>
 800c6ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6f0:	e008      	b.n	800c704 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6f2:	f7f7 f811 	bl	8003718 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e006      	b.n	800c712 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <RCCEx_PLL2_Config+0x128>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0f0      	beq.n	800c6f2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c710:	2300      	movs	r3, #0

}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	46020c00 	.word	0x46020c00
 800c720:	80800000 	.word	0x80800000

0800c724 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c72c:	4b47      	ldr	r3, [pc, #284]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a46      	ldr	r2, [pc, #280]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c736:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c738:	f7f6 ffee 	bl	8003718 <HAL_GetTick>
 800c73c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c73e:	e008      	b.n	800c752 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c740:	f7f6 ffea 	bl	8003718 <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d901      	bls.n	800c752 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e077      	b.n	800c842 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c752:	4b3e      	ldr	r3, [pc, #248]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1f0      	bne.n	800c740 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c75e:	4b3b      	ldr	r3, [pc, #236]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c762:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c766:	f023 0303 	bic.w	r3, r3, #3
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6811      	ldr	r1, [r2, #0]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6852      	ldr	r2, [r2, #4]
 800c772:	3a01      	subs	r2, #1
 800c774:	0212      	lsls	r2, r2, #8
 800c776:	430a      	orrs	r2, r1
 800c778:	4934      	ldr	r1, [pc, #208]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c77a:	4313      	orrs	r3, r2
 800c77c:	630b      	str	r3, [r1, #48]	@ 0x30
 800c77e:	4b33      	ldr	r3, [pc, #204]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c782:	4b33      	ldr	r3, [pc, #204]	@ (800c850 <RCCEx_PLL3_Config+0x12c>)
 800c784:	4013      	ands	r3, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6892      	ldr	r2, [r2, #8]
 800c78a:	3a01      	subs	r2, #1
 800c78c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	68d2      	ldr	r2, [r2, #12]
 800c794:	3a01      	subs	r2, #1
 800c796:	0252      	lsls	r2, r2, #9
 800c798:	b292      	uxth	r2, r2
 800c79a:	4311      	orrs	r1, r2
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	6912      	ldr	r2, [r2, #16]
 800c7a0:	3a01      	subs	r2, #1
 800c7a2:	0412      	lsls	r2, r2, #16
 800c7a4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c7a8:	4311      	orrs	r1, r2
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	6952      	ldr	r2, [r2, #20]
 800c7ae:	3a01      	subs	r2, #1
 800c7b0:	0612      	lsls	r2, r2, #24
 800c7b2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	4924      	ldr	r1, [pc, #144]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c7be:	4b23      	ldr	r3, [pc, #140]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c2:	f023 020c 	bic.w	r2, r3, #12
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	4920      	ldr	r1, [pc, #128]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c7d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	491c      	ldr	r1, [pc, #112]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c7de:	4b1b      	ldr	r3, [pc, #108]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e2:	4a1a      	ldr	r2, [pc, #104]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7e4:	f023 0310 	bic.w	r3, r3, #16
 800c7e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7ea:	4b18      	ldr	r3, [pc, #96]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	69d2      	ldr	r2, [r2, #28]
 800c7fa:	00d2      	lsls	r2, r2, #3
 800c7fc:	4913      	ldr	r1, [pc, #76]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c7fe:	4313      	orrs	r3, r2
 800c800:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c802:	4b12      	ldr	r3, [pc, #72]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c806:	4a11      	ldr	r2, [pc, #68]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c808:	f043 0310 	orr.w	r3, r3, #16
 800c80c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c80e:	4b0f      	ldr	r3, [pc, #60]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a0e      	ldr	r2, [pc, #56]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c818:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c81a:	f7f6 ff7d 	bl	8003718 <HAL_GetTick>
 800c81e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c820:	e008      	b.n	800c834 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c822:	f7f6 ff79 	bl	8003718 <HAL_GetTick>
 800c826:	4602      	mov	r2, r0
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d901      	bls.n	800c834 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c830:	2303      	movs	r3, #3
 800c832:	e006      	b.n	800c842 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c834:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <RCCEx_PLL3_Config+0x128>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0f0      	beq.n	800c822 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	46020c00 	.word	0x46020c00
 800c850:	80800000 	.word	0x80800000

0800c854 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d071      	beq.n	800c94a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7f6 fcc2 	bl	8003204 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2202      	movs	r2, #2
 800c884:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c888:	4b32      	ldr	r3, [pc, #200]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	f003 0310 	and.w	r3, r3, #16
 800c890:	2b10      	cmp	r3, #16
 800c892:	d051      	beq.n	800c938 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c894:	4b2f      	ldr	r3, [pc, #188]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c896:	22ca      	movs	r2, #202	@ 0xca
 800c898:	625a      	str	r2, [r3, #36]	@ 0x24
 800c89a:	4b2e      	ldr	r3, [pc, #184]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c89c:	2253      	movs	r2, #83	@ 0x53
 800c89e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f9ad 	bl	800cc00 <RTC_EnterInitMode>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d13f      	bne.n	800c930 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8b0:	4b28      	ldr	r3, [pc, #160]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	4a27      	ldr	r2, [pc, #156]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8b6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c8ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8be:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8c0:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8c2:	699a      	ldr	r2, [r3, #24]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6859      	ldr	r1, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	4319      	orrs	r1, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	430b      	orrs	r3, r1
 800c8d4:	491f      	ldr	r1, [pc, #124]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	491b      	ldr	r1, [pc, #108]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	4915      	ldr	r1, [pc, #84]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f9b8 	bl	800cc78 <RTC_ExitInitMode>
 800c908:	4603      	mov	r3, r0
 800c90a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d10e      	bne.n	800c930 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c912:	4b10      	ldr	r3, [pc, #64]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a19      	ldr	r1, [r3, #32]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	4319      	orrs	r1, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	430b      	orrs	r3, r1
 800c92a:	490a      	ldr	r1, [pc, #40]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c930:	4b08      	ldr	r3, [pc, #32]	@ (800c954 <HAL_RTC_Init+0x100>)
 800c932:	22ff      	movs	r2, #255	@ 0xff
 800c934:	625a      	str	r2, [r3, #36]	@ 0x24
 800c936:	e001      	b.n	800c93c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d103      	bne.n	800c94a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	46007800 	.word	0x46007800

0800c958 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c958:	b590      	push	{r4, r7, lr}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d101      	bne.n	800c972 <HAL_RTC_SetTime+0x1a>
 800c96e:	2302      	movs	r3, #2
 800c970:	e088      	b.n	800ca84 <HAL_RTC_SetTime+0x12c>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2202      	movs	r2, #2
 800c97e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c982:	4b42      	ldr	r3, [pc, #264]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800c984:	22ca      	movs	r2, #202	@ 0xca
 800c986:	625a      	str	r2, [r3, #36]	@ 0x24
 800c988:	4b40      	ldr	r3, [pc, #256]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800c98a:	2253      	movs	r2, #83	@ 0x53
 800c98c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 f936 	bl	800cc00 <RTC_EnterInitMode>
 800c994:	4603      	mov	r3, r0
 800c996:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c998:	7cfb      	ldrb	r3, [r7, #19]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d163      	bne.n	800ca66 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c99e:	4b3b      	ldr	r3, [pc, #236]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9aa:	d057      	beq.n	800ca5c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d125      	bne.n	800c9fe <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9b2:	4b36      	ldr	r3, [pc, #216]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d102      	bne.n	800c9c4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f993 	bl	800ccf4 <RTC_ByteToBcd2>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 f98c 	bl	800ccf4 <RTC_ByteToBcd2>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9e0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	789b      	ldrb	r3, [r3, #2]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 f984 	bl	800ccf4 <RTC_ByteToBcd2>
 800c9ec:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9ee:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	78db      	ldrb	r3, [r3, #3]
 800c9f6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	e017      	b.n	800ca2e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9fe:	4b23      	ldr	r3, [pc, #140]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	785b      	ldrb	r3, [r3, #1]
 800ca1a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca1c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca22:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	78db      	ldrb	r3, [r3, #3]
 800ca28:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca2e:	4a17      	ldr	r2, [pc, #92]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ca36:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ca3a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca3c:	4b13      	ldr	r3, [pc, #76]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	4a12      	ldr	r2, [pc, #72]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca46:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800ca48:	4b10      	ldr	r3, [pc, #64]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca4a:	699a      	ldr	r2, [r3, #24]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	68d9      	ldr	r1, [r3, #12]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	430b      	orrs	r3, r1
 800ca56:	490d      	ldr	r1, [pc, #52]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f000 f90b 	bl	800cc78 <RTC_ExitInitMode>
 800ca62:	4603      	mov	r3, r0
 800ca64:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca66:	4b09      	ldr	r3, [pc, #36]	@ (800ca8c <HAL_RTC_SetTime+0x134>)
 800ca68:	22ff      	movs	r2, #255	@ 0xff
 800ca6a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ca6c:	7cfb      	ldrb	r3, [r7, #19]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ca82:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	371c      	adds	r7, #28
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd90      	pop	{r4, r7, pc}
 800ca8c:	46007800 	.word	0x46007800

0800ca90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca90:	b590      	push	{r4, r7, lr}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <HAL_RTC_SetDate+0x1a>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e071      	b.n	800cb8e <HAL_RTC_SetDate+0xfe>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2202      	movs	r2, #2
 800cab6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10e      	bne.n	800cade <HAL_RTC_SetDate+0x4e>
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	785b      	ldrb	r3, [r3, #1]
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d008      	beq.n	800cade <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	785b      	ldrb	r3, [r3, #1]
 800cad0:	f023 0310 	bic.w	r3, r3, #16
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	330a      	adds	r3, #10
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d11c      	bne.n	800cb1e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	78db      	ldrb	r3, [r3, #3]
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 f903 	bl	800ccf4 <RTC_ByteToBcd2>
 800caee:	4603      	mov	r3, r0
 800caf0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 f8fc 	bl	800ccf4 <RTC_ByteToBcd2>
 800cafc:	4603      	mov	r3, r0
 800cafe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb00:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	789b      	ldrb	r3, [r3, #2]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 f8f4 	bl	800ccf4 <RTC_ByteToBcd2>
 800cb0c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cb0e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	e00e      	b.n	800cb3c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	78db      	ldrb	r3, [r3, #3]
 800cb22:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb2a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb30:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb3c:	4b16      	ldr	r3, [pc, #88]	@ (800cb98 <HAL_RTC_SetDate+0x108>)
 800cb3e:	22ca      	movs	r2, #202	@ 0xca
 800cb40:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb42:	4b15      	ldr	r3, [pc, #84]	@ (800cb98 <HAL_RTC_SetDate+0x108>)
 800cb44:	2253      	movs	r2, #83	@ 0x53
 800cb46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f859 	bl	800cc00 <RTC_EnterInitMode>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb52:	7cfb      	ldrb	r3, [r7, #19]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10b      	bne.n	800cb70 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb58:	4a0f      	ldr	r2, [pc, #60]	@ (800cb98 <HAL_RTC_SetDate+0x108>)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 f886 	bl	800cc78 <RTC_ExitInitMode>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb70:	4b09      	ldr	r3, [pc, #36]	@ (800cb98 <HAL_RTC_SetDate+0x108>)
 800cb72:	22ff      	movs	r2, #255	@ 0xff
 800cb74:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb76:	7cfb      	ldrb	r3, [r7, #19]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800cb8c:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd90      	pop	{r4, r7, pc}
 800cb96:	bf00      	nop
 800cb98:	46007800 	.word	0x46007800

0800cb9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cba4:	4b15      	ldr	r3, [pc, #84]	@ (800cbfc <HAL_RTC_WaitForSynchro+0x60>)
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	4a14      	ldr	r2, [pc, #80]	@ (800cbfc <HAL_RTC_WaitForSynchro+0x60>)
 800cbaa:	f023 0320 	bic.w	r3, r3, #32
 800cbae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cbb0:	f7f6 fdb2 	bl	8003718 <HAL_GetTick>
 800cbb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbb6:	e013      	b.n	800cbe0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbb8:	f7f6 fdae 	bl	8003718 <HAL_GetTick>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbc6:	d90b      	bls.n	800cbe0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbc8:	4b0c      	ldr	r3, [pc, #48]	@ (800cbfc <HAL_RTC_WaitForSynchro+0x60>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0320 	and.w	r3, r3, #32
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10c      	bne.n	800cbee <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2203      	movs	r2, #3
 800cbd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e008      	b.n	800cbf2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbe0:	4b06      	ldr	r3, [pc, #24]	@ (800cbfc <HAL_RTC_WaitForSynchro+0x60>)
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f003 0320 	and.w	r3, r3, #32
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0e5      	beq.n	800cbb8 <HAL_RTC_WaitForSynchro+0x1c>
 800cbec:	e000      	b.n	800cbf0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbee:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	46007800 	.word	0x46007800

0800cc00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc0c:	4b19      	ldr	r3, [pc, #100]	@ (800cc74 <RTC_EnterInitMode+0x74>)
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d128      	bne.n	800cc6a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc18:	4b16      	ldr	r3, [pc, #88]	@ (800cc74 <RTC_EnterInitMode+0x74>)
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	4a15      	ldr	r2, [pc, #84]	@ (800cc74 <RTC_EnterInitMode+0x74>)
 800cc1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc22:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc24:	f7f6 fd78 	bl	8003718 <HAL_GetTick>
 800cc28:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc2a:	e013      	b.n	800cc54 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc2c:	f7f6 fd74 	bl	8003718 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc3a:	d90b      	bls.n	800cc54 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <RTC_EnterInitMode+0x74>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10f      	bne.n	800cc68 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2203      	movs	r2, #3
 800cc50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc54:	4b07      	ldr	r3, [pc, #28]	@ (800cc74 <RTC_EnterInitMode+0x74>)
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d104      	bne.n	800cc6a <RTC_EnterInitMode+0x6a>
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d1e2      	bne.n	800cc2c <RTC_EnterInitMode+0x2c>
 800cc66:	e000      	b.n	800cc6a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc68:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	46007800 	.word	0x46007800

0800cc78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc84:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	4a19      	ldr	r2, [pc, #100]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800cc8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc8e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc90:	4b17      	ldr	r3, [pc, #92]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10c      	bne.n	800ccb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff ff7d 	bl	800cb9c <HAL_RTC_WaitForSynchro>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d01e      	beq.n	800cce6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2203      	movs	r2, #3
 800ccac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	73fb      	strb	r3, [r7, #15]
 800ccb4:	e017      	b.n	800cce6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccb6:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	4a0d      	ldr	r2, [pc, #52]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800ccbc:	f023 0320 	bic.w	r3, r3, #32
 800ccc0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff ff6a 	bl	800cb9c <HAL_RTC_WaitForSynchro>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccda:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	4a04      	ldr	r2, [pc, #16]	@ (800ccf0 <RTC_ExitInitMode+0x78>)
 800cce0:	f043 0320 	orr.w	r3, r3, #32
 800cce4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	46007800 	.word	0x46007800

0800ccf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800cd06:	e005      	b.n	800cd14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	3b0a      	subs	r3, #10
 800cd12:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800cd14:	7afb      	ldrb	r3, [r7, #11]
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d8f6      	bhi.n	800cd08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	7afb      	ldrb	r3, [r7, #11]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	b2db      	uxtb	r3, r3
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	4910      	ldr	r1, [pc, #64]	@ (800cd88 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	689a      	ldr	r2, [r3, #8]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	490c      	ldr	r1, [pc, #48]	@ (800cd8c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cd60:	4b0a      	ldr	r3, [pc, #40]	@ (800cd8c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd62:	6a1b      	ldr	r3, [r3, #32]
 800cd64:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	6919      	ldr	r1, [r3, #16]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	041b      	lsls	r3, r3, #16
 800cd72:	430b      	orrs	r3, r1
 800cd74:	4905      	ldr	r1, [pc, #20]	@ (800cd8c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd76:	4313      	orrs	r3, r2
 800cd78:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	46007800 	.word	0x46007800
 800cd8c:	46007c00 	.word	0x46007c00

0800cd90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e0fb      	b.n	800cf9a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a7f      	ldr	r2, [pc, #508]	@ (800cfa4 <HAL_SPI_Init+0x214>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d004      	beq.n	800cdb6 <HAL_SPI_Init+0x26>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a7d      	ldr	r2, [pc, #500]	@ (800cfa8 <HAL_SPI_Init+0x218>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	e000      	b.n	800cdb8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdb6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a78      	ldr	r2, [pc, #480]	@ (800cfa4 <HAL_SPI_Init+0x214>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <HAL_SPI_Init+0x42>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a76      	ldr	r2, [pc, #472]	@ (800cfa8 <HAL_SPI_Init+0x218>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d105      	bne.n	800cdde <HAL_SPI_Init+0x4e>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	2b0f      	cmp	r3, #15
 800cdd8:	d901      	bls.n	800cdde <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e0dd      	b.n	800cf9a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f8ec 	bl	800cfbc <SPI_GetPacketSize>
 800cde4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a6e      	ldr	r2, [pc, #440]	@ (800cfa4 <HAL_SPI_Init+0x214>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d004      	beq.n	800cdfa <HAL_SPI_Init+0x6a>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a6c      	ldr	r2, [pc, #432]	@ (800cfa8 <HAL_SPI_Init+0x218>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d102      	bne.n	800ce00 <HAL_SPI_Init+0x70>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b08      	cmp	r3, #8
 800cdfe:	d816      	bhi.n	800ce2e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce04:	4a69      	ldr	r2, [pc, #420]	@ (800cfac <HAL_SPI_Init+0x21c>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00e      	beq.n	800ce28 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a68      	ldr	r2, [pc, #416]	@ (800cfb0 <HAL_SPI_Init+0x220>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d009      	beq.n	800ce28 <HAL_SPI_Init+0x98>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a66      	ldr	r2, [pc, #408]	@ (800cfb4 <HAL_SPI_Init+0x224>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d004      	beq.n	800ce28 <HAL_SPI_Init+0x98>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a65      	ldr	r2, [pc, #404]	@ (800cfb8 <HAL_SPI_Init+0x228>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d104      	bne.n	800ce32 <HAL_SPI_Init+0xa2>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b10      	cmp	r3, #16
 800ce2c:	d901      	bls.n	800ce32 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e0b3      	b.n	800cf9a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7f6 fa28 	bl	800329c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f022 0201 	bic.w	r2, r2, #1
 800ce62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ce6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce78:	d119      	bne.n	800ceae <HAL_SPI_Init+0x11e>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce82:	d103      	bne.n	800ce8c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d008      	beq.n	800ce9e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10c      	bne.n	800ceae <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce9c:	d107      	bne.n	800ceae <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ceac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00f      	beq.n	800ceda <HAL_SPI_Init+0x14a>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	2b06      	cmp	r3, #6
 800cec0:	d90b      	bls.n	800ceda <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e007      	b.n	800ceea <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cee8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	69da      	ldr	r2, [r3, #28]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef2:	431a      	orrs	r2, r3
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cefc:	ea42 0103 	orr.w	r1, r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf14:	431a      	orrs	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf1a:	431a      	orrs	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	699b      	ldr	r3, [r3, #24]
 800cf20:	431a      	orrs	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	695b      	ldr	r3, [r3, #20]
 800cf2c:	431a      	orrs	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	431a      	orrs	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf56:	ea42 0103 	orr.w	r1, r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	46002000 	.word	0x46002000
 800cfa8:	56002000 	.word	0x56002000
 800cfac:	40013000 	.word	0x40013000
 800cfb0:	50013000 	.word	0x50013000
 800cfb4:	40003800 	.word	0x40003800
 800cfb8:	50003800 	.word	0x50003800

0800cfbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc8:	095b      	lsrs	r3, r3, #5
 800cfca:	3301      	adds	r3, #1
 800cfcc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	3307      	adds	r3, #7
 800cfda:	08db      	lsrs	r3, r3, #3
 800cfdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b083      	sub	sp, #12
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b01      	cmp	r3, #1
 800d006:	d12e      	bne.n	800d066 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d101      	bne.n	800d016 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d012:	2302      	movs	r3, #2
 800d014:	e028      	b.n	800d068 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2202      	movs	r2, #2
 800d022:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f022 0201 	bic.w	r2, r2, #1
 800d034:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800d042:	ea42 0103 	orr.w	r1, r2, r3
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	689a      	ldr	r2, [r3, #8]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	430a      	orrs	r2, r1
 800d050:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	e000      	b.n	800d068 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
  }
}
 800d068:	4618      	mov	r0, r3
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e049      	b.n	800d11a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f841 	bl	800d122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f000 fa58 	bl	800d568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d122:	b480      	push	{r7}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d12a:	bf00      	nop
 800d12c:	370c      	adds	r7, #12
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
	...

0800d138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d001      	beq.n	800d150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e072      	b.n	800d236 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2202      	movs	r2, #2
 800d154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68da      	ldr	r2, [r3, #12]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f042 0201 	orr.w	r2, r2, #1
 800d166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a35      	ldr	r2, [pc, #212]	@ (800d244 <HAL_TIM_Base_Start_IT+0x10c>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d040      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a34      	ldr	r2, [pc, #208]	@ (800d248 <HAL_TIM_Base_Start_IT+0x110>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d03b      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d184:	d036      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d18e:	d031      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a2d      	ldr	r2, [pc, #180]	@ (800d24c <HAL_TIM_Base_Start_IT+0x114>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d02c      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a2c      	ldr	r2, [pc, #176]	@ (800d250 <HAL_TIM_Base_Start_IT+0x118>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d027      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a2a      	ldr	r2, [pc, #168]	@ (800d254 <HAL_TIM_Base_Start_IT+0x11c>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d022      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a29      	ldr	r2, [pc, #164]	@ (800d258 <HAL_TIM_Base_Start_IT+0x120>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d01d      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a27      	ldr	r2, [pc, #156]	@ (800d25c <HAL_TIM_Base_Start_IT+0x124>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d018      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a26      	ldr	r2, [pc, #152]	@ (800d260 <HAL_TIM_Base_Start_IT+0x128>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d013      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a24      	ldr	r2, [pc, #144]	@ (800d264 <HAL_TIM_Base_Start_IT+0x12c>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00e      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a23      	ldr	r2, [pc, #140]	@ (800d268 <HAL_TIM_Base_Start_IT+0x130>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d009      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a21      	ldr	r2, [pc, #132]	@ (800d26c <HAL_TIM_Base_Start_IT+0x134>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d004      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0xbc>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a20      	ldr	r2, [pc, #128]	@ (800d270 <HAL_TIM_Base_Start_IT+0x138>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d115      	bne.n	800d220 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689a      	ldr	r2, [r3, #8]
 800d1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d274 <HAL_TIM_Base_Start_IT+0x13c>)
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b06      	cmp	r3, #6
 800d204:	d015      	beq.n	800d232 <HAL_TIM_Base_Start_IT+0xfa>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d20c:	d011      	beq.n	800d232 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 0201 	orr.w	r2, r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21e:	e008      	b.n	800d232 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0201 	orr.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	e000      	b.n	800d234 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	40012c00 	.word	0x40012c00
 800d248:	50012c00 	.word	0x50012c00
 800d24c:	40000400 	.word	0x40000400
 800d250:	50000400 	.word	0x50000400
 800d254:	40000800 	.word	0x40000800
 800d258:	50000800 	.word	0x50000800
 800d25c:	40000c00 	.word	0x40000c00
 800d260:	50000c00 	.word	0x50000c00
 800d264:	40013400 	.word	0x40013400
 800d268:	50013400 	.word	0x50013400
 800d26c:	40014000 	.word	0x40014000
 800d270:	50014000 	.word	0x50014000
 800d274:	00010007 	.word	0x00010007

0800d278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d020      	beq.n	800d2dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d01b      	beq.n	800d2dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f06f 0202 	mvn.w	r2, #2
 800d2ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	699b      	ldr	r3, [r3, #24]
 800d2ba:	f003 0303 	and.w	r3, r3, #3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d003      	beq.n	800d2ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f931 	bl	800d52a <HAL_TIM_IC_CaptureCallback>
 800d2c8:	e005      	b.n	800d2d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f923 	bl	800d516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f934 	bl	800d53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	f003 0304 	and.w	r3, r3, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d020      	beq.n	800d328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d01b      	beq.n	800d328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f06f 0204 	mvn.w	r2, #4
 800d2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d003      	beq.n	800d316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f90b 	bl	800d52a <HAL_TIM_IC_CaptureCallback>
 800d314:	e005      	b.n	800d322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8fd 	bl	800d516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f90e 	bl	800d53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f003 0308 	and.w	r3, r3, #8
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d020      	beq.n	800d374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f003 0308 	and.w	r3, r3, #8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01b      	beq.n	800d374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f06f 0208 	mvn.w	r2, #8
 800d344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2204      	movs	r2, #4
 800d34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	f003 0303 	and.w	r3, r3, #3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f8e5 	bl	800d52a <HAL_TIM_IC_CaptureCallback>
 800d360:	e005      	b.n	800d36e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f8d7 	bl	800d516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f8e8 	bl	800d53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f003 0310 	and.w	r3, r3, #16
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d020      	beq.n	800d3c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f003 0310 	and.w	r3, r3, #16
 800d384:	2b00      	cmp	r3, #0
 800d386:	d01b      	beq.n	800d3c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f06f 0210 	mvn.w	r2, #16
 800d390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2208      	movs	r2, #8
 800d396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f8bf 	bl	800d52a <HAL_TIM_IC_CaptureCallback>
 800d3ac:	e005      	b.n	800d3ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f8b1 	bl	800d516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 f8c2 	bl	800d53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	f003 0301 	and.w	r3, r3, #1
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00c      	beq.n	800d3e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d007      	beq.n	800d3e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f06f 0201 	mvn.w	r2, #1
 800d3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7f4 ffd6 	bl	8002390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d104      	bne.n	800d3f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00c      	beq.n	800d412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d007      	beq.n	800d412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f9af 	bl	800d770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00c      	beq.n	800d436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f9a7 	bl	800d784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00c      	beq.n	800d45a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d007      	beq.n	800d45a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f87c 	bl	800d552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f003 0320 	and.w	r3, r3, #32
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00c      	beq.n	800d47e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f003 0320 	and.w	r3, r3, #32
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f06f 0220 	mvn.w	r2, #32
 800d476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f96f 	bl	800d75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00c      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 f97b 	bl	800d798 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00c      	beq.n	800d4c6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f973 	bl	800d7ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00c      	beq.n	800d4ea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d007      	beq.n	800d4ea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f96b 	bl	800d7c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00c      	beq.n	800d50e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d007      	beq.n	800d50e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f963 	bl	800d7d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d50e:	bf00      	nop
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d532:	bf00      	nop
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d53e:	b480      	push	{r7}
 800d540:	b083      	sub	sp, #12
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
	...

0800d568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a68      	ldr	r2, [pc, #416]	@ (800d71c <TIM_Base_SetConfig+0x1b4>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d02b      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a67      	ldr	r2, [pc, #412]	@ (800d720 <TIM_Base_SetConfig+0x1b8>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d027      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d58e:	d023      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d596:	d01f      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a62      	ldr	r2, [pc, #392]	@ (800d724 <TIM_Base_SetConfig+0x1bc>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d01b      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a61      	ldr	r2, [pc, #388]	@ (800d728 <TIM_Base_SetConfig+0x1c0>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d017      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a60      	ldr	r2, [pc, #384]	@ (800d72c <TIM_Base_SetConfig+0x1c4>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d013      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a5f      	ldr	r2, [pc, #380]	@ (800d730 <TIM_Base_SetConfig+0x1c8>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00f      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a5e      	ldr	r2, [pc, #376]	@ (800d734 <TIM_Base_SetConfig+0x1cc>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d00b      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a5d      	ldr	r2, [pc, #372]	@ (800d738 <TIM_Base_SetConfig+0x1d0>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d007      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a5c      	ldr	r2, [pc, #368]	@ (800d73c <TIM_Base_SetConfig+0x1d4>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d003      	beq.n	800d5d8 <TIM_Base_SetConfig+0x70>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a5b      	ldr	r2, [pc, #364]	@ (800d740 <TIM_Base_SetConfig+0x1d8>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d108      	bne.n	800d5ea <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a4b      	ldr	r2, [pc, #300]	@ (800d71c <TIM_Base_SetConfig+0x1b4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d043      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a4a      	ldr	r2, [pc, #296]	@ (800d720 <TIM_Base_SetConfig+0x1b8>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d03f      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d600:	d03b      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d608:	d037      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a45      	ldr	r2, [pc, #276]	@ (800d724 <TIM_Base_SetConfig+0x1bc>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d033      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4a44      	ldr	r2, [pc, #272]	@ (800d728 <TIM_Base_SetConfig+0x1c0>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d02f      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a43      	ldr	r2, [pc, #268]	@ (800d72c <TIM_Base_SetConfig+0x1c4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d02b      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a42      	ldr	r2, [pc, #264]	@ (800d730 <TIM_Base_SetConfig+0x1c8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d027      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a41      	ldr	r2, [pc, #260]	@ (800d734 <TIM_Base_SetConfig+0x1cc>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d023      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a40      	ldr	r2, [pc, #256]	@ (800d738 <TIM_Base_SetConfig+0x1d0>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d01f      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a3f      	ldr	r2, [pc, #252]	@ (800d73c <TIM_Base_SetConfig+0x1d4>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d01b      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a3e      	ldr	r2, [pc, #248]	@ (800d740 <TIM_Base_SetConfig+0x1d8>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d017      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a3d      	ldr	r2, [pc, #244]	@ (800d744 <TIM_Base_SetConfig+0x1dc>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d013      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a3c      	ldr	r2, [pc, #240]	@ (800d748 <TIM_Base_SetConfig+0x1e0>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d00f      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a3b      	ldr	r2, [pc, #236]	@ (800d74c <TIM_Base_SetConfig+0x1e4>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d00b      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a3a      	ldr	r2, [pc, #232]	@ (800d750 <TIM_Base_SetConfig+0x1e8>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d007      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a39      	ldr	r2, [pc, #228]	@ (800d754 <TIM_Base_SetConfig+0x1ec>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d003      	beq.n	800d67a <TIM_Base_SetConfig+0x112>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a38      	ldr	r2, [pc, #224]	@ (800d758 <TIM_Base_SetConfig+0x1f0>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d108      	bne.n	800d68c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	4313      	orrs	r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	4313      	orrs	r3, r2
 800d698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	689a      	ldr	r2, [r3, #8]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a1a      	ldr	r2, [pc, #104]	@ (800d71c <TIM_Base_SetConfig+0x1b4>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d023      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a19      	ldr	r2, [pc, #100]	@ (800d720 <TIM_Base_SetConfig+0x1b8>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d01f      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d73c <TIM_Base_SetConfig+0x1d4>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d01b      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a1d      	ldr	r2, [pc, #116]	@ (800d740 <TIM_Base_SetConfig+0x1d8>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d017      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a1c      	ldr	r2, [pc, #112]	@ (800d744 <TIM_Base_SetConfig+0x1dc>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d013      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a1b      	ldr	r2, [pc, #108]	@ (800d748 <TIM_Base_SetConfig+0x1e0>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d00f      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a1a      	ldr	r2, [pc, #104]	@ (800d74c <TIM_Base_SetConfig+0x1e4>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d00b      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a19      	ldr	r2, [pc, #100]	@ (800d750 <TIM_Base_SetConfig+0x1e8>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d007      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a18      	ldr	r2, [pc, #96]	@ (800d754 <TIM_Base_SetConfig+0x1ec>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d003      	beq.n	800d700 <TIM_Base_SetConfig+0x198>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	@ (800d758 <TIM_Base_SetConfig+0x1f0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d103      	bne.n	800d708 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	691a      	ldr	r2, [r3, #16]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	615a      	str	r2, [r3, #20]
}
 800d70e:	bf00      	nop
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	40012c00 	.word	0x40012c00
 800d720:	50012c00 	.word	0x50012c00
 800d724:	40000400 	.word	0x40000400
 800d728:	50000400 	.word	0x50000400
 800d72c:	40000800 	.word	0x40000800
 800d730:	50000800 	.word	0x50000800
 800d734:	40000c00 	.word	0x40000c00
 800d738:	50000c00 	.word	0x50000c00
 800d73c:	40013400 	.word	0x40013400
 800d740:	50013400 	.word	0x50013400
 800d744:	40014000 	.word	0x40014000
 800d748:	50014000 	.word	0x50014000
 800d74c:	40014400 	.word	0x40014400
 800d750:	50014400 	.word	0x50014400
 800d754:	40014800 	.word	0x40014800
 800d758:	50014800 	.word	0x50014800

0800d75c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d101      	bne.n	800d7fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e042      	b.n	800d880 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d800:	2b00      	cmp	r3, #0
 800d802:	d106      	bne.n	800d812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f7f5 f9b3 	bl	8002b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2224      	movs	r2, #36	@ 0x24
 800d816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f022 0201 	bic.w	r2, r2, #1
 800d828:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d002      	beq.n	800d838 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f9d6 	bl	800dbe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f825 	bl	800d888 <UART_SetConfig>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b01      	cmp	r3, #1
 800d842:	d101      	bne.n	800d848 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e01b      	b.n	800d880 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689a      	ldr	r2, [r3, #8]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f042 0201 	orr.w	r2, r2, #1
 800d876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fa55 	bl	800dd28 <UART_CheckIdleState>
 800d87e:	4603      	mov	r3, r0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d88c:	b094      	sub	sp, #80	@ 0x50
 800d88e:	af00      	add	r7, sp, #0
 800d890:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	4b83      	ldr	r3, [pc, #524]	@ (800daac <UART_SetConfig+0x224>)
 800d89e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	431a      	orrs	r2, r3
 800d8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	497c      	ldr	r1, [pc, #496]	@ (800dab0 <UART_SetConfig+0x228>)
 800d8c0:	4019      	ands	r1, r3
 800d8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8c8:	430b      	orrs	r3, r1
 800d8ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d8:	68d9      	ldr	r1, [r3, #12]
 800d8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	ea40 0301 	orr.w	r3, r0, r1
 800d8e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	4b6f      	ldr	r3, [pc, #444]	@ (800daac <UART_SetConfig+0x224>)
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d009      	beq.n	800d908 <UART_SetConfig+0x80>
 800d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	4b6e      	ldr	r3, [pc, #440]	@ (800dab4 <UART_SetConfig+0x22c>)
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d004      	beq.n	800d908 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d900:	6a1a      	ldr	r2, [r3, #32]
 800d902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d904:	4313      	orrs	r3, r2
 800d906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d912:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d91c:	430b      	orrs	r3, r1
 800d91e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d926:	f023 000f 	bic.w	r0, r3, #15
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	ea40 0301 	orr.w	r3, r0, r1
 800d936:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	4b5e      	ldr	r3, [pc, #376]	@ (800dab8 <UART_SetConfig+0x230>)
 800d93e:	429a      	cmp	r2, r3
 800d940:	d102      	bne.n	800d948 <UART_SetConfig+0xc0>
 800d942:	2301      	movs	r3, #1
 800d944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d946:	e032      	b.n	800d9ae <UART_SetConfig+0x126>
 800d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	4b5b      	ldr	r3, [pc, #364]	@ (800dabc <UART_SetConfig+0x234>)
 800d94e:	429a      	cmp	r2, r3
 800d950:	d102      	bne.n	800d958 <UART_SetConfig+0xd0>
 800d952:	2302      	movs	r3, #2
 800d954:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d956:	e02a      	b.n	800d9ae <UART_SetConfig+0x126>
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	4b58      	ldr	r3, [pc, #352]	@ (800dac0 <UART_SetConfig+0x238>)
 800d95e:	429a      	cmp	r2, r3
 800d960:	d102      	bne.n	800d968 <UART_SetConfig+0xe0>
 800d962:	2304      	movs	r3, #4
 800d964:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d966:	e022      	b.n	800d9ae <UART_SetConfig+0x126>
 800d968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	4b55      	ldr	r3, [pc, #340]	@ (800dac4 <UART_SetConfig+0x23c>)
 800d96e:	429a      	cmp	r2, r3
 800d970:	d102      	bne.n	800d978 <UART_SetConfig+0xf0>
 800d972:	2308      	movs	r3, #8
 800d974:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d976:	e01a      	b.n	800d9ae <UART_SetConfig+0x126>
 800d978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	4b52      	ldr	r3, [pc, #328]	@ (800dac8 <UART_SetConfig+0x240>)
 800d97e:	429a      	cmp	r2, r3
 800d980:	d102      	bne.n	800d988 <UART_SetConfig+0x100>
 800d982:	2310      	movs	r3, #16
 800d984:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d986:	e012      	b.n	800d9ae <UART_SetConfig+0x126>
 800d988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	4b4f      	ldr	r3, [pc, #316]	@ (800dacc <UART_SetConfig+0x244>)
 800d98e:	429a      	cmp	r2, r3
 800d990:	d103      	bne.n	800d99a <UART_SetConfig+0x112>
 800d992:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d996:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d998:	e009      	b.n	800d9ae <UART_SetConfig+0x126>
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	4b43      	ldr	r3, [pc, #268]	@ (800daac <UART_SetConfig+0x224>)
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d102      	bne.n	800d9aa <UART_SetConfig+0x122>
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9a8:	e001      	b.n	800d9ae <UART_SetConfig+0x126>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	4b3e      	ldr	r3, [pc, #248]	@ (800daac <UART_SetConfig+0x224>)
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d005      	beq.n	800d9c4 <UART_SetConfig+0x13c>
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	4b3d      	ldr	r3, [pc, #244]	@ (800dab4 <UART_SetConfig+0x22c>)
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	f040 8088 	bne.w	800dad4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	623b      	str	r3, [r7, #32]
 800d9ca:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9d0:	f7fd fa78 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9d4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80eb 	beq.w	800dbb4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e2:	4a3b      	ldr	r2, [pc, #236]	@ (800dad0 <UART_SetConfig+0x248>)
 800d9e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	4413      	add	r3, r2
 800d9fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d305      	bcc.n	800da0e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d903      	bls.n	800da16 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800da14:	e048      	b.n	800daa8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da18:	2200      	movs	r2, #0
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	61fa      	str	r2, [r7, #28]
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da22:	4a2b      	ldr	r2, [pc, #172]	@ (800dad0 <UART_SetConfig+0x248>)
 800da24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	2200      	movs	r2, #0
 800da2c:	613b      	str	r3, [r7, #16]
 800da2e:	617a      	str	r2, [r7, #20]
 800da30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da38:	f7f2 ff40 	bl	80008bc <__aeabi_uldivmod>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4610      	mov	r0, r2
 800da42:	4619      	mov	r1, r3
 800da44:	f04f 0200 	mov.w	r2, #0
 800da48:	f04f 0300 	mov.w	r3, #0
 800da4c:	020b      	lsls	r3, r1, #8
 800da4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da52:	0202      	lsls	r2, r0, #8
 800da54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da56:	6849      	ldr	r1, [r1, #4]
 800da58:	0849      	lsrs	r1, r1, #1
 800da5a:	2000      	movs	r0, #0
 800da5c:	460c      	mov	r4, r1
 800da5e:	4605      	mov	r5, r0
 800da60:	eb12 0804 	adds.w	r8, r2, r4
 800da64:	eb43 0905 	adc.w	r9, r3, r5
 800da68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	60bb      	str	r3, [r7, #8]
 800da70:	60fa      	str	r2, [r7, #12]
 800da72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da76:	4640      	mov	r0, r8
 800da78:	4649      	mov	r1, r9
 800da7a:	f7f2 ff1f 	bl	80008bc <__aeabi_uldivmod>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4613      	mov	r3, r2
 800da84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da8c:	d308      	bcc.n	800daa0 <UART_SetConfig+0x218>
 800da8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da94:	d204      	bcs.n	800daa0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da9c:	60da      	str	r2, [r3, #12]
 800da9e:	e003      	b.n	800daa8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800daa6:	e085      	b.n	800dbb4 <UART_SetConfig+0x32c>
 800daa8:	e084      	b.n	800dbb4 <UART_SetConfig+0x32c>
 800daaa:	bf00      	nop
 800daac:	46002400 	.word	0x46002400
 800dab0:	cfff69f3 	.word	0xcfff69f3
 800dab4:	56002400 	.word	0x56002400
 800dab8:	40013800 	.word	0x40013800
 800dabc:	40004400 	.word	0x40004400
 800dac0:	40004800 	.word	0x40004800
 800dac4:	40004c00 	.word	0x40004c00
 800dac8:	40005000 	.word	0x40005000
 800dacc:	40006400 	.word	0x40006400
 800dad0:	0800e3a4 	.word	0x0800e3a4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dadc:	d13c      	bne.n	800db58 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae0:	2200      	movs	r2, #0
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	607a      	str	r2, [r7, #4]
 800dae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daea:	f7fd f9eb 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800daee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d05e      	beq.n	800dbb4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dafa:	4a39      	ldr	r2, [pc, #228]	@ (800dbe0 <UART_SetConfig+0x358>)
 800dafc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db00:	461a      	mov	r2, r3
 800db02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db04:	fbb3 f3f2 	udiv	r3, r3, r2
 800db08:	005a      	lsls	r2, r3, #1
 800db0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	085b      	lsrs	r3, r3, #1
 800db10:	441a      	add	r2, r3
 800db12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	fbb2 f3f3 	udiv	r3, r2, r3
 800db1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db1e:	2b0f      	cmp	r3, #15
 800db20:	d916      	bls.n	800db50 <UART_SetConfig+0x2c8>
 800db22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db28:	d212      	bcs.n	800db50 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	f023 030f 	bic.w	r3, r3, #15
 800db32:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db36:	085b      	lsrs	r3, r3, #1
 800db38:	b29b      	uxth	r3, r3
 800db3a:	f003 0307 	and.w	r3, r3, #7
 800db3e:	b29a      	uxth	r2, r3
 800db40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db42:	4313      	orrs	r3, r2
 800db44:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db4c:	60da      	str	r2, [r3, #12]
 800db4e:	e031      	b.n	800dbb4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800db56:	e02d      	b.n	800dbb4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db5a:	2200      	movs	r2, #0
 800db5c:	469a      	mov	sl, r3
 800db5e:	4693      	mov	fp, r2
 800db60:	4650      	mov	r0, sl
 800db62:	4659      	mov	r1, fp
 800db64:	f7fd f9ae 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800db68:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800db6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d021      	beq.n	800dbb4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db74:	4a1a      	ldr	r2, [pc, #104]	@ (800dbe0 <UART_SetConfig+0x358>)
 800db76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db7a:	461a      	mov	r2, r3
 800db7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800db82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	085b      	lsrs	r3, r3, #1
 800db88:	441a      	add	r2, r3
 800db8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db96:	2b0f      	cmp	r3, #15
 800db98:	d909      	bls.n	800dbae <UART_SetConfig+0x326>
 800db9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dba0:	d205      	bcs.n	800dbae <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60da      	str	r2, [r3, #12]
 800dbac:	e002      	b.n	800dbb4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbcc:	2200      	movs	r2, #0
 800dbce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3750      	adds	r7, #80	@ 0x50
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbde:	bf00      	nop
 800dbe0:	0800e3a4 	.word	0x0800e3a4

0800dbe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf0:	f003 0308 	and.w	r3, r3, #8
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00a      	beq.n	800dc0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	430a      	orrs	r2, r1
 800dc0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc34:	f003 0302 	and.w	r3, r3, #2
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00a      	beq.n	800dc52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc56:	f003 0304 	and.w	r3, r3, #4
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc78:	f003 0310 	and.w	r3, r3, #16
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc9a:	f003 0320 	and.w	r3, r3, #32
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00a      	beq.n	800dcb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01a      	beq.n	800dcfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dce2:	d10a      	bne.n	800dcfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	430a      	orrs	r2, r1
 800dcf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	605a      	str	r2, [r3, #4]
  }
}
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b098      	sub	sp, #96	@ 0x60
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd38:	f7f5 fcee 	bl	8003718 <HAL_GetTick>
 800dd3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b08      	cmp	r3, #8
 800dd4a:	d12f      	bne.n	800ddac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd54:	2200      	movs	r2, #0
 800dd56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f88e 	bl	800de7c <UART_WaitOnFlagUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d022      	beq.n	800ddac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6e:	e853 3f00 	ldrex	r3, [r3]
 800dd72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	461a      	mov	r2, r3
 800dd82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd84:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd8c:	e841 2300 	strex	r3, r2, [r1]
 800dd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1e6      	bne.n	800dd66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e063      	b.n	800de74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 0304 	and.w	r3, r3, #4
 800ddb6:	2b04      	cmp	r3, #4
 800ddb8:	d149      	bne.n	800de4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f857 	bl	800de7c <UART_WaitOnFlagUntilTimeout>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d03c      	beq.n	800de4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	e853 3f00 	ldrex	r3, [r3]
 800dde0:	623b      	str	r3, [r7, #32]
   return(result);
 800dde2:	6a3b      	ldr	r3, [r7, #32]
 800dde4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dde8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddfa:	e841 2300 	strex	r3, r2, [r1]
 800ddfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1e6      	bne.n	800ddd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3308      	adds	r3, #8
 800de0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	60fb      	str	r3, [r7, #12]
   return(result);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f023 0301 	bic.w	r3, r3, #1
 800de1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3308      	adds	r3, #8
 800de24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de26:	61fa      	str	r2, [r7, #28]
 800de28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2a:	69b9      	ldr	r1, [r7, #24]
 800de2c:	69fa      	ldr	r2, [r7, #28]
 800de2e:	e841 2300 	strex	r3, r2, [r1]
 800de32:	617b      	str	r3, [r7, #20]
   return(result);
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e5      	bne.n	800de06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2220      	movs	r2, #32
 800de3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e012      	b.n	800de74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2220      	movs	r2, #32
 800de52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2220      	movs	r2, #32
 800de5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3758      	adds	r7, #88	@ 0x58
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de8c:	e049      	b.n	800df22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de94:	d045      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de96:	f7f5 fc3f 	bl	8003718 <HAL_GetTick>
 800de9a:	4602      	mov	r2, r0
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	69ba      	ldr	r2, [r7, #24]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d302      	bcc.n	800deac <UART_WaitOnFlagUntilTimeout+0x30>
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800deac:	2303      	movs	r3, #3
 800deae:	e048      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f003 0304 	and.w	r3, r3, #4
 800deba:	2b00      	cmp	r3, #0
 800debc:	d031      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	69db      	ldr	r3, [r3, #28]
 800dec4:	f003 0308 	and.w	r3, r3, #8
 800dec8:	2b08      	cmp	r3, #8
 800deca:	d110      	bne.n	800deee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2208      	movs	r2, #8
 800ded2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 f838 	bl	800df4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2208      	movs	r2, #8
 800dede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e029      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800def8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800defc:	d111      	bne.n	800df22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 f81e 	bl	800df4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	e00f      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	69da      	ldr	r2, [r3, #28]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	4013      	ands	r3, r2
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	429a      	cmp	r2, r3
 800df30:	bf0c      	ite	eq
 800df32:	2301      	moveq	r3, #1
 800df34:	2300      	movne	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	461a      	mov	r2, r3
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d0a6      	beq.n	800de8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df4a:	b480      	push	{r7}
 800df4c:	b095      	sub	sp, #84	@ 0x54
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df70:	643b      	str	r3, [r7, #64]	@ 0x40
 800df72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e6      	bne.n	800df52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3308      	adds	r3, #8
 800df8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	e853 3f00 	ldrex	r3, [r3]
 800df92:	61fb      	str	r3, [r7, #28]
   return(result);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df9a:	f023 0301 	bic.w	r3, r3, #1
 800df9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfb0:	e841 2300 	strex	r3, r2, [r1]
 800dfb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e3      	bne.n	800df84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d118      	bne.n	800dff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	f023 0310 	bic.w	r3, r3, #16
 800dfd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfe2:	61bb      	str	r3, [r7, #24]
 800dfe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	6979      	ldr	r1, [r7, #20]
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	613b      	str	r3, [r7, #16]
   return(result);
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e6      	bne.n	800dfc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2220      	movs	r2, #32
 800dffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e00a:	bf00      	nop
 800e00c:	3754      	adds	r7, #84	@ 0x54
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e016:	b480      	push	{r7}
 800e018:	b085      	sub	sp, #20
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e024:	2b01      	cmp	r3, #1
 800e026:	d101      	bne.n	800e02c <HAL_UARTEx_DisableFifoMode+0x16>
 800e028:	2302      	movs	r3, #2
 800e02a:	e027      	b.n	800e07c <HAL_UARTEx_DisableFifoMode+0x66>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2224      	movs	r2, #36	@ 0x24
 800e038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f022 0201 	bic.w	r2, r2, #1
 800e052:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e05a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d101      	bne.n	800e0a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e09c:	2302      	movs	r3, #2
 800e09e:	e02d      	b.n	800e0fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2224      	movs	r2, #36	@ 0x24
 800e0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f022 0201 	bic.w	r2, r2, #1
 800e0c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f84f 	bl	800e180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e114:	2b01      	cmp	r3, #1
 800e116:	d101      	bne.n	800e11c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e118:	2302      	movs	r3, #2
 800e11a:	e02d      	b.n	800e178 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2224      	movs	r2, #36	@ 0x24
 800e128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f022 0201 	bic.w	r2, r2, #1
 800e142:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	430a      	orrs	r2, r1
 800e156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f811 	bl	800e180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2220      	movs	r2, #32
 800e16a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e176:	2300      	movs	r3, #0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d108      	bne.n	800e1a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1a0:	e031      	b.n	800e206 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1a2:	2308      	movs	r3, #8
 800e1a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1a6:	2308      	movs	r3, #8
 800e1a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	0e5b      	lsrs	r3, r3, #25
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0307 	and.w	r3, r3, #7
 800e1b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	0f5b      	lsrs	r3, r3, #29
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0307 	and.w	r3, r3, #7
 800e1c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1ca:	7bbb      	ldrb	r3, [r7, #14]
 800e1cc:	7b3a      	ldrb	r2, [r7, #12]
 800e1ce:	4911      	ldr	r1, [pc, #68]	@ (800e214 <UARTEx_SetNbDataToProcess+0x94>)
 800e1d0:	5c8a      	ldrb	r2, [r1, r2]
 800e1d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1d6:	7b3a      	ldrb	r2, [r7, #12]
 800e1d8:	490f      	ldr	r1, [pc, #60]	@ (800e218 <UARTEx_SetNbDataToProcess+0x98>)
 800e1da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1e8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ea:	7b7a      	ldrb	r2, [r7, #13]
 800e1ec:	4909      	ldr	r1, [pc, #36]	@ (800e214 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ee:	5c8a      	ldrb	r2, [r1, r2]
 800e1f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1f4:	7b7a      	ldrb	r2, [r7, #13]
 800e1f6:	4908      	ldr	r1, [pc, #32]	@ (800e218 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e206:	bf00      	nop
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	0800e3bc 	.word	0x0800e3bc
 800e218:	0800e3c4 	.word	0x0800e3c4

0800e21c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f043 0202 	orr.w	r2, r3, #2
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	021b      	lsls	r3, r3, #8
 800e23c:	431a      	orrs	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f023 0202 	bic.w	r2, r3, #2
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	601a      	str	r2, [r3, #0]
}
 800e24e:	bf00      	nop
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <memset>:
 800e25a:	4402      	add	r2, r0
 800e25c:	4603      	mov	r3, r0
 800e25e:	4293      	cmp	r3, r2
 800e260:	d100      	bne.n	800e264 <memset+0xa>
 800e262:	4770      	bx	lr
 800e264:	f803 1b01 	strb.w	r1, [r3], #1
 800e268:	e7f9      	b.n	800e25e <memset+0x4>
	...

0800e26c <__libc_init_array>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4d0d      	ldr	r5, [pc, #52]	@ (800e2a4 <__libc_init_array+0x38>)
 800e270:	2600      	movs	r6, #0
 800e272:	4c0d      	ldr	r4, [pc, #52]	@ (800e2a8 <__libc_init_array+0x3c>)
 800e274:	1b64      	subs	r4, r4, r5
 800e276:	10a4      	asrs	r4, r4, #2
 800e278:	42a6      	cmp	r6, r4
 800e27a:	d109      	bne.n	800e290 <__libc_init_array+0x24>
 800e27c:	4d0b      	ldr	r5, [pc, #44]	@ (800e2ac <__libc_init_array+0x40>)
 800e27e:	2600      	movs	r6, #0
 800e280:	4c0b      	ldr	r4, [pc, #44]	@ (800e2b0 <__libc_init_array+0x44>)
 800e282:	f000 f817 	bl	800e2b4 <_init>
 800e286:	1b64      	subs	r4, r4, r5
 800e288:	10a4      	asrs	r4, r4, #2
 800e28a:	42a6      	cmp	r6, r4
 800e28c:	d105      	bne.n	800e29a <__libc_init_array+0x2e>
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	f855 3b04 	ldr.w	r3, [r5], #4
 800e294:	3601      	adds	r6, #1
 800e296:	4798      	blx	r3
 800e298:	e7ee      	b.n	800e278 <__libc_init_array+0xc>
 800e29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29e:	3601      	adds	r6, #1
 800e2a0:	4798      	blx	r3
 800e2a2:	e7f2      	b.n	800e28a <__libc_init_array+0x1e>
 800e2a4:	0800e3d4 	.word	0x0800e3d4
 800e2a8:	0800e3d4 	.word	0x0800e3d4
 800e2ac:	0800e3d4 	.word	0x0800e3d4
 800e2b0:	0800e3d8 	.word	0x0800e3d8

0800e2b4 <_init>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	bf00      	nop
 800e2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ba:	bc08      	pop	{r3}
 800e2bc:	469e      	mov	lr, r3
 800e2be:	4770      	bx	lr

0800e2c0 <_fini>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	bf00      	nop
 800e2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c6:	bc08      	pop	{r3}
 800e2c8:	469e      	mov	lr, r3
 800e2ca:	4770      	bx	lr
