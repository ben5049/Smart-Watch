
PCA9570_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007054  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080073a0  080073a0  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073a0  080073a0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a0  080073a0  000083a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080073a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  080073b4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080073b4  000091e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf04  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033dd  00000000  00000000  00024f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00028328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e5  00000000  00000000  00029e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042549  00000000  00000000  0002b325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f604  00000000  00000000  0006d86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4814  00000000  00000000  0008ce72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00231686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  002316cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00238ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	080072b0 	.word	0x080072b0

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	080072b0 	.word	0x080072b0

080002b4 <PCA9570_Init>:
 *      Author: bens1
 */

#include "PCA9570.h"

PCA9570_StatusTypeDef PCA9570_Init(PCA9570_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]

	PCA9570_StatusTypeDef status = PCA9570_OK;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	uint32_t regData32;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	601a      	str	r2, [r3, #0]
	dev->pinStates = 0x00;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	711a      	strb	r2, [r3, #4]

	/* Reset the device */
	status = PCA9570_Reset(dev);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f000 f825 	bl	800031e <PCA9570_Reset>
 80002d4:	4603      	mov	r3, r0
 80002d6:	73fb      	strb	r3, [r7, #15]
	if (status != PCA9570_OK){
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <PCA9570_Init+0x2e>
		return status;
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	e019      	b.n	8000316 <PCA9570_Init+0x62>
	}

	/* Check the ID of the chip */
	status = PCA9570_GetID(dev, &regData32);
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f823 	bl	8000334 <PCA9570_GetID>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]
	// TODO: CHECK ID
	if (status != PCA9570_OK){
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <PCA9570_Init+0x48>
		return status;
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	e00c      	b.n	8000316 <PCA9570_Init+0x62>
	}

	/* Set the pins to a known state */
	status = PCA9570_WritePins(dev, PCA9570_PIN_1 | PCA9570_PIN_2 | PCA9570_PIN_3 | PCA9570_PIN_4, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	210f      	movs	r1, #15
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f000 f823 	bl	800034c <PCA9570_WritePins>
 8000306:	4603      	mov	r3, r0
 8000308:	73fb      	strb	r3, [r7, #15]
	if (status != PCA9570_OK){
 800030a:	7bfb      	ldrb	r3, [r7, #15]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <PCA9570_Init+0x60>
		return status;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	e000      	b.n	8000316 <PCA9570_Init+0x62>
	}

	return status;
 8000314:	7bfb      	ldrb	r3, [r7, #15]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <PCA9570_Reset>:


PCA9570_StatusTypeDef PCA9570_Reset(PCA9570_HandleTypeDef *dev){
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
	return PCA9570_OK;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <PCA9570_GetID>:

PCA9570_StatusTypeDef PCA9570_GetID(PCA9570_HandleTypeDef *dev, uint32_t *data){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	return PCA9570_OK;
 800033e:	2300      	movs	r3, #0
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <PCA9570_WritePins>:

PCA9570_StatusTypeDef PCA9570_WritePins(PCA9570_HandleTypeDef *dev, uint8_t pins, GPIO_PinState state){
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af02      	add	r7, sp, #8
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
 8000358:	4613      	mov	r3, r2
 800035a:	70bb      	strb	r3, [r7, #2]

	PCA9570_StatusTypeDef status = PCA9570_OK;
 800035c:	2300      	movs	r3, #0
 800035e:	73fb      	strb	r3, [r7, #15]

	/* Prepare the updated register value */
	if (state == GPIO_PIN_SET){
 8000360:	78bb      	ldrb	r3, [r7, #2]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d107      	bne.n	8000376 <PCA9570_WritePins+0x2a>
		dev->pinStates |= pins;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791a      	ldrb	r2, [r3, #4]
 800036a:	78fb      	ldrb	r3, [r7, #3]
 800036c:	4313      	orrs	r3, r2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	711a      	strb	r2, [r3, #4]
 8000374:	e00b      	b.n	800038e <PCA9570_WritePins+0x42>
	}
	else {
		dev->pinStates &= (~pins);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	b25a      	sxtb	r2, r3
 800037c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000380:	43db      	mvns	r3, r3
 8000382:	b25b      	sxtb	r3, r3
 8000384:	4013      	ands	r3, r2
 8000386:	b25b      	sxtb	r3, r3
 8000388:	b2da      	uxtb	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	711a      	strb	r2, [r3, #4]
	}

	status = HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9570_I2C_DEV_ADDR, &dev->pinStates, 1, HAL_MAX_DELAY);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6818      	ldr	r0, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	1d1a      	adds	r2, r3, #4
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2301      	movs	r3, #1
 800039e:	2148      	movs	r1, #72	@ 0x48
 80003a0:	f003 f9b6 	bl	8003710 <HAL_I2C_Master_Transmit>
 80003a4:	4603      	mov	r3, r0
 80003a6:	73fb      	strb	r3, [r7, #15]

	return status;
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f001 f889 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f82d 	bl	800041c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80003c2:	f000 f89f 	bl	8000504 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f9f7 	bl	80007b8 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80003ca:	f000 f919 	bl	8000600 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80003ce:	f000 f92d 	bl	800062c <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80003d2:	f000 f997 	bl	8000704 <MX_ICACHE_Init>
  MX_RTC_Init();
 80003d6:	f000 f9a1 	bl	800071c <MX_RTC_Init>
  MX_ADC1_Init();
 80003da:	f000 f8a1 	bl	8000520 <MX_ADC1_Init>
  MX_I2C2_Init();
 80003de:	f000 f951 	bl	8000684 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  PCA9570_HandleTypeDef pca;
  PCA9570_Init(&pca, &hi2c2);
 80003e2:	463b      	mov	r3, r7
 80003e4:	490c      	ldr	r1, [pc, #48]	@ (8000418 <main+0x64>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff64 	bl	80002b4 <PCA9570_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PCA9570_WritePins(&pca, PCA9570_PIN_1 | PCA9570_PIN_2 | PCA9570_PIN_3, GPIO_PIN_SET);
 80003ec:	463b      	mov	r3, r7
 80003ee:	2201      	movs	r2, #1
 80003f0:	2107      	movs	r1, #7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ffaa 	bl	800034c <PCA9570_WritePins>
	  HAL_Delay(1000);
 80003f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003fc:	f001 f8b8 	bl	8001570 <HAL_Delay>
	  PCA9570_WritePins(&pca, PCA9570_PIN_1 | PCA9570_PIN_2 | PCA9570_PIN_3, GPIO_PIN_RESET);
 8000400:	463b      	mov	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	2107      	movs	r1, #7
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffa0 	bl	800034c <PCA9570_WritePins>
	  HAL_Delay(1000);
 800040c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000410:	f001 f8ae 	bl	8001570 <HAL_Delay>
	  PCA9570_WritePins(&pca, PCA9570_PIN_1 | PCA9570_PIN_2 | PCA9570_PIN_3, GPIO_PIN_SET);
 8000414:	bf00      	nop
 8000416:	e7e9      	b.n	80003ec <main+0x38>
 8000418:	2000010c 	.word	0x2000010c

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b09e      	sub	sp, #120	@ 0x78
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2260      	movs	r2, #96	@ 0x60
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f006 ff14 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]
 800043e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000440:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000444:	f003 fd3a 	bl	8003ebc <HAL_PWREx_ControlVoltageScaling>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800044e:	f000 fd33 	bl	8000eb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000452:	f003 fd13 	bl	8003e7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000456:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <SystemClock_Config+0xe4>)
 8000458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800045c:	4a28      	ldr	r2, [pc, #160]	@ (8000500 <SystemClock_Config+0xe4>)
 800045e:	f023 0318 	bic.w	r3, r3, #24
 8000462:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000466:	2307      	movs	r3, #7
 8000468:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800046e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000470:	2381      	movs	r3, #129	@ 0x81
 8000472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	2303      	movs	r3, #3
 8000484:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 800048e:	2314      	movs	r3, #20
 8000490:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800049a:	2302      	movs	r3, #2
 800049c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800049e:	230c      	movs	r3, #12
 80004a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fe02 	bl	80040b4 <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004b6:	f000 fcff 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	231f      	movs	r3, #31
 80004bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004be:	2303      	movs	r3, #3
 80004c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004d2:	463b      	mov	r3, r7
 80004d4:	2104      	movs	r1, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 fcc8 	bl	8004e6c <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80004e2:	f000 fce9 	bl	8000eb8 <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80004e6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80004ea:	f006 f815 	bl	8006518 <HAL_RCCEx_EnableLSCO>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80004ee:	f005 f817 	bl	8005520 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80004f2:	f005 ffff 	bl	80064f4 <HAL_RCCEx_EnableLSECSS>
}
 80004f6:	bf00      	nop
 80004f8:	3778      	adds	r7, #120	@ 0x78
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	46020c00 	.word	0x46020c00

08000504 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000508:	f003 fdb4 	bl	8004074 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800050c:	2002      	movs	r0, #2
 800050e:	f003 fd61 	bl	8003fd4 <HAL_PWREx_ConfigSupply>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000518:	f000 fcce 	bl	8000eb8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2220      	movs	r2, #32
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f006 fe93 	bl	8007258 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000532:	4b30      	ldr	r3, [pc, #192]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000534:	4a30      	ldr	r2, [pc, #192]	@ (80005f8 <MX_ADC1_Init+0xd8>)
 8000536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000538:	4b2e      	ldr	r3, [pc, #184]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800053e:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000544:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000558:	2204      	movs	r2, #4
 800055a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800056a:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800056c:	2201      	movs	r2, #1
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000570:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000572:	2200      	movs	r2, #0
 8000574:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000580:	2200      	movs	r2, #0
 8000582:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058c:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800058e:	2200      	movs	r2, #0
 8000590:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 8000594:	2200      	movs	r2, #0
 8000596:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 800059a:	2200      	movs	r2, #0
 800059c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a4:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4811      	ldr	r0, [pc, #68]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 80005ae:	f001 fb39 	bl	8001c24 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005b8:	f000 fc7e 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_ADC1_Init+0xdc>)
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c0:	2306      	movs	r3, #6
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <MX_ADC1_Init+0xd4>)
 80005dc:	f001 fe0a 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80005e6:	f000 fc67 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028
 80005f8:	42028000 	.word	0x42028000
 80005fc:	20000100 	.word	0x20000100

08000600 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <MX_DCACHE1_Init+0x24>)
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <MX_DCACHE1_Init+0x28>)
 8000608:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_DCACHE1_Init+0x24>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_DCACHE1_Init+0x24>)
 8000612:	f002 fd45 	bl	80030a0 <HAL_DCACHE_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 800061c:	f000 fc4c 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000b4 	.word	0x200000b4
 8000628:	40031400 	.word	0x40031400

0800062c <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_DCACHE2_Init+0x4c>)
 8000634:	4a11      	ldr	r2, [pc, #68]	@ (800067c <MX_DCACHE2_Init+0x50>)
 8000636:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_DCACHE2_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_DCACHE2_Init+0x4c>)
 8000640:	f002 fd2e 	bl	80030a0 <HAL_DCACHE_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 800064a:	f000 fc35 	bl	8000eb8 <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_DCACHE2_Init+0x54>)
 8000650:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000654:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <MX_DCACHE2_Init+0x54>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_DCACHE2_Init+0x54>)
 8000660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 800066c:	f000 fff0 	bl	8001650 <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000e0 	.word	0x200000e0
 800067c:	40031800 	.word	0x40031800
 8000680:	46020c00 	.word	0x46020c00

08000684 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C2_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C2_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C2_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C2_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C2_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006c0:	f002 ff8a 	bl	80035d8 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 fbf5 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006d2:	f003 fb2b 	bl	8003d2c <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 fbec 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006e4:	f003 fb6d 	bl	8003dc2 <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 fbe3 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000010c 	.word	0x2000010c
 80006fc:	40005800 	.word	0x40005800
 8000700:	30909dec 	.word	0x30909dec

08000704 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000708:	f003 fba8 	bl	8003e5c <HAL_ICACHE_Enable>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000712:	f000 fbd1 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <MX_RTC_Init+0x98>)
 8000738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_RTC_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000742:	227f      	movs	r2, #127	@ 0x7f
 8000744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000748:	22ff      	movs	r2, #255	@ 0xff
 800074a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_RTC_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_RTC_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000764:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_RTC_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000772:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000774:	f006 f84e 	bl	8006814 <HAL_RTC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800077e:	f000 fb9b 	bl	8000eb8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_RTC_Init+0x94>)
 8000798:	f006 f96a 	bl	8006a70 <HAL_RTCEx_PrivilegeModeSet>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 fb89 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000160 	.word	0x20000160
 80007b4:	46007800 	.word	0x46007800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	@ 0x38
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4bbf      	ldr	r3, [pc, #764]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d4:	4abd      	ldr	r2, [pc, #756]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007de:	4bbb      	ldr	r3, [pc, #748]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e4:	f003 0302 	and.w	r3, r3, #2
 80007e8:	623b      	str	r3, [r7, #32]
 80007ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ec:	4bb7      	ldr	r3, [pc, #732]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f2:	4ab6      	ldr	r2, [pc, #728]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007fc:	4bb3      	ldr	r3, [pc, #716]	@ (8000acc <MX_GPIO_Init+0x314>)
 80007fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080a:	4bb0      	ldr	r3, [pc, #704]	@ (8000acc <MX_GPIO_Init+0x314>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000810:	4aae      	ldr	r2, [pc, #696]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000816:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800081a:	4bac      	ldr	r3, [pc, #688]	@ (8000acc <MX_GPIO_Init+0x314>)
 800081c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000828:	4ba8      	ldr	r3, [pc, #672]	@ (8000acc <MX_GPIO_Init+0x314>)
 800082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082e:	4aa7      	ldr	r2, [pc, #668]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000838:	4ba4      	ldr	r3, [pc, #656]	@ (8000acc <MX_GPIO_Init+0x314>)
 800083a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4ba1      	ldr	r3, [pc, #644]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084c:	4a9f      	ldr	r2, [pc, #636]	@ (8000acc <MX_GPIO_Init+0x314>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000856:	4b9d      	ldr	r3, [pc, #628]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000864:	4b99      	ldr	r3, [pc, #612]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086a:	4a98      	ldr	r2, [pc, #608]	@ (8000acc <MX_GPIO_Init+0x314>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000874:	4b95      	ldr	r3, [pc, #596]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b92      	ldr	r3, [pc, #584]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000888:	4a90      	ldr	r2, [pc, #576]	@ (8000acc <MX_GPIO_Init+0x314>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000892:	4b8e      	ldr	r3, [pc, #568]	@ (8000acc <MX_GPIO_Init+0x314>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a0:	4b8a      	ldr	r3, [pc, #552]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a6:	4a89      	ldr	r2, [pc, #548]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008b0:	4b86      	ldr	r3, [pc, #536]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008be:	4b83      	ldr	r3, [pc, #524]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c4:	4a81      	ldr	r2, [pc, #516]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ce:	4b7f      	ldr	r3, [pc, #508]	@ (8000acc <MX_GPIO_Init+0x314>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f24a 0108 	movw	r1, #40968	@ 0xa008
 80008e2:	487b      	ldr	r0, [pc, #492]	@ (8000ad0 <MX_GPIO_Init+0x318>)
 80008e4:	f002 fe60 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80008ee:	4879      	ldr	r0, [pc, #484]	@ (8000ad4 <MX_GPIO_Init+0x31c>)
 80008f0:	f002 fe5a 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|SWIRE_OUT_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	21d8      	movs	r1, #216	@ 0xd8
 80008f8:	4877      	ldr	r0, [pc, #476]	@ (8000ad8 <MX_GPIO_Init+0x320>)
 80008fa:	f002 fe55 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2107      	movs	r1, #7
 8000902:	4876      	ldr	r0, [pc, #472]	@ (8000adc <MX_GPIO_Init+0x324>)
 8000904:	f002 fe50 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2104      	movs	r1, #4
 800090c:	4874      	ldr	r0, [pc, #464]	@ (8000ae0 <MX_GPIO_Init+0x328>)
 800090e:	f002 fe4b 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2104      	movs	r1, #4
 8000916:	4873      	ldr	r0, [pc, #460]	@ (8000ae4 <MX_GPIO_Init+0x32c>)
 8000918:	f002 fe46 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 8000922:	4871      	ldr	r0, [pc, #452]	@ (8000ae8 <MX_GPIO_Init+0x330>)
 8000924:	f002 fe40 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000928:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092e:	2312      	movs	r3, #18
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093a:	2304      	movs	r3, #4
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	4869      	ldr	r0, [pc, #420]	@ (8000aec <MX_GPIO_Init+0x334>)
 8000946:	f002 fc57 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 800094a:	f24a 0308 	movw	r3, #40968	@ 0xa008
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	485b      	ldr	r0, [pc, #364]	@ (8000ad0 <MX_GPIO_Init+0x318>)
 8000964:	f002 fc48 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 8000968:	f244 0318 	movw	r3, #16408	@ 0x4018
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 800097a:	230c      	movs	r3, #12
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4859      	ldr	r0, [pc, #356]	@ (8000aec <MX_GPIO_Init+0x334>)
 8000986:	f002 fc37 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 800098a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	484c      	ldr	r0, [pc, #304]	@ (8000ad4 <MX_GPIO_Init+0x31c>)
 80009a4:	f002 fc28 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 80009a8:	f241 0302 	movw	r3, #4098	@ 0x1002
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	4b50      	ldr	r3, [pc, #320]	@ (8000af0 <MX_GPIO_Init+0x338>)
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4845      	ldr	r0, [pc, #276]	@ (8000ad4 <MX_GPIO_Init+0x31c>)
 80009be:	f002 fc1b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80009c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d4:	2307      	movs	r3, #7
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	483d      	ldr	r0, [pc, #244]	@ (8000ad4 <MX_GPIO_Init+0x31c>)
 80009e0:	f002 fc0a 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80009e4:	23c0      	movs	r3, #192	@ 0xc0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f0:	2302      	movs	r3, #2
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80009f4:	230b      	movs	r3, #11
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	483a      	ldr	r0, [pc, #232]	@ (8000ae8 <MX_GPIO_Init+0x330>)
 8000a00:	f002 fbfa 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8000a04:	2338      	movs	r3, #56	@ 0x38
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a14:	2307      	movs	r3, #7
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4832      	ldr	r0, [pc, #200]	@ (8000ae8 <MX_GPIO_Init+0x330>)
 8000a20:	f002 fbea 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8000a24:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a36:	230c      	movs	r3, #12
 8000a38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4828      	ldr	r0, [pc, #160]	@ (8000ae4 <MX_GPIO_Init+0x32c>)
 8000a42:	f002 fbd9 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|IMU_INT1_Pin|MAG_INT_Pin;
 8000a46:	f44f 7392 	mov.w	r3, #292	@ 0x124
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <MX_GPIO_Init+0x338>)
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <MX_GPIO_Init+0x320>)
 8000a5c:	f002 fbcc 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin SWIRE_OUT_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|SWIRE_OUT_Pin|AVDDEN_Pin|SD_EN_Pin;
 8000a60:	23d8      	movs	r3, #216	@ 0xd8
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <MX_GPIO_Init+0x320>)
 8000a78:	f002 fbbe 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = SWIRE_IN_Pin;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_IN_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <MX_GPIO_Init+0x320>)
 8000a90:	f002 fbb2 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	@ (8000aec <MX_GPIO_Init+0x334>)
 8000ab2:	f002 fba1 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e014      	b.n	8000af4 <MX_GPIO_Init+0x33c>
 8000aca:	bf00      	nop
 8000acc:	46020c00 	.word	0x46020c00
 8000ad0:	42021c00 	.word	0x42021c00
 8000ad4:	42021800 	.word	0x42021800
 8000ad8:	42021000 	.word	0x42021000
 8000adc:	42022000 	.word	0x42022000
 8000ae0:	42021400 	.word	0x42021400
 8000ae4:	42020800 	.word	0x42020800
 8000ae8:	42020c00 	.word	0x42020c00
 8000aec:	42020400 	.word	0x42020400
 8000af0:	10110000 	.word	0x10110000
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	48ba      	ldr	r0, [pc, #744]	@ (8000de8 <MX_GPIO_Init+0x630>)
 8000afe:	f002 fb7b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b02:	2304      	movs	r3, #4
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b12:	230c      	movs	r3, #12
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	48b3      	ldr	r0, [pc, #716]	@ (8000dec <MX_GPIO_Init+0x634>)
 8000b1e:	f002 fb6b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	48aa      	ldr	r0, [pc, #680]	@ (8000de8 <MX_GPIO_Init+0x630>)
 8000b3e:	f002 fb5b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b54:	2303      	movs	r3, #3
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	48a4      	ldr	r0, [pc, #656]	@ (8000df0 <MX_GPIO_Init+0x638>)
 8000b60:	f002 fb4a 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000b64:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	489c      	ldr	r0, [pc, #624]	@ (8000df0 <MX_GPIO_Init+0x638>)
 8000b7e:	f002 fb3b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b82:	2303      	movs	r3, #3
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8000b92:	2304      	movs	r3, #4
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4893      	ldr	r0, [pc, #588]	@ (8000dec <MX_GPIO_Init+0x634>)
 8000b9e:	f002 fb2b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	488c      	ldr	r0, [pc, #560]	@ (8000df0 <MX_GPIO_Init+0x638>)
 8000bc0:	f002 fb1a 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8000bc4:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	4b8a      	ldr	r3, [pc, #552]	@ (8000df4 <MX_GPIO_Init+0x63c>)
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4887      	ldr	r0, [pc, #540]	@ (8000df8 <MX_GPIO_Init+0x640>)
 8000bda:	f002 fb0d 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bde:	2303      	movs	r3, #3
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4880      	ldr	r0, [pc, #512]	@ (8000dfc <MX_GPIO_Init+0x644>)
 8000bfa:	f002 fafd 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	487a      	ldr	r0, [pc, #488]	@ (8000e00 <MX_GPIO_Init+0x648>)
 8000c16:	f002 faef 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	4b75      	ldr	r3, [pc, #468]	@ (8000df4 <MX_GPIO_Init+0x63c>)
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4874      	ldr	r0, [pc, #464]	@ (8000e00 <MX_GPIO_Init+0x648>)
 8000c2e:	f002 fae3 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8000c32:	2304      	movs	r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	486c      	ldr	r0, [pc, #432]	@ (8000dfc <MX_GPIO_Init+0x644>)
 8000c4a:	f002 fad5 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4864      	ldr	r0, [pc, #400]	@ (8000df8 <MX_GPIO_Init+0x640>)
 8000c66:	f002 fac7 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 8000c6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	4b60      	ldr	r3, [pc, #384]	@ (8000df4 <MX_GPIO_Init+0x63c>)
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4861      	ldr	r0, [pc, #388]	@ (8000e04 <MX_GPIO_Init+0x64c>)
 8000c80:	f002 faba 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c84:	2303      	movs	r3, #3
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c94:	2308      	movs	r3, #8
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4854      	ldr	r0, [pc, #336]	@ (8000df0 <MX_GPIO_Init+0x638>)
 8000ca0:	f002 faaa 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000ca4:	f240 4304 	movw	r3, #1028	@ 0x404
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4849      	ldr	r0, [pc, #292]	@ (8000de8 <MX_GPIO_Init+0x630>)
 8000cc2:	f002 fa99 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8000cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ccc:	2311      	movs	r3, #17
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4843      	ldr	r0, [pc, #268]	@ (8000dec <MX_GPIO_Init+0x634>)
 8000ce0:	f002 fa8a 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8000ce4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4840      	ldr	r0, [pc, #256]	@ (8000e04 <MX_GPIO_Init+0x64c>)
 8000d02:	f002 fa79 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4831      	ldr	r0, [pc, #196]	@ (8000de8 <MX_GPIO_Init+0x630>)
 8000d22:	f002 fa69 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4831      	ldr	r0, [pc, #196]	@ (8000e08 <MX_GPIO_Init+0x650>)
 8000d44:	f002 fa58 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 8000d48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4828      	ldr	r0, [pc, #160]	@ (8000e08 <MX_GPIO_Init+0x650>)
 8000d66:	f002 fa47 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	481c      	ldr	r0, [pc, #112]	@ (8000df8 <MX_GPIO_Init+0x640>)
 8000d86:	f002 fa37 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8000d8a:	23e0      	movs	r3, #224	@ 0xe0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <MX_GPIO_Init+0x638>)
 8000da6:	f002 fa27 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8000daa:	2301      	movs	r3, #1
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <MX_GPIO_Init+0x654>)
 8000dbe:	f002 fa1b 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000dc2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_GPIO_Init+0x634>)
 8000de0:	f002 fa0a 	bl	80031f8 <HAL_GPIO_Init>
 8000de4:	e014      	b.n	8000e10 <MX_GPIO_Init+0x658>
 8000de6:	bf00      	nop
 8000de8:	42020400 	.word	0x42020400
 8000dec:	42020c00 	.word	0x42020c00
 8000df0:	42020000 	.word	0x42020000
 8000df4:	10110000 	.word	0x10110000
 8000df8:	42020800 	.word	0x42020800
 8000dfc:	42021400 	.word	0x42021400
 8000e00:	42022000 	.word	0x42022000
 8000e04:	42021c00 	.word	0x42021c00
 8000e08:	42021000 	.word	0x42021000
 8000e0c:	42021800 	.word	0x42021800

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8000e10:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_GPIO_Init+0x6cc>)
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <MX_GPIO_Init+0x6d0>)
 8000e26:	f002 f9e7 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <MX_GPIO_Init+0x6d4>)
 8000e3e:	f002 f9db 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 8000e42:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <MX_GPIO_Init+0x6d0>)
 8000e5c:	f002 f9cc 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <MX_GPIO_Init+0x6cc>)
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4806      	ldr	r0, [pc, #24]	@ (8000e90 <MX_GPIO_Init+0x6d8>)
 8000e76:	f002 f9bf 	bl	80031f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3738      	adds	r7, #56	@ 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	10110000 	.word	0x10110000
 8000e88:	42020c00 	.word	0x42020c00
 8000e8c:	42020000 	.word	0x42020000
 8000e90:	42020400 	.word	0x42020400

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea6:	f000 fb43 	bl	8001530 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_MspInit+0x60>)
 8000ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_MspInit+0x60>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_MspInit+0x60>)
 8000edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ee8:	f003 f8d4 	bl	8004094 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_MspInit+0x60>)
 8000eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <HAL_MspInit+0x60>)
 8000ef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ef8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_MspInit+0x60>)
 8000efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 fb54 	bl	80015b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000f10:	f000 fb7a 	bl	8001608 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 fb63 	bl	80015e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	46020c00 	.word	0x46020c00

08000f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0c4      	sub	sp, #272	@ 0x110
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	22e0      	movs	r2, #224	@ 0xe0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 f981 	bl	8007258 <memset>
  if(hadc->Instance==ADC1)
 8000f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_ADC_MspInit+0x178>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f040 8095 	bne.w	8001094 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000f76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fb7e 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_ADC_MspInit+0x6a>
    {
      Error_Handler();
 8000f8e:	f7ff ff93 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f92:	4b44      	ldr	r3, [pc, #272]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f98:	4a42      	ldr	r2, [pc, #264]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa2:	4b40      	ldr	r3, [pc, #256]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc0:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc6:	f003 0204 	and.w	r2, r3, #4
 8000fca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fdc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800100a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 800100e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001012:	4a24      	ldr	r2, [pc, #144]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800101c:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_ADC_MspInit+0x17c>)
 800101e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001022:	f003 0202 	and.w	r2, r3, #2
 8001026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800102a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001038:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001050:	4619      	mov	r1, r3
 8001052:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <HAL_ADC_MspInit+0x180>)
 8001054:	f002 f8d0 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8001058:	2318      	movs	r3, #24
 800105a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800106e:	4619      	mov	r1, r3
 8001070:	480e      	ldr	r0, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x184>)
 8001072:	f002 f8c1 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800108c:	4619      	mov	r1, r3
 800108e:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <HAL_ADC_MspInit+0x188>)
 8001090:	f002 f8b2 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	42028000 	.word	0x42028000
 80010a4:	46020c00 	.word	0x46020c00
 80010a8:	42020800 	.word	0x42020800
 80010ac:	42020000 	.word	0x42020000
 80010b0:	42020400 	.word	0x42020400

080010b4 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a16      	ldr	r2, [pc, #88]	@ (800111c <HAL_DCACHE_MspInit+0x68>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10f      	bne.n	80010e6 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 80010c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010cc:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 80010ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 80010d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 80010e4:	e013      	b.n	800110e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_DCACHE_MspInit+0x70>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d10e      	bne.n	800110e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_DCACHE_MspInit+0x6c>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40031400 	.word	0x40031400
 8001120:	46020c00 	.word	0x46020c00
 8001124:	40031800 	.word	0x40031800

08001128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0c2      	sub	sp, #264	@ 0x108
 800112c:	af00      	add	r7, sp, #0
 800112e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001136:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	22e0      	movs	r2, #224	@ 0xe0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f006 f881 	bl	8007258 <memset>
  if(hi2c->Instance==I2C2)
 8001156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800115a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <HAL_I2C_MspInit+0xe8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d14e      	bne.n	8001206 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001168:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fa80 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800118a:	f7ff fe95 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 8001190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 80011a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011ac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c6:	2304      	movs	r3, #4
 80011c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <HAL_I2C_MspInit+0xf0>)
 80011d4:	f002 f810 	bl	80031f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 80011da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011de:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_I2C_MspInit+0xec>)
 80011ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011ee:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80011f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001200:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001204:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005800 	.word	0x40005800
 8001214:	46020c00 	.word	0x46020c00
 8001218:	42020400 	.word	0x42020400

0800121c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0bc      	sub	sp, #240	@ 0xf0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22e0      	movs	r2, #224	@ 0xe0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 f813 	bl	8007258 <memset>
  if(hrtc->Instance==RTC)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_RTC_MspInit+0x90>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d132      	bne.n	80012a2 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800123c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fa15 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001260:	f7ff fe2a 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 8001266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800126a:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 800126c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001270:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 8001276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800127a:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001280:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 8001286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800128a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <HAL_RTC_MspInit+0x94>)
 800129a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800129e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	37f0      	adds	r7, #240	@ 0xf0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	46007800 	.word	0x46007800
 80012b0:	46020c00 	.word	0x46020c00

080012b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <HAL_InitTick+0xcc>)
 80012c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001380 <HAL_InitTick+0xcc>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <HAL_InitTick+0xcc>)
 80012d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 f8df 	bl	80054b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f2:	f004 f8c9 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80012f6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_InitTick+0xd0>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3b01      	subs	r3, #1
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_InitTick+0xd4>)
 8001308:	4a20      	ldr	r2, [pc, #128]	@ (800138c <HAL_InitTick+0xd8>)
 800130a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <HAL_InitTick+0xd4>)
 800130e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001314:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <HAL_InitTick+0xd4>)
 8001316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001318:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_InitTick+0xd4>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_InitTick+0xd4>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001326:	4818      	ldr	r0, [pc, #96]	@ (8001388 <HAL_InitTick+0xd4>)
 8001328:	f005 fbd0 	bl	8006acc <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001332:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800133a:	4813      	ldr	r0, [pc, #76]	@ (8001388 <HAL_InitTick+0xd4>)
 800133c:	f005 fc28 	bl	8006b90 <HAL_TIM_Base_Start_IT>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001346:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10e      	bne.n	800136c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d808      	bhi.n	8001366 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	2031      	movs	r0, #49	@ 0x31
 800135a:	f001 fe21 	bl	8002fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135e:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <HAL_InitTick+0xdc>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e002      	b.n	800136c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800136c:	2031      	movs	r0, #49	@ 0x31
 800136e:	f001 fe31 	bl	8002fd4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001372:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001376:	4618      	mov	r0, r3
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	46020c00 	.word	0x46020c00
 8001384:	431bde83 	.word	0x431bde83
 8001388:	20000190 	.word	0x20000190
 800138c:	40001000 	.word	0x40001000
 8001390:	20000004 	.word	0x20000004

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001398:	f004 f8d2 	bl	8005540 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x8>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <TIM6_IRQHandler+0x10>)
 80013fe:	f005 fc67 	bl	8006cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000190 	.word	0x20000190

0800140c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <SystemInit+0x68>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <SystemInit+0x68>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <SystemInit+0x6c>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <SystemInit+0x6c>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <SystemInit+0x6c>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <SystemInit+0x6c>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <SystemInit+0x6c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <SystemInit+0x6c>)
 800143e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001442:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <SystemInit+0x6c>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <SystemInit+0x6c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <SystemInit+0x6c>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <SystemInit+0x6c>)
 800145c:	2200      	movs	r2, #0
 800145e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <SystemInit+0x68>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001466:	609a      	str	r2, [r3, #8]
  #endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	46020c00 	.word	0x46020c00

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001480:	f7ff ffc4 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001484:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001486:	e003      	b.n	8001490 <LoopCopyDataInit>

08001488 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800148a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800148c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800148e:	3104      	adds	r1, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001490:	480a      	ldr	r0, [pc, #40]	@ (80014bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001494:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001496:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001498:	d3f6      	bcc.n	8001488 <CopyDataInit>
	ldr	r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800149c:	e002      	b.n	80014a4 <LoopFillZerobss>

0800149e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800149e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014a0:	f842 3b04 	str.w	r3, [r2], #4

080014a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <LoopForever+0x16>)
	cmp	r2, r3
 80014a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014a8:	d3f9      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f005 fedd 	bl	8007268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7fe ff81 	bl	80003b4 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80014b4:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80014b8:	080073a8 	.word	0x080073a8
	ldr	r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014c0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80014c4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80014c8:	200001e0 	.word	0x200001e0

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_Init+0x50>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_Init+0x50>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f001 fd52 	bl	8002f8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80014e6:	f003 feb3 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 80014ea:	4602      	mov	r2, r0
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <HAL_Init+0x54>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <HAL_Init+0x58>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_Init+0x5c>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001500:	2004      	movs	r0, #4
 8001502:	f001 fd75 	bl	8002ff0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001506:	200f      	movs	r0, #15
 8001508:	f7ff fed4 	bl	80012b4 <HAL_InitTick>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e002      	b.n	800151c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001516:	f7ff fcd5 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40022000 	.word	0x40022000
 8001524:	46020c00 	.word	0x46020c00
 8001528:	080072c8 	.word	0x080072c8
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008
 8001554:	200001dc 	.word	0x200001dc

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200001dc 	.word	0x200001dc

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008

080015b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80015c8:	4904      	ldr	r1, [pc, #16]	@ (80015dc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	46007400 	.word	0x46007400

080015e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0202 	bic.w	r2, r3, #2
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	46007400 	.word	0x46007400

08001608 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800161a:	f7ff ff9d 	bl	8001558 <HAL_GetTick>
 800161e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001620:	e008      	b.n	8001634 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001622:	f7ff ff99 	bl	8001558 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d901      	bls.n	8001634 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	46007400 	.word	0x46007400

08001650 <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6053      	str	r3, [r2, #4]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	46000400 	.word	0x46000400

08001670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LL_ADC_SetResolution+0x3c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d104      	bne.n	80016f8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f023 020c 	bic.w	r2, r3, #12
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	46021000 	.word	0x46021000

08001718 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3360      	adds	r3, #96	@ 0x60
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	430b      	orrs	r3, r1
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3360      	adds	r3, #96	@ 0x60
 8001768:	461a      	mov	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001786:	b480      	push	{r7}
 8001788:	b087      	sub	sp, #28
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3360      	adds	r3, #96	@ 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3360      	adds	r3, #96	@ 0x60
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	@ 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001836:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800183a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	2a00      	cmp	r2, #0
 8001852:	d002      	beq.n	800185a <LL_ADC_SetGainCompensation+0x32>
 8001854:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001858:	e000      	b.n	800185c <LL_ADC_SetGainCompensation+0x34>
 800185a:	2200      	movs	r2, #0
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2107      	movs	r1, #7
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d020      	beq.n	8001902 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3330      	adds	r3, #48	@ 0x30
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	4413      	add	r3, r2
 80018d2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	211f      	movs	r1, #31
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 011f 	and.w	r1, r3, #31
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001900:	e02b      	b.n	800195a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	210f      	movs	r1, #15
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d104      	bne.n	800192a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	e010      	b.n	800194c <LL_ADC_REG_SetSequencerRanks+0xa0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	613b      	str	r3, [r7, #16]
  return result;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8001940:	2320      	movs	r3, #32
 8001942:	e003      	b.n	800194c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	f001 011f 	and.w	r1, r1, #31
 8001952:	408b      	lsls	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800195a:	bf00      	nop
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	46021000 	.word	0x46021000

0800196c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	0e9b      	lsrs	r3, r3, #26
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	2201      	movs	r2, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	e015      	b.n	80019bc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	60fb      	str	r3, [r7, #12]
  return result;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e003      	b.n	80019b2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2201      	movs	r2, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	0e9b      	lsrs	r3, r3, #26
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	@ 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d042      	beq.n	8001a9e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d104      	bne.n	8001a2c <LL_ADC_SetChannelSamplingTime+0x28>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	f003 021f 	and.w	r2, r3, #31
 8001a2a:	e011      	b.n	8001a50 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	617b      	str	r3, [r7, #20]
  return result;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0e5b      	lsrs	r3, r3, #25
 8001a54:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	1ad2      	subs	r2, r2, r3
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3314      	adds	r3, #20
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0e5b      	lsrs	r3, r3, #25
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2107      	movs	r1, #7
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	431a      	orrs	r2, r3
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001a9c:	e00e      	b.n	8001abc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	0219      	lsls	r1, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	615a      	str	r2, [r3, #20]
}
 8001abc:	bf00      	nop
 8001abe:	372c      	adds	r7, #44	@ 0x2c
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	46021000 	.word	0x46021000

08001acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0318 	and.w	r3, r3, #24
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	400b      	ands	r3, r1
 8001af6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	000fffff 	.word	0x000fffff

08001b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6093      	str	r3, [r2, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b4c:	d101      	bne.n	8001b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b9c:	d101      	bne.n	8001ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <LL_ADC_IsEnabled+0x18>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <LL_ADC_IsEnabled+0x1a>
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d101      	bne.n	8001bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d101      	bne.n	8001c14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08b      	sub	sp, #44	@ 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e2ce      	b.n	80021e2 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a95      	ldr	r2, [pc, #596]	@ (8001ea8 <HAL_ADC_Init+0x284>)
 8001c52:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff f963 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5f 	bl	8001b38 <LL_ADC_IsDeepPowerDownEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff45 	bl	8001b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff7a 	bl	8001b88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff5e 	bl	8001b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca4:	4b81      	ldr	r3, [pc, #516]	@ (8001eac <HAL_ADC_Init+0x288>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	4a81      	ldr	r2, [pc, #516]	@ (8001eb0 <HAL_ADC_Init+0x28c>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff5c 	bl	8001b88 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff6c 	bl	8001bd6 <LL_ADC_REG_IsConversionOngoing>
 8001cfe:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 825f 	bne.w	80021cc <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 825b 	bne.w	80021cc <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d1a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff40 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d14f      	bne.n	8001dd6 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <HAL_ADC_Init+0x284>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d037      	beq.n	8001db0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_ADC_Init+0x290>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_Init+0x130>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb8 <HAL_ADC_Init+0x294>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d10e      	bne.n	8001d72 <HAL_ADC_Init+0x14e>
 8001d54:	4857      	ldr	r0, [pc, #348]	@ (8001eb4 <HAL_ADC_Init+0x290>)
 8001d56:	f7ff ff2b 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4856      	ldr	r0, [pc, #344]	@ (8001eb8 <HAL_ADC_Init+0x294>)
 8001d5e:	f7ff ff27 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4323      	orrs	r3, r4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	e008      	b.n	8001d84 <HAL_ADC_Init+0x160>
 8001d72:	484d      	ldr	r0, [pc, #308]	@ (8001ea8 <HAL_ADC_Init+0x284>)
 8001d74:	f7ff ff1c 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d026      	beq.n	8001dd6 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	@ (8001eb4 <HAL_ADC_Init+0x290>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_Init+0x178>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_ADC_Init+0x294>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_Init+0x17c>
 8001d9c:	4a47      	ldr	r2, [pc, #284]	@ (8001ebc <HAL_ADC_Init+0x298>)
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_Init+0x17e>
 8001da0:	4a47      	ldr	r2, [pc, #284]	@ (8001ec0 <HAL_ADC_Init+0x29c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7ff fc61 	bl	8001670 <LL_ADC_SetCommonClock>
 8001dae:	e012      	b.n	8001dd6 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7ff fc8c 	bl	80016d8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <HAL_ADC_Init+0x29c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001dd0:	493b      	ldr	r1, [pc, #236]	@ (8001ec0 <HAL_ADC_Init+0x29c>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <HAL_ADC_Init+0x284>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d010      	beq.n	8001e02 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001de6:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001dec:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001df2:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001dfa:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	e035      	b.n	8001e6e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7f1b      	ldrb	r3, [r3, #28]
 8001e06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e10:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_ADC_Init+0x1fc>
 8001e1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Init+0x1fe>
 8001e20:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e22:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e28:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da04      	bge.n	8001e3c <HAL_ADC_Init+0x218>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x21c>
 8001e3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001e40:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	491b      	ldr	r1, [pc, #108]	@ (8001eb4 <HAL_ADC_Init+0x290>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x232>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4919      	ldr	r1, [pc, #100]	@ (8001eb8 <HAL_ADC_Init+0x294>)
 8001e52:	428b      	cmp	r3, r1
 8001e54:	d103      	bne.n	8001e5e <HAL_ADC_Init+0x23a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_Init+0x242>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e64:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001e66:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e68:	6a3a      	ldr	r2, [r7, #32]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d131      	bne.n	8001edc <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_ADC_Init+0x284>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	3b01      	subs	r3, #1
 8001e88:	045b      	lsls	r3, r3, #17
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	e024      	b.n	8001edc <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d113      	bne.n	8001ec4 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	e01a      	b.n	8001edc <HAL_ADC_Init+0x2b8>
 8001ea6:	bf00      	nop
 8001ea8:	46021000 	.word	0x46021000
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	053e2d63 	.word	0x053e2d63
 8001eb4:	42028000 	.word	0x42028000
 8001eb8:	42028100 	.word	0x42028100
 8001ebc:	42028300 	.word	0x42028300
 8001ec0:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a75      	ldr	r2, [pc, #468]	@ (80020b8 <HAL_ADC_Init+0x494>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	4313      	orrs	r3, r2
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b6c      	ldr	r3, [pc, #432]	@ (80020bc <HAL_ADC_Init+0x498>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	430b      	orrs	r3, r1
 8001f14:	60d3      	str	r3, [r2, #12]
 8001f16:	e031      	b.n	8001f7c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f24:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	6a3a      	ldr	r2, [r7, #32]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <HAL_ADC_Init+0x49c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	6a39      	ldr	r1, [r7, #32]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4d      	ldr	r2, [pc, #308]	@ (80020b8 <HAL_ADC_Init+0x494>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f000 80a4 	beq.w	80020d0 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fe22 	bl	8001bd6 <LL_ADC_REG_IsConversionOngoing>
 8001f92:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe2f 	bl	8001bfc <LL_ADC_INJ_IsConversionOngoing>
 8001f9e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d166      	bne.n	8002074 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d163      	bne.n	8002074 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7f1b      	ldrb	r3, [r3, #28]
 8001fb0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4943      	ldr	r1, [pc, #268]	@ (80020c4 <HAL_ADC_Init+0x4a0>)
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_Init+0x3a2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4941      	ldr	r1, [pc, #260]	@ (80020c8 <HAL_ADC_Init+0x4a4>)
 8001fc2:	428b      	cmp	r3, r1
 8001fc4:	d102      	bne.n	8001fcc <HAL_ADC_Init+0x3a8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	e002      	b.n	8001fd2 <HAL_ADC_Init+0x3ae>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fe0:	f023 0303 	bic.w	r3, r3, #3
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	430b      	orrs	r3, r1
 8001fec:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f7ff fc11 	bl	8001828 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11e      	bne.n	800204e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_ADC_Init+0x4a8>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002024:	0411      	lsls	r1, r2, #16
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800203c:	0892      	lsrs	r2, r2, #2
 800203e:	430a      	orrs	r2, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	e007      	b.n	800205e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10c      	bne.n	8002096 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f023 010f 	bic.w	r1, r3, #15
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
 8002094:	e007      	b.n	80020a6 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 020f 	bic.w	r2, r2, #15
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020b6:	e092      	b.n	80021de <HAL_ADC_Init+0x5ba>
 80020b8:	46021000 	.word	0x46021000
 80020bc:	fff0c013 	.word	0xfff0c013
 80020c0:	ffde800d 	.word	0xffde800d
 80020c4:	42028000 	.word	0x42028000
 80020c8:	42028100 	.word	0x42028100
 80020cc:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d111      	bne.n	80020fe <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80020e2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80020e8:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80020ee:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <HAL_ADC_Init+0x5c8>)
 8002106:	4013      	ands	r3, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	69f9      	ldr	r1, [r7, #28]
 800210e:	430b      	orrs	r3, r1
 8002110:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	461a      	mov	r2, r3
 800211c:	2100      	movs	r1, #0
 800211e:	f7ff fba6 	bl	800186e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	461a      	mov	r2, r3
 800212c:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002130:	f7ff fb9d 	bl	800186e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f062 020f 	orn	r2, r2, #15
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
 800214c:	e018      	b.n	8002180 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002156:	d113      	bne.n	8002180 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	3b01      	subs	r3, #1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f003 031c 	and.w	r3, r3, #28
 800216a:	f06f 020f 	mvn.w	r2, #15
 800216e:	fa02 f103 	lsl.w	r1, r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_ADC_Init+0x5cc>)
 8002188:	4013      	ands	r3, r2
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	429a      	cmp	r2, r3
 800218e:	d10b      	bne.n	80021a8 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021a6:	e01a      	b.n	80021de <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ac:	f023 0312 	bic.w	r3, r3, #18
 80021b0:	f043 0210 	orr.w	r2, r3, #16
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021ca:	e008      	b.n	80021de <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80021de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	372c      	adds	r7, #44	@ 0x2c
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	f7fffc02 	.word	0xf7fffc02
 80021f0:	833ffff3 	.word	0x833ffff3

080021f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b0b7      	sub	sp, #220	@ 0xdc
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4aa8      	ldr	r2, [pc, #672]	@ (80024b0 <HAL_ADC_ConfigChannel+0x2bc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d103      	bne.n	800221a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002220:	2b01      	cmp	r3, #1
 8002222:	d102      	bne.n	800222a <HAL_ADC_ConfigChannel+0x36>
 8002224:	2302      	movs	r3, #2
 8002226:	f000 bdfe 	b.w	8002e26 <HAL_ADC_ConfigChannel+0xc32>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fccd 	bl	8001bd6 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 85c1 	bne.w	8002dc6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a99      	ldr	r2, [pc, #612]	@ (80024b0 <HAL_ADC_ConfigChannel+0x2bc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f000 8409 	beq.w	8002a62 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <HAL_ADC_ConfigChannel+0x7a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	e01d      	b.n	80022aa <HAL_ADC_ConfigChannel+0xb6>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002282:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002286:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800228a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e004      	b.n	80022a0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2201      	movs	r2, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	69d1      	ldr	r1, [r2, #28]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f7ff faf1 	bl	80018ac <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fc81 	bl	8001bd6 <LL_ADC_REG_IsConversionOngoing>
 80022d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fc8d 	bl	8001bfc <LL_ADC_INJ_IsConversionOngoing>
 80022e2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 81df 	bne.w	80026ae <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 81da 	bne.w	80026ae <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	461a      	mov	r2, r3
 8002308:	f7ff fb7c 	bl	8001a04 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b04      	cmp	r3, #4
 800232c:	d046      	beq.n	80023bc <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233e:	f7ff f9eb 	bl	8001718 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6919      	ldr	r1, [r3, #16]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	461a      	mov	r2, r3
 8002350:	f7ff fa19 	bl	8001786 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7e9b      	ldrb	r3, [r3, #26]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d11e      	bne.n	800239a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x17e>
 800236c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002370:	e000      	b.n	8002374 <HAL_ADC_ConfigChannel+0x180>
 8002372:	2300      	movs	r3, #0
 8002374:	461a      	mov	r2, r3
 8002376:	f7ff fa3c 	bl	80017f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x19c>
 800238a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800238e:	e000      	b.n	8002392 <HAL_ADC_ConfigChannel+0x19e>
 8002390:	2300      	movs	r3, #0
 8002392:	461a      	mov	r2, r3
 8002394:	f7ff fa12 	bl	80017bc <LL_ADC_SetOffsetSignedSaturation>
 8002398:	e189      	b.n	80026ae <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2200      	movs	r2, #0
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7ff fa24 	bl	80017f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7ff fa01 	bl	80017bc <LL_ADC_SetOffsetSignedSaturation>
 80023ba:	e178      	b.n	80026ae <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9c9 	bl	800175a <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1f4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f9be 	bl	800175a <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	e01e      	b.n	8002426 <HAL_ADC_ConfigChannel+0x232>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f9b3 	bl	800175a <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800240e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e004      	b.n	8002424 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800241a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_ConfigChannel+0x24a>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	e018      	b.n	8002470 <HAL_ADC_ConfigChannel+0x27c>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800245a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002462:	2320      	movs	r3, #32
 8002464:	e004      	b.n	8002470 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	2100      	movs	r1, #0
 8002480:	f7ff f94a 	bl	8001718 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f965 	bl	800175a <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x2c0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff f95a 	bl	800175a <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 021f 	and.w	r2, r3, #31
 80024ae:	e020      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x2fe>
 80024b0:	46021000 	.word	0x46021000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f94d 	bl	800175a <LL_ADC_GetOffsetChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80024e2:	2320      	movs	r3, #32
 80024e4:	e004      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80024e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_ADC_ConfigChannel+0x316>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	e018      	b.n	800253c <HAL_ADC_ConfigChannel+0x348>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800251e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e004      	b.n	800253c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2300      	movs	r3, #0
 800254a:	2101      	movs	r1, #1
 800254c:	f7ff f8e4 	bl	8001718 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f8ff 	bl	800175a <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10a      	bne.n	800257c <HAL_ADC_ConfigChannel+0x388>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f8f4 	bl	800175a <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	f003 021f 	and.w	r2, r3, #31
 800257a:	e01a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x3be>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f8e9 	bl	800175a <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002596:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e004      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80025a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x3d6>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	e011      	b.n	80025ee <HAL_ADC_ConfigChannel+0x3fa>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d107      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2102      	movs	r1, #2
 80025fe:	f7ff f88b 	bl	8001718 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f8a6 	bl	800175a <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_ADC_ConfigChannel+0x43a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2103      	movs	r1, #3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f89b 	bl	800175a <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	e017      	b.n	800265e <HAL_ADC_ConfigChannel+0x46a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2103      	movs	r1, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f890 	bl	800175a <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800264a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8002654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x482>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	e011      	b.n	800269a <HAL_ADC_ConfigChannel+0x4a6>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8002692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269a:	429a      	cmp	r2, r3
 800269c:	d107      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2103      	movs	r1, #3
 80026aa:	f7ff f835 	bl	8001718 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa7c 	bl	8001bb0 <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 83ad 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f7ff f9fd 	bl	8001acc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026da:	f040 80d6 	bne.w	800288a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x50e>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	bf94      	ite	ls
 80026fa:	2301      	movls	r3, #1
 80026fc:	2300      	movhi	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e019      	b.n	8002736 <HAL_ADC_ConfigChannel+0x542>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002712:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800271e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b09      	cmp	r3, #9
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d04d      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x5e2>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x562>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002754:	e015      	b.n	8002782 <HAL_ADC_ConfigChannel+0x58e>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002766:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	e017      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x5de>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	e04e      	b.n	8002874 <HAL_ADC_ConfigChannel+0x680>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x5fe>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	069b      	lsls	r3, r3, #26
 80027ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027f0:	e015      	b.n	800281e <HAL_ADC_ConfigChannel+0x62a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_ADC_ConfigChannel+0x64a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	e017      	b.n	800286e <HAL_ADC_ConfigChannel+0x67a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	61bb      	str	r3, [r7, #24]
  return result;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	461a      	mov	r2, r3
 8002882:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002886:	f7ff f8bd 	bl	8001a04 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f280 82c3 	bge.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a92      	ldr	r2, [pc, #584]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x6b4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a91      	ldr	r2, [pc, #580]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x6b8>
 80028a8:	4b90      	ldr	r3, [pc, #576]	@ (8002aec <HAL_ADC_ConfigChannel+0x8f8>)
 80028aa:	e000      	b.n	80028ae <HAL_ADC_ConfigChannel+0x6ba>
 80028ac:	4b90      	ldr	r3, [pc, #576]	@ (8002af0 <HAL_ADC_ConfigChannel+0x8fc>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe ff04 	bl	80016bc <LL_ADC_GetCommonPathInternalCh>
 80028b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a89      	ldr	r2, [pc, #548]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x6d8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a88      	ldr	r2, [pc, #544]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d10e      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x6f6>
 80028cc:	4885      	ldr	r0, [pc, #532]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 80028ce:	f7ff f96f 	bl	8001bb0 <LL_ADC_IsEnabled>
 80028d2:	4604      	mov	r4, r0
 80028d4:	4884      	ldr	r0, [pc, #528]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 80028d6:	f7ff f96b 	bl	8001bb0 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	4323      	orrs	r3, r4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e008      	b.n	80028fc <HAL_ADC_ConfigChannel+0x708>
 80028ea:	4882      	ldr	r0, [pc, #520]	@ (8002af4 <HAL_ADC_ConfigChannel+0x900>)
 80028ec:	f7ff f960 	bl	8001bb0 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a6 	beq.w	8002a4e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7c      	ldr	r2, [pc, #496]	@ (8002af8 <HAL_ADC_ConfigChannel+0x904>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d13c      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800290c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d136      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a71      	ldr	r2, [pc, #452]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00a      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x744>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a70      	ldr	r2, [pc, #448]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d005      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x744>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a70      	ldr	r2, [pc, #448]	@ (8002af4 <HAL_ADC_ConfigChannel+0x900>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f040 826e 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a69      	ldr	r2, [pc, #420]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_ADC_ConfigChannel+0x758>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a68      	ldr	r2, [pc, #416]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x75c>
 800294c:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_ADC_ConfigChannel+0x8f8>)
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x75e>
 8002950:	4a67      	ldr	r2, [pc, #412]	@ (8002af0 <HAL_ADC_ConfigChannel+0x8fc>)
 8002952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002956:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7fe fe9a 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002962:	4b66      	ldr	r3, [pc, #408]	@ (8002afc <HAL_ADC_ConfigChannel+0x908>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	4a65      	ldr	r2, [pc, #404]	@ (8002b00 <HAL_ADC_ConfigChannel+0x90c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	3301      	adds	r3, #1
 8002972:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002974:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002976:	e002      	b.n	800297e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3b01      	subs	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002984:	e246      	b.n	8002e14 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b04 <HAL_ADC_ConfigChannel+0x910>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d12b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002998:	2b00      	cmp	r3, #0
 800299a:	d125      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a50      	ldr	r2, [pc, #320]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00a      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x7c8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d005      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x7c8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a4f      	ldr	r2, [pc, #316]	@ (8002af4 <HAL_ADC_ConfigChannel+0x900>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	f040 822e 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a48      	ldr	r2, [pc, #288]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x7dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a47      	ldr	r2, [pc, #284]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x7e0>
 80029d0:	4a46      	ldr	r2, [pc, #280]	@ (8002aec <HAL_ADC_ConfigChannel+0x8f8>)
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x7e2>
 80029d4:	4a46      	ldr	r2, [pc, #280]	@ (8002af0 <HAL_ADC_ConfigChannel+0x8fc>)
 80029d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f7fe fe58 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e6:	e217      	b.n	8002e18 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a46      	ldr	r2, [pc, #280]	@ (8002b08 <HAL_ADC_ConfigChannel+0x914>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 8213 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 820c 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a37      	ldr	r2, [pc, #220]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00a      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x82e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a35      	ldr	r2, [pc, #212]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d005      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x82e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a36      	ldr	r2, [pc, #216]	@ (8002af4 <HAL_ADC_ConfigChannel+0x900>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	f040 81fc 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x842>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x846>
 8002a36:	4a2d      	ldr	r2, [pc, #180]	@ (8002aec <HAL_ADC_ConfigChannel+0x8f8>)
 8002a38:	e000      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x848>
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_ADC_ConfigChannel+0x8fc>)
 8002a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f7fe fe25 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 8002a4c:	e1e5      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a60:	e1db      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	f000 811b 	beq.w	8002caa <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a7c:	d004      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002a82:	4a22      	ldr	r2, [pc, #136]	@ (8002b0c <HAL_ADC_ConfigChannel+0x918>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe ff6b 	bl	800196c <LL_ADC_REG_SetSequencerChAdd>
 8002a96:	e059      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ab4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x8d4>
 8002abc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	e027      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x924>
 8002ac8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002acc:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d117      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e019      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x924>
 8002ae4:	42028000 	.word	0x42028000
 8002ae8:	42028100 	.word	0x42028100
 8002aec:	42028300 	.word	0x42028300
 8002af0:	46021300 	.word	0x46021300
 8002af4:	46021000 	.word	0x46021000
 8002af8:	ce080000 	.word	0xce080000
 8002afc:	20000000 	.word	0x20000000
 8002b00:	053e2d63 	.word	0x053e2d63
 8002b04:	ca040000 	.word	0xca040000
 8002b08:	80000001 	.word	0x80000001
 8002b0c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	6849      	ldr	r1, [r1, #4]
 8002b1c:	f001 011f 	and.w	r1, r1, #31
 8002b20:	408b      	lsls	r3, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d808      	bhi.n	8002b4c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe feb0 	bl	80018ac <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b5a:	f7fe ff53 	bl	8001a04 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f280 8159 	bge.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a9b      	ldr	r2, [pc, #620]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0x988>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a9a      	ldr	r2, [pc, #616]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x98c>
 8002b7c:	4b99      	ldr	r3, [pc, #612]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002b7e:	e000      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x98e>
 8002b80:	4b99      	ldr	r3, [pc, #612]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fd9a 	bl	80016bc <LL_ADC_GetCommonPathInternalCh>
 8002b88:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a96      	ldr	r2, [pc, #600]	@ (8002dec <HAL_ADC_ConfigChannel+0xbf8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d12b      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d125      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a8d      	ldr	r2, [pc, #564]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x9c2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a8b      	ldr	r2, [pc, #556]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x9c6>
 8002bb6:	4a8b      	ldr	r2, [pc, #556]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002bb8:	e000      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x9c8>
 8002bba:	4a8b      	ldr	r2, [pc, #556]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002bbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f7fe fd65 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002bcc:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_ADC_ConfigChannel+0xbfc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	4a88      	ldr	r2, [pc, #544]	@ (8002df4 <HAL_ADC_ConfigChannel+0xc00>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002bde:	e002      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002bec:	e045      	b.n	8002c7a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a81      	ldr	r2, [pc, #516]	@ (8002df8 <HAL_ADC_ConfigChannel+0xc04>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d11b      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d115      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a74      	ldr	r2, [pc, #464]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0xa24>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a73      	ldr	r2, [pc, #460]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0xa28>
 8002c18:	4a72      	ldr	r2, [pc, #456]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0xa2a>
 8002c1c:	4a72      	ldr	r2, [pc, #456]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7fe fd34 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 8002c2e:	e024      	b.n	8002c7a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a71      	ldr	r2, [pc, #452]	@ (8002dfc <HAL_ADC_ConfigChannel+0xc08>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d11f      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d115      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a64      	ldr	r2, [pc, #400]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0xa66>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a62      	ldr	r2, [pc, #392]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0xa6a>
 8002c5a:	4a62      	ldr	r2, [pc, #392]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c5c:	e000      	b.n	8002c60 <HAL_ADC_ConfigChannel+0xa6c>
 8002c5e:	4a62      	ldr	r2, [pc, #392]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7fe fd13 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 8002c70:	e003      	b.n	8002c7a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a62      	ldr	r2, [pc, #392]	@ (8002e00 <HAL_ADC_ConfigChannel+0xc0c>)
 8002c78:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a61      	ldr	r2, [pc, #388]	@ (8002e04 <HAL_ADC_ConfigChannel+0xc10>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	f040 80ca 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80c3 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002ca8:	e0b7      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002cb8:	4a53      	ldr	r2, [pc, #332]	@ (8002e08 <HAL_ADC_ConfigChannel+0xc14>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fe83 	bl	80019d2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f280 80a2 	bge.w	8002e1a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a40      	ldr	r2, [pc, #256]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_ConfigChannel+0xaf6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0xafa>
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0xafc>
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fce3 	bl	80016bc <LL_ADC_GetCommonPathInternalCh>
 8002cf6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a43      	ldr	r2, [pc, #268]	@ (8002e0c <HAL_ADC_ConfigChannel+0xc18>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d115      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_ADC_ConfigChannel+0xb24>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0xb28>
 8002d18:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d1a:	e000      	b.n	8002d1e <HAL_ADC_ConfigChannel+0xb2a>
 8002d1c:	4a32      	ldr	r2, [pc, #200]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7fe fcb4 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 8002d2e:	e034      	b.n	8002d9a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a36      	ldr	r2, [pc, #216]	@ (8002e10 <HAL_ADC_ConfigChannel+0xc1c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d115      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0xb5a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a25      	ldr	r2, [pc, #148]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0xb5e>
 8002d4e:	4a25      	ldr	r2, [pc, #148]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d50:	e000      	b.n	8002d54 <HAL_ADC_ConfigChannel+0xb60>
 8002d52:	4a25      	ldr	r2, [pc, #148]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f7fe fc99 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 8002d64:	e019      	b.n	8002d9a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_ADC_ConfigChannel+0xc08>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d114      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	@ (8002ddc <HAL_ADC_ConfigChannel+0xbe8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xb90>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <HAL_ADC_ConfigChannel+0xbec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0xb94>
 8002d84:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xb96>
 8002d88:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d8e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7fe fc7e 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_ADC_ConfigChannel+0xc10>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d13a      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d134      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002dc4:	e029      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dd8:	e01f      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
 8002dda:	bf00      	nop
 8002ddc:	42028000 	.word	0x42028000
 8002de0:	42028100 	.word	0x42028100
 8002de4:	42028300 	.word	0x42028300
 8002de8:	46021300 	.word	0x46021300
 8002dec:	b6002000 	.word	0xb6002000
 8002df0:	20000000 	.word	0x20000000
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	ba004000 	.word	0xba004000
 8002dfc:	80000001 	.word	0x80000001
 8002e00:	b2001000 	.word	0xb2001000
 8002e04:	d7200000 	.word	0xd7200000
 8002e08:	80000010 	.word	0x80000010
 8002e0c:	ce080000 	.word	0xce080000
 8002e10:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e18:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002e22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37dc      	adds	r7, #220	@ 0xdc
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff4c 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fae:	f7ff ff63 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002fb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7ff ffb3 	bl	8002f24 <NVIC_EncodePriority>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff82 	bl	8002ed0 <__NVIC_SetPriority>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff56 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d844      	bhi.n	8003088 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003027 	.word	0x08003027
 8003008:	08003045 	.word	0x08003045
 800300c:	08003067 	.word	0x08003067
 8003010:	08003089 	.word	0x08003089
 8003014:	08003019 	.word	0x08003019
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003018:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1e      	ldr	r2, [pc, #120]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6013      	str	r3, [r2, #0]
      break;
 8003024:	e031      	b.n	800308a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003032:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003038:	4a18      	ldr	r2, [pc, #96]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800303a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800303e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003042:	e022      	b.n	800308a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003050:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003056:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800305a:	4a10      	ldr	r2, [pc, #64]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800305c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003064:	e011      	b.n	800308a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a0b      	ldr	r2, [pc, #44]	@ (8003098 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003078:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800307c:	4a07      	ldr	r2, [pc, #28]	@ (800309c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800307e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003086:	e000      	b.n	800308a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003088:	bf00      	nop
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e010 	.word	0xe000e010
 800309c:	46020c00 	.word	0x46020c00

080030a0 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e037      	b.n	8003122 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_DCACHE_Init+0x8c>)
 80030c2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DCACHE_Init+0x90>)
 80030c8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <HAL_DCACHE_Init+0x94>)
 80030ce:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <HAL_DCACHE_Init+0x98>)
 80030d4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a18      	ldr	r2, [pc, #96]	@ (800313c <HAL_DCACHE_Init+0x9c>)
 80030da:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <HAL_DCACHE_Init+0xa0>)
 80030e8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f814 	bl	8003144 <HAL_DCACHE_Enable>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	080031e3 	.word	0x080031e3
 8003130:	08003193 	.word	0x08003193
 8003134:	080031a7 	.word	0x080031a7
 8003138:	080031cf 	.word	0x080031cf
 800313c:	080031bb 	.word	0x080031bb
 8003140:	080010b5 	.word	0x080010b5

08003144 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e015      	b.n	8003186 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0309 	and.w	r3, r3, #9
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e00a      	b.n	8003184 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800320a:	e1ba      	b.n	8003582 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2101      	movs	r1, #1
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	4013      	ands	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 81aa 	beq.w	800357c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a55      	ldr	r2, [pc, #340]	@ (8003380 <HAL_GPIO_Init+0x188>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d15d      	bne.n	80032ec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003236:	2201      	movs	r2, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	4013      	ands	r3, r2
 8003244:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0201 	and.w	r2, r3, #1
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003260:	4a48      	ldr	r2, [pc, #288]	@ (8003384 <HAL_GPIO_Init+0x18c>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003268:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800326a:	4a46      	ldr	r2, [pc, #280]	@ (8003384 <HAL_GPIO_Init+0x18c>)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	3208      	adds	r2, #8
 800327e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003282:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	4013      	ands	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220b      	movs	r2, #11
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	08da      	lsrs	r2, r3, #3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3208      	adds	r2, #8
 80032b6:	69f9      	ldr	r1, [r7, #28]
 80032b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2202      	movs	r2, #2
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e067      	b.n	80033bc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x104>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d145      	bne.n	8003388 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	4013      	ands	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	4313      	orrs	r3, r2
 8003338:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	4013      	ands	r3, r2
 800335e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0203 	and.w	r2, r3, #3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	4313      	orrs	r3, r2
 8003374:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e01e      	b.n	80033bc <HAL_GPIO_Init+0x1c4>
 800337e:	bf00      	nop
 8003380:	46020000 	.word	0x46020000
 8003384:	08007320 	.word	0x08007320
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d00b      	beq.n	80033dc <HAL_GPIO_Init+0x1e4>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d007      	beq.n	80033dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d0:	2b11      	cmp	r3, #17
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d130      	bne.n	800343e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	4313      	orrs	r3, r2
 8003404:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003412:	2201      	movs	r2, #1
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	4013      	ands	r3, r2
 8003420:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0201 	and.w	r2, r3, #1
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	4313      	orrs	r3, r2
 8003436:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d017      	beq.n	8003476 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	4013      	ands	r3, r2
 800345c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	4313      	orrs	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d07c      	beq.n	800357c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003482:	4a47      	ldr	r2, [pc, #284]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3318      	adds	r3, #24
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0a9a      	lsrs	r2, r3, #10
 80034aa:	4b3e      	ldr	r3, [pc, #248]	@ (80035a4 <HAL_GPIO_Init+0x3ac>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	00d2      	lsls	r2, r2, #3
 80034b6:	4093      	lsls	r3, r2
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80034be:	4938      	ldr	r1, [pc, #224]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3318      	adds	r3, #24
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	4013      	ands	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80034f0:	4a2b      	ldr	r2, [pc, #172]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034f6:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	4013      	ands	r3, r2
 8003504:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800351a:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003520:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003526:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	4013      	ands	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003546:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800354e:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003554:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	4013      	ands	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003574:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <HAL_GPIO_Init+0x3a8>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f ae3d 	bne.w	800320c <HAL_GPIO_Init+0x14>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3724      	adds	r7, #36	@ 0x24
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	46022000 	.word	0x46022000
 80035a4:	002f7f7f 	.word	0x002f7f7f

080035a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
 80035b4:	4613      	mov	r3, r2
 80035b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035b8:	787b      	ldrb	r3, [r7, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80035c4:	e002      	b.n	80035cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fd92 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e006      	b.n	8003660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800365e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d108      	bne.n	800367a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	e007      	b.n	800368a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800369c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69d9      	ldr	r1, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
 8003720:	4613      	mov	r3, r2
 8003722:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 80da 	bne.w	80038e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2C_Master_Transmit+0x30>
 800373c:	2302      	movs	r3, #2
 800373e:	e0d3      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003748:	f7fd ff06 	bl	8001558 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2319      	movs	r3, #25
 8003754:	2201      	movs	r2, #1
 8003756:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f8f0 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0be      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	@ 0x21
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2210      	movs	r2, #16
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2bff      	cmp	r3, #255	@ 0xff
 800379a:	d90e      	bls.n	80037ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22ff      	movs	r2, #255	@ 0xff
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	8979      	ldrh	r1, [r7, #10]
 80037aa:	4b51      	ldr	r3, [pc, #324]	@ (80038f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fa88 	bl	8003cc8 <I2C_TransferConfig>
 80037b8:	e06c      	b.n	8003894 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	4b48      	ldr	r3, [pc, #288]	@ (80038f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa77 	bl	8003cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037da:	e05b      	b.n	8003894 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f906 	bl	80039f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e07b      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d034      	beq.n	8003894 <HAL_I2C_Master_Transmit+0x184>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d130      	bne.n	8003894 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f87f 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e04d      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2bff      	cmp	r3, #255	@ 0xff
 8003854:	d90e      	bls.n	8003874 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	22ff      	movs	r2, #255	@ 0xff
 800385a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fa2b 	bl	8003cc8 <I2C_TransferConfig>
 8003872:	e00f      	b.n	8003894 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	8979      	ldrh	r1, [r7, #10]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fa1a 	bl	8003cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d19e      	bne.n	80037dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f8ec 	bl	8003a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01a      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2220      	movs	r2, #32
 80038b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80038c6:	400b      	ands	r3, r1
 80038c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	80002000 	.word	0x80002000
 80038f4:	fe00e800 	.word	0xfe00e800

080038f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d103      	bne.n	8003916 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	619a      	str	r2, [r3, #24]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e03b      	b.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8d6 	bl	8003b08 <I2C_IsErrorOccurred>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d02d      	beq.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd fdf3 	bl	8001558 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnFlagUntilTimeout+0x44>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d122      	bne.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d113      	bne.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00f      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d0b4      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039fe:	e033      	b.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f87f 	bl	8003b08 <I2C_IsErrorOccurred>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e031      	b.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d025      	beq.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fd fd9c 	bl	8001558 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11a      	bne.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d013      	beq.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d1c4      	bne.n	8003a00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8c:	e02f      	b.n	8003aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f838 	bl	8003b08 <I2C_IsErrorOccurred>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02d      	b.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd fd59 	bl	8001558 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11a      	bne.n	8003aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d013      	beq.n	8003aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d1c8      	bne.n	8003a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	@ 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d068      	beq.n	8003c06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b3c:	e049      	b.n	8003bd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d045      	beq.n	8003bd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd fd07 	bl	8001558 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_IsErrorOccurred+0x54>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13a      	bne.n	8003bd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b7e:	d121      	bne.n	8003bc4 <I2C_IsErrorOccurred+0xbc>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b86:	d01d      	beq.n	8003bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d01a      	beq.n	8003bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b9e:	f7fd fcdb 	bl	8001558 <HAL_GetTick>
 8003ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba4:	e00e      	b.n	8003bc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ba6:	f7fd fcd7 	bl	8001558 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b19      	cmp	r3, #25
 8003bb2:	d907      	bls.n	8003bc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f043 0320 	orr.w	r3, r3, #32
 8003bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bc2:	e006      	b.n	8003bd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d1e9      	bne.n	8003ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d003      	beq.n	8003be8 <I2C_IsErrorOccurred+0xe0>
 8003be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0aa      	beq.n	8003b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01c      	beq.n	8003cb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fe3b 	bl	80038f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <I2C_IsErrorOccurred+0x1bc>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3728      	adds	r7, #40	@ 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	fe00e800 	.word	0xfe00e800

08003cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ce0:	7a7b      	ldrb	r3, [r7, #9]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	0d5b      	lsrs	r3, r3, #21
 8003d02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d06:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <I2C_TransferConfig+0x60>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	ea02 0103 	and.w	r1, r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	03ff63ff 	.word	0x03ff63ff

08003d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d138      	bne.n	8003db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e032      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	@ 0x24
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d139      	bne.n	8003e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e033      	b.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2224      	movs	r2, #36	@ 0x24
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_ICACHE_Enable+0x1c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <HAL_ICACHE_Enable+0x1c>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40030400 	.word	0x40030400

08003e7c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e80:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	4a04      	ldr	r2, [pc, #16]	@ (8003e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	46020800 	.word	0x46020800

08003e9c <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ea0:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	46020800 	.word	0x46020800

08003ebc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003ec4:	4b39      	ldr	r3, [pc, #228]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ecc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d10b      	bne.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d905      	bls.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003ede:	4b33      	ldr	r3, [pc, #204]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e057      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d90a      	bls.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	60d3      	str	r3, [r2, #12]
 8003f0a:	e007      	b.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f14:	4925      	ldr	r1, [pc, #148]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f1c:	4b24      	ldr	r3, [pc, #144]	@ (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a24      	ldr	r2, [pc, #144]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	2232      	movs	r2, #50	@ 0x32
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a21      	ldr	r2, [pc, #132]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f3a:	e002      	b.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f42:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f3      	bne.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01b      	beq.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2232      	movs	r2, #50	@ 0x32
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	4a11      	ldr	r2, [pc, #68]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f78:	e002      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f3      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	46020800 	.word	0x46020800
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	10624dd3 	.word	0x10624dd3

08003fb8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	46020800 	.word	0x46020800

08003fd4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fdc:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <HAL_PWREx_ConfigSupply+0x94>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_PWREx_ConfigSupply+0x98>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	2232      	movs	r2, #50	@ 0x32
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	4a1f      	ldr	r2, [pc, #124]	@ (800406c <HAL_PWREx_ConfigSupply+0x98>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d113      	bne.n	8004028 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004000:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 8004006:	f023 0302 	bic.w	r3, r3, #2
 800400a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800400c:	e002      	b.n	8004014 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d116      	bne.n	800404e <HAL_PWREx_ConfigSupply+0x7a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f3      	bne.n	800400e <HAL_PWREx_ConfigSupply+0x3a>
 8004026:	e012      	b.n	800404e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004028:	4b11      	ldr	r3, [pc, #68]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a10      	ldr	r2, [pc, #64]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004034:	e002      	b.n	800403c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800403c:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <HAL_PWREx_ConfigSupply+0x9c>)
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ConfigSupply+0x7a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f3      	bne.n	8004036 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e000      	b.n	800405a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000
 800406c:	10624dd3 	.word	0x10624dd3
 8004070:	46020800 	.word	0x46020800

08004074 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <HAL_PWREx_EnableVddIO2+0x1c>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_PWREx_EnableVddIO2+0x1c>)
 800407e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004082:	6113      	str	r3, [r2, #16]
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	46020800 	.word	0x46020800

08004094 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_PWREx_EnableVddA+0x1c>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_PWREx_EnableVddA+0x1c>)
 800409e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040a2:	6113      	str	r3, [r2, #16]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	46020800 	.word	0x46020800

080040b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	@ 0x38
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f000 bec8 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ce:	4b99      	ldr	r3, [pc, #612]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	4b96      	ldr	r3, [pc, #600]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 816c 	beq.w	80043c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_RCC_OscConfig+0x52>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	f040 80de 	bne.w	80042ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 80da 	bne.w	80042ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f000 bea5 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004118:	4b86      	ldr	r3, [pc, #536]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCC_OscConfig+0x7a>
 8004124:	4b83      	ldr	r3, [pc, #524]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800412c:	e005      	b.n	800413a <HAL_RCC_OscConfig+0x86>
 800412e:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800413a:	4293      	cmp	r3, r2
 800413c:	d255      	bcs.n	80041ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fa15 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f000 be82 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800415a:	4b76      	ldr	r3, [pc, #472]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4a75      	ldr	r2, [pc, #468]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004160:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004164:	6093      	str	r3, [r2, #8]
 8004166:	4b73      	ldr	r3, [pc, #460]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	4970      	ldr	r1, [pc, #448]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004180:	d309      	bcc.n	8004196 <HAL_RCC_OscConfig+0xe2>
 8004182:	4b6c      	ldr	r3, [pc, #432]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f023 021f 	bic.w	r2, r3, #31
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4969      	ldr	r1, [pc, #420]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004190:	4313      	orrs	r3, r2
 8004192:	60cb      	str	r3, [r1, #12]
 8004194:	e07e      	b.n	8004294 <HAL_RCC_OscConfig+0x1e0>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	da0a      	bge.n	80041b4 <HAL_RCC_OscConfig+0x100>
 800419e:	4b65      	ldr	r3, [pc, #404]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	015b      	lsls	r3, r3, #5
 80041ac:	4961      	ldr	r1, [pc, #388]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
 80041b2:	e06f      	b.n	8004294 <HAL_RCC_OscConfig+0x1e0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d30a      	bcc.n	80041d4 <HAL_RCC_OscConfig+0x120>
 80041be:	4b5d      	ldr	r3, [pc, #372]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4959      	ldr	r1, [pc, #356]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60cb      	str	r3, [r1, #12]
 80041d2:	e05f      	b.n	8004294 <HAL_RCC_OscConfig+0x1e0>
 80041d4:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	03db      	lsls	r3, r3, #15
 80041e2:	4954      	ldr	r1, [pc, #336]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60cb      	str	r3, [r1, #12]
 80041e8:	e054      	b.n	8004294 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041ea:	4b52      	ldr	r3, [pc, #328]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4a51      	ldr	r2, [pc, #324]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041f4:	6093      	str	r3, [r2, #8]
 80041f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	494c      	ldr	r1, [pc, #304]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004210:	d309      	bcc.n	8004226 <HAL_RCC_OscConfig+0x172>
 8004212:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 021f 	bic.w	r2, r3, #31
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4945      	ldr	r1, [pc, #276]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004220:	4313      	orrs	r3, r2
 8004222:	60cb      	str	r3, [r1, #12]
 8004224:	e028      	b.n	8004278 <HAL_RCC_OscConfig+0x1c4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	da0a      	bge.n	8004244 <HAL_RCC_OscConfig+0x190>
 800422e:	4b41      	ldr	r3, [pc, #260]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	493d      	ldr	r1, [pc, #244]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
 8004242:	e019      	b.n	8004278 <HAL_RCC_OscConfig+0x1c4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424c:	d30a      	bcc.n	8004264 <HAL_RCC_OscConfig+0x1b0>
 800424e:	4b39      	ldr	r3, [pc, #228]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4935      	ldr	r1, [pc, #212]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 800425e:	4313      	orrs	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]
 8004262:	e009      	b.n	8004278 <HAL_RCC_OscConfig+0x1c4>
 8004264:	4b33      	ldr	r3, [pc, #204]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	03db      	lsls	r3, r3, #15
 8004272:	4930      	ldr	r1, [pc, #192]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f001 f978 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f000 bde5 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004294:	f001 f8de 	bl	8005454 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004298:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <HAL_RCC_OscConfig+0x284>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd f809 	bl	80012b4 <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80042a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 808a 	beq.w	80043c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80042b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b6:	f000 bdd2 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d066      	beq.n	8004390 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042ce:	f7fd f943 	bl	8001558 <HAL_GetTick>
 80042d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042d4:	e009      	b.n	80042ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d6:	f7fd f93f 	bl	8001558 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d902      	bls.n	80042ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	f000 bdba 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ef      	beq.n	80042d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 80042fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004300:	6093      	str	r3, [r2, #8]
 8004302:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	4909      	ldr	r1, [pc, #36]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800431c:	d30e      	bcc.n	800433c <HAL_RCC_OscConfig+0x288>
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 021f 	bic.w	r2, r3, #31
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4902      	ldr	r1, [pc, #8]	@ (8004334 <HAL_RCC_OscConfig+0x280>)
 800432c:	4313      	orrs	r3, r2
 800432e:	60cb      	str	r3, [r1, #12]
 8004330:	e04a      	b.n	80043c8 <HAL_RCC_OscConfig+0x314>
 8004332:	bf00      	nop
 8004334:	46020c00 	.word	0x46020c00
 8004338:	20000004 	.word	0x20000004
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	da0a      	bge.n	800435a <HAL_RCC_OscConfig+0x2a6>
 8004344:	4b98      	ldr	r3, [pc, #608]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	4995      	ldr	r1, [pc, #596]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
 8004358:	e036      	b.n	80043c8 <HAL_RCC_OscConfig+0x314>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004362:	d30a      	bcc.n	800437a <HAL_RCC_OscConfig+0x2c6>
 8004364:	4b90      	ldr	r3, [pc, #576]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	029b      	lsls	r3, r3, #10
 8004372:	498d      	ldr	r1, [pc, #564]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	60cb      	str	r3, [r1, #12]
 8004378:	e026      	b.n	80043c8 <HAL_RCC_OscConfig+0x314>
 800437a:	4b8b      	ldr	r3, [pc, #556]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	03db      	lsls	r3, r3, #15
 8004388:	4987      	ldr	r1, [pc, #540]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]
 800438e:	e01b      	b.n	80043c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004390:	4b85      	ldr	r3, [pc, #532]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a84      	ldr	r2, [pc, #528]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800439c:	f7fd f8dc 	bl	8001558 <HAL_GetTick>
 80043a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043a2:	e009      	b.n	80043b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a4:	f7fd f8d8 	bl	8001558 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d902      	bls.n	80043b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f000 bd53 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043b8:	4b7b      	ldr	r3, [pc, #492]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ef      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
 80043c4:	e000      	b.n	80043c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 808b 	beq.w	80044ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x334>
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d17d      	bne.n	80044ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f000 bd34 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x35a>
 8004400:	4b69      	ldr	r3, [pc, #420]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e041      	b.n	8004492 <HAL_RCC_OscConfig+0x3de>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004416:	d112      	bne.n	800443e <HAL_RCC_OscConfig+0x38a>
 8004418:	4b63      	ldr	r3, [pc, #396]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a62      	ldr	r2, [pc, #392]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800441e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b60      	ldr	r3, [pc, #384]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5f      	ldr	r2, [pc, #380]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b5d      	ldr	r3, [pc, #372]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5c      	ldr	r2, [pc, #368]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e029      	b.n	8004492 <HAL_RCC_OscConfig+0x3de>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004446:	d112      	bne.n	800446e <HAL_RCC_OscConfig+0x3ba>
 8004448:	4b57      	ldr	r3, [pc, #348]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a56      	ldr	r2, [pc, #344]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800444e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b54      	ldr	r3, [pc, #336]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a53      	ldr	r2, [pc, #332]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800445a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b51      	ldr	r3, [pc, #324]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a50      	ldr	r2, [pc, #320]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e011      	b.n	8004492 <HAL_RCC_OscConfig+0x3de>
 800446e:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a4d      	ldr	r2, [pc, #308]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b48      	ldr	r3, [pc, #288]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a47      	ldr	r2, [pc, #284]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800448c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d014      	beq.n	80044c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800449a:	f7fd f85d 	bl	8001558 <HAL_GetTick>
 800449e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a0:	e009      	b.n	80044b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a2:	f7fd f859 	bl	8001558 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b64      	cmp	r3, #100	@ 0x64
 80044ae:	d902      	bls.n	80044b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	f000 bcd4 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b6:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ef      	beq.n	80044a2 <HAL_RCC_OscConfig+0x3ee>
 80044c2:	e013      	b.n	80044ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044c4:	f7fd f848 	bl	8001558 <HAL_GetTick>
 80044c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ca:	e009      	b.n	80044e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd f844 	bl	8001558 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	@ 0x64
 80044d8:	d902      	bls.n	80044e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	f000 bcbf 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e0:	4b31      	ldr	r3, [pc, #196]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ef      	bne.n	80044cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05f      	beq.n	80045b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x456>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d114      	bne.n	800452e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004506:	2b02      	cmp	r3, #2
 8004508:	d111      	bne.n	800452e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f000 bca3 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004518:	4b23      	ldr	r3, [pc, #140]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	4920      	ldr	r1, [pc, #128]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800452c:	e044      	b.n	80045b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004540:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004542:	f7fd f809 	bl	8001558 <HAL_GetTick>
 8004546:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004548:	e009      	b.n	800455e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454a:	f7fd f805 	bl	8001558 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d902      	bls.n	800455e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	f000 bc80 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0ef      	beq.n	800454a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	490b      	ldr	r1, [pc, #44]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
 800457e:	e01b      	b.n	80045b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004586:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800458a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800458c:	f7fc ffe4 	bl	8001558 <HAL_GetTick>
 8004590:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004594:	f7fc ffe0 	bl	8001558 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d904      	bls.n	80045ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	f000 bc5b 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
 80045a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ac:	4baf      	ldr	r3, [pc, #700]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ed      	bne.n	8004594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80c8 	beq.w	8004756 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045cc:	4ba7      	ldr	r3, [pc, #668]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d111      	bne.n	80045fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	4ba4      	ldr	r3, [pc, #656]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e0:	4aa2      	ldr	r2, [pc, #648]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045ea:	4ba0      	ldr	r3, [pc, #640]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80045ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d119      	bne.n	800463e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800460a:	4b99      	ldr	r3, [pc, #612]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	4a98      	ldr	r2, [pc, #608]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fc ff9f 	bl	8001558 <HAL_GetTick>
 800461a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800461c:	e009      	b.n	8004632 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fc ff9b 	bl	8001558 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d902      	bls.n	8004632 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f000 bc16 	b.w	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004632:	4b8f      	ldr	r3, [pc, #572]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ef      	beq.n	800461e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d05f      	beq.n	8004706 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004646:	4b89      	ldr	r3, [pc, #548]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004658:	429a      	cmp	r2, r3
 800465a:	d037      	beq.n	80046cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e3f4      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800467e:	4b7b      	ldr	r3, [pc, #492]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004684:	4a79      	ldr	r2, [pc, #484]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004686:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800468a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800468e:	f7fc ff63 	bl	8001558 <HAL_GetTick>
 8004692:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004696:	f7fc ff5f 	bl	8001558 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e3da      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046a8:	4b70      	ldr	r3, [pc, #448]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ef      	bne.n	8004696 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046b6:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4969      	ldr	r1, [pc, #420]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046cc:	4b67      	ldr	r3, [pc, #412]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d2:	4a66      	ldr	r2, [pc, #408]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80046dc:	f7fc ff3c 	bl	8001558 <HAL_GetTick>
 80046e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fc ff38 	bl	8001558 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e3b3      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046f6:	4b5d      	ldr	r3, [pc, #372]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ef      	beq.n	80046e4 <HAL_RCC_OscConfig+0x630>
 8004704:	e01b      	b.n	800473e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004706:	4b59      	ldr	r3, [pc, #356]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800470c:	4a57      	ldr	r2, [pc, #348]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800470e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004716:	f7fc ff1f 	bl	8001558 <HAL_GetTick>
 800471a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471e:	f7fc ff1b 	bl	8001558 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b05      	cmp	r3, #5
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e396      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004730:	4b4e      	ldr	r3, [pc, #312]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ef      	bne.n	800471e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800473e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004746:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474c:	4a47      	ldr	r2, [pc, #284]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800474e:	f023 0304 	bic.w	r3, r3, #4
 8004752:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8111 	beq.w	8004986 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b40      	ldr	r3, [pc, #256]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800477e:	4a3b      	ldr	r2, [pc, #236]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004780:	f043 0304 	orr.w	r3, r3, #4
 8004784:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004788:	4b38      	ldr	r3, [pc, #224]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d118      	bne.n	80047da <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047a8:	4b31      	ldr	r3, [pc, #196]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	4a30      	ldr	r2, [pc, #192]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b4:	f7fc fed0 	bl	8001558 <HAL_GetTick>
 80047b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fc fecc 	bl	8001558 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e347      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047ce:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <HAL_RCC_OscConfig+0x7bc>)
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01f      	beq.n	8004826 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d010      	beq.n	8004814 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047f2:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80047f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f8:	4a1c      	ldr	r2, [pc, #112]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004808:	4a18      	ldr	r2, [pc, #96]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004812:	e018      	b.n	8004846 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004814:	4b15      	ldr	r3, [pc, #84]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800481a:	4a14      	ldr	r2, [pc, #80]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004824:	e00f      	b.n	8004846 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004826:	4b11      	ldr	r3, [pc, #68]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800482c:	4a0f      	ldr	r2, [pc, #60]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 8004838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800483c:	4a0b      	ldr	r2, [pc, #44]	@ (800486c <HAL_RCC_OscConfig+0x7b8>)
 800483e:	f023 0304 	bic.w	r3, r3, #4
 8004842:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d057      	beq.n	80048fe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800484e:	f7fc fe83 	bl	8001558 <HAL_GetTick>
 8004852:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004854:	e00e      	b.n	8004874 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fc fe7f 	bl	8001558 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d905      	bls.n	8004874 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e2f8      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
 800486c:	46020c00 	.word	0x46020c00
 8004870:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004874:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0e9      	beq.n	8004856 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01b      	beq.n	80048c6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800488e:	4b96      	ldr	r3, [pc, #600]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004894:	4a94      	ldr	r2, [pc, #592]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fc fe5a 	bl	8001558 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e2d3      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048b6:	4b8c      	ldr	r3, [pc, #560]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80048b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ed      	beq.n	80048a0 <HAL_RCC_OscConfig+0x7ec>
 80048c4:	e053      	b.n	800496e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048c6:	4b88      	ldr	r3, [pc, #544]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80048c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048cc:	4a86      	ldr	r2, [pc, #536]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80048ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fc fe3e 	bl	8001558 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e2b7      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048ee:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80048f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ed      	bne.n	80048d8 <HAL_RCC_OscConfig+0x824>
 80048fc:	e037      	b.n	800496e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80048fe:	f7fc fe2b 	bl	8001558 <HAL_GetTick>
 8004902:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fc fe27 	bl	8001558 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2a0      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800491c:	4b72      	ldr	r3, [pc, #456]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 800491e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ed      	bne.n	8004906 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800492a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 800492c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01a      	beq.n	800496e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004938:	4b6b      	ldr	r3, [pc, #428]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 800493a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800493e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004948:	e00a      	b.n	8004960 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fc fe05 	bl	8001558 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e27e      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004960:	4b61      	ldr	r3, [pc, #388]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ed      	bne.n	800494a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800496e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800497c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d019      	beq.n	80049ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800499a:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a52      	ldr	r2, [pc, #328]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80049a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049a6:	f7fc fdd7 	bl	8001558 <HAL_GetTick>
 80049aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ae:	f7fc fdd3 	bl	8001558 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e24e      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049c0:	4b49      	ldr	r3, [pc, #292]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x8fa>
 80049cc:	e018      	b.n	8004a00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049ce:	4b46      	ldr	r3, [pc, #280]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a45      	ldr	r2, [pc, #276]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80049d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049da:	f7fc fdbd 	bl	8001558 <HAL_GetTick>
 80049de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e2:	f7fc fdb9 	bl	8001558 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e234      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049f4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d036      	beq.n	8004a7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d019      	beq.n	8004a48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a14:	4b34      	ldr	r3, [pc, #208]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a33      	ldr	r2, [pc, #204]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a20:	f7fc fd9a 	bl	8001558 <HAL_GetTick>
 8004a24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a28:	f7fc fd96 	bl	8001558 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e211      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x974>
 8004a46:	e018      	b.n	8004a7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a48:	4b27      	ldr	r3, [pc, #156]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a54:	f7fc fd80 	bl	8001558 <HAL_GetTick>
 8004a58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a5c:	f7fc fd7c 	bl	8001558 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f7      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d07f      	beq.n	8004b86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d062      	beq.n	8004b54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004a8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4a15      	ldr	r2, [pc, #84]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	4910      	ldr	r1, [pc, #64]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ab4:	d309      	bcc.n	8004aca <HAL_RCC_OscConfig+0xa16>
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 021f 	bic.w	r2, r3, #31
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4909      	ldr	r1, [pc, #36]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60cb      	str	r3, [r1, #12]
 8004ac8:	e02a      	b.n	8004b20 <HAL_RCC_OscConfig+0xa6c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da0c      	bge.n	8004aec <HAL_RCC_OscConfig+0xa38>
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	4901      	ldr	r1, [pc, #4]	@ (8004ae8 <HAL_RCC_OscConfig+0xa34>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60cb      	str	r3, [r1, #12]
 8004ae6:	e01b      	b.n	8004b20 <HAL_RCC_OscConfig+0xa6c>
 8004ae8:	46020c00 	.word	0x46020c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af4:	d30a      	bcc.n	8004b0c <HAL_RCC_OscConfig+0xa58>
 8004af6:	4ba1      	ldr	r3, [pc, #644]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	499d      	ldr	r1, [pc, #628]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60cb      	str	r3, [r1, #12]
 8004b0a:	e009      	b.n	8004b20 <HAL_RCC_OscConfig+0xa6c>
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	03db      	lsls	r3, r3, #15
 8004b1a:	4998      	ldr	r1, [pc, #608]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b20:	4b96      	ldr	r3, [pc, #600]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a95      	ldr	r2, [pc, #596]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b26:	f043 0310 	orr.w	r3, r3, #16
 8004b2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b2c:	f7fc fd14 	bl	8001558 <HAL_GetTick>
 8004b30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b34:	f7fc fd10 	bl	8001558 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e18b      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b46:	4b8d      	ldr	r3, [pc, #564]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xa80>
 8004b52:	e018      	b.n	8004b86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b54:	4b89      	ldr	r3, [pc, #548]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a88      	ldr	r2, [pc, #544]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b5a:	f023 0310 	bic.w	r3, r3, #16
 8004b5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b60:	f7fc fcfa 	bl	8001558 <HAL_GetTick>
 8004b64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b68:	f7fc fcf6 	bl	8001558 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e171      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b7a:	4b80      	ldr	r3, [pc, #512]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8166 	beq.w	8004e5c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b96:	4b79      	ldr	r3, [pc, #484]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	f000 80f2 	beq.w	8004d88 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f040 80c5 	bne.w	8004d38 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b73      	ldr	r3, [pc, #460]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a72      	ldr	r2, [pc, #456]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004bb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bba:	f7fc fccd 	bl	8001558 <HAL_GetTick>
 8004bbe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fc fcc9 	bl	8001558 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e144      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bd4:	4b69      	ldr	r3, [pc, #420]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be0:	4b66      	ldr	r3, [pc, #408]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d111      	bne.n	8004c12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf4:	4a61      	ldr	r2, [pc, #388]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c12:	4b5b      	ldr	r3, [pc, #364]	@ (8004d80 <HAL_RCC_OscConfig+0xccc>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c26:	4b56      	ldr	r3, [pc, #344]	@ (8004d80 <HAL_RCC_OscConfig+0xccc>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a55      	ldr	r2, [pc, #340]	@ (8004d80 <HAL_RCC_OscConfig+0xccc>)
 8004c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c32:	4b52      	ldr	r3, [pc, #328]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c46:	3a01      	subs	r2, #1
 8004c48:	0212      	lsls	r2, r2, #8
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c50:	430a      	orrs	r2, r1
 8004c52:	494a      	ldr	r1, [pc, #296]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c58:	4b48      	ldr	r3, [pc, #288]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5c:	4b49      	ldr	r3, [pc, #292]	@ (8004d84 <HAL_RCC_OscConfig+0xcd0>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c64:	3a01      	subs	r2, #1
 8004c66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	0252      	lsls	r2, r2, #9
 8004c72:	b292      	uxth	r2, r2
 8004c74:	4311      	orrs	r1, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0412      	lsls	r2, r2, #16
 8004c7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0612      	lsls	r2, r2, #24
 8004c8c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c90:	430a      	orrs	r2, r1
 8004c92:	493a      	ldr	r1, [pc, #232]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004c98:	4b38      	ldr	r3, [pc, #224]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	4a37      	ldr	r2, [pc, #220]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004c9e:	f023 0310 	bic.w	r3, r3, #16
 8004ca2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	4a34      	ldr	r2, [pc, #208]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cae:	4b33      	ldr	r3, [pc, #204]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	4a32      	ldr	r2, [pc, #200]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004cba:	4b30      	ldr	r3, [pc, #192]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	f023 020c 	bic.w	r2, r3, #12
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	492d      	ldr	r1, [pc, #180]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d105      	bne.n	8004ce0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <HAL_RCC_OscConfig+0xccc>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	@ (8004d80 <HAL_RCC_OscConfig+0xccc>)
 8004cda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cde:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004ce0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4b24      	ldr	r3, [pc, #144]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cee:	4a23      	ldr	r2, [pc, #140]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d04:	f7fc fc28 	bl	8001558 <HAL_GetTick>
 8004d08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc fc24 	bl	8001558 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e09f      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d1e:	4b17      	ldr	r3, [pc, #92]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d2a:	4b14      	ldr	r3, [pc, #80]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d34:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d36:	e091      	b.n	8004e5c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d44:	f7fc fc08 	bl	8001558 <HAL_GetTick>
 8004d48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fc04 	bl	8001558 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d5e:	4b07      	ldr	r3, [pc, #28]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d6a:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	4a03      	ldr	r2, [pc, #12]	@ (8004d7c <HAL_RCC_OscConfig+0xcc8>)
 8004d70:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d74:	f023 0303 	bic.w	r3, r3, #3
 8004d78:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d7a:	e06f      	b.n	8004e5c <HAL_RCC_OscConfig+0xda8>
 8004d7c:	46020c00 	.word	0x46020c00
 8004d80:	46020800 	.word	0x46020800
 8004d84:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d88:	4b37      	ldr	r3, [pc, #220]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d8e:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d92:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d039      	beq.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0203 	and.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d132      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d129      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d122      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d11a      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	0a5b      	lsrs	r3, r3, #9
 8004dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d111      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d108      	bne.n	8004e10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	0e1b      	lsrs	r3, r3, #24
 8004e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e024      	b.n	8004e5e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e14:	4b14      	ldr	r3, [pc, #80]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d01a      	beq.n	8004e5c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e26:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e2c:	f023 0310 	bic.w	r3, r3, #16
 8004e30:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fc fb91 	bl	8001558 <HAL_GetTick>
 8004e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e38:	bf00      	nop
 8004e3a:	f7fc fb8d 	bl	8001558 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d0f9      	beq.n	8004e3a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4a:	4a07      	ldr	r2, [pc, #28]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	4a04      	ldr	r2, [pc, #16]	@ (8004e68 <HAL_RCC_OscConfig+0xdb4>)
 8004e56:	f043 0310 	orr.w	r3, r3, #16
 8004e5a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3738      	adds	r7, #56	@ 0x38
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	46020c00 	.word	0x46020c00

08004e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e1d9      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e80:	4b9b      	ldr	r3, [pc, #620]	@ (80050f0 <HAL_RCC_ClockConfig+0x284>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d910      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8e:	4b98      	ldr	r3, [pc, #608]	@ (80050f0 <HAL_RCC_ClockConfig+0x284>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 020f 	bic.w	r2, r3, #15
 8004e96:	4996      	ldr	r1, [pc, #600]	@ (80050f0 <HAL_RCC_ClockConfig+0x284>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b94      	ldr	r3, [pc, #592]	@ (80050f0 <HAL_RCC_ClockConfig+0x284>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e1c1      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d908      	bls.n	8004ede <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004ecc:	4b89      	ldr	r3, [pc, #548]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	4986      	ldr	r1, [pc, #536]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d012      	beq.n	8004f10 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	4b81      	ldr	r3, [pc, #516]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d909      	bls.n	8004f10 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004efc:	4b7d      	ldr	r3, [pc, #500]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	497a      	ldr	r1, [pc, #488]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	4b74      	ldr	r3, [pc, #464]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d908      	bls.n	8004f3e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f2c:	4b71      	ldr	r3, [pc, #452]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	496e      	ldr	r1, [pc, #440]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	4b69      	ldr	r3, [pc, #420]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d908      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f5a:	4b66      	ldr	r3, [pc, #408]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 020f 	bic.w	r2, r3, #15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4963      	ldr	r1, [pc, #396]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80d2 	beq.w	800511e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d143      	bne.n	800500e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b5b      	ldr	r3, [pc, #364]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d110      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b57      	ldr	r3, [pc, #348]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9a:	4a56      	ldr	r2, [pc, #344]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fa4:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fb6:	f7fc facf 	bl	8001558 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80050f8 <HAL_RCC_ClockConfig+0x28c>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00f      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004fca:	f7fc fac5 	bl	8001558 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e12b      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fdc:	4b46      	ldr	r3, [pc, #280]	@ (80050f8 <HAL_RCC_ClockConfig+0x28c>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fee:	4b41      	ldr	r3, [pc, #260]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8004ff6:	f023 0304 	bic.w	r3, r3, #4
 8004ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d121      	bne.n	800504e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e112      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d115      	bne.n	800504e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e106      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800502e:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0fa      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800503e:	4b2d      	ldr	r3, [pc, #180]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0f2      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800504e:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4926      	ldr	r1, [pc, #152]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 800505c:	4313      	orrs	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005060:	f7fc fa7a 	bl	8001558 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d112      	bne.n	8005094 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fc fa72 	bl	8001558 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0d6      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005086:	4b1b      	ldr	r3, [pc, #108]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_ClockConfig+0x204>
 8005092:	e044      	b.n	800511e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d112      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509e:	f7fc fa5b 	bl	8001558 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0bf      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050b4:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_ClockConfig+0x232>
 80050c0:	e02d      	b.n	800511e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d123      	bne.n	8005112 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fc fa44 	bl	8001558 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0a8      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <HAL_RCC_ClockConfig+0x288>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ee      	bne.n	80050cc <HAL_RCC_ClockConfig+0x260>
 80050ee:	e016      	b.n	800511e <HAL_RCC_ClockConfig+0x2b2>
 80050f0:	40022000 	.word	0x40022000
 80050f4:	46020c00 	.word	0x46020c00
 80050f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fc fa2c 	bl	8001558 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e090      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005112:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d010      	beq.n	800514c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	429a      	cmp	r2, r3
 8005138:	d208      	bcs.n	800514c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800513a:	4b40      	ldr	r3, [pc, #256]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 020f 	bic.w	r2, r3, #15
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	493d      	ldr	r1, [pc, #244]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 8005148:	4313      	orrs	r3, r2
 800514a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b3c      	ldr	r3, [pc, #240]	@ (8005240 <HAL_RCC_ClockConfig+0x3d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d210      	bcs.n	800517c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCC_ClockConfig+0x3d4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 020f 	bic.w	r2, r3, #15
 8005162:	4937      	ldr	r1, [pc, #220]	@ (8005240 <HAL_RCC_ClockConfig+0x3d4>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b35      	ldr	r3, [pc, #212]	@ (8005240 <HAL_RCC_ClockConfig+0x3d4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e05b      	b.n	8005234 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005194:	429a      	cmp	r2, r3
 8005196:	d208      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005198:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4925      	ldr	r1, [pc, #148]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d209      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051c8:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	4919      	ldr	r1, [pc, #100]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	4b13      	ldr	r3, [pc, #76]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d208      	bcs.n	800520a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80051f8:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	490d      	ldr	r1, [pc, #52]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800520a:	f000 f821 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x3d0>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	490a      	ldr	r1, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x3d8>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <HAL_RCC_ClockConfig+0x3dc>)
 8005222:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005224:	4b09      	ldr	r3, [pc, #36]	@ (800524c <HAL_RCC_ClockConfig+0x3e0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fc f843 	bl	80012b4 <HAL_InitTick>
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]

  return status;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	46020c00 	.word	0x46020c00
 8005240:	40022000 	.word	0x40022000
 8005244:	080072c8 	.word	0x080072c8
 8005248:	20000000 	.word	0x20000000
 800524c:	20000004 	.word	0x20000004

08005250 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	b08b      	sub	sp, #44	@ 0x2c
 8005254:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525e:	4b78      	ldr	r3, [pc, #480]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	4b75      	ldr	r3, [pc, #468]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x34>
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d121      	bne.n	80052c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d11e      	bne.n	80052c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005284:	4b6e      	ldr	r3, [pc, #440]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005290:	4b6b      	ldr	r3, [pc, #428]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005296:	0b1b      	lsrs	r3, r3, #12
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	e005      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052a0:	4b67      	ldr	r3, [pc, #412]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0f1b      	lsrs	r3, r3, #28
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052ac:	4a65      	ldr	r2, [pc, #404]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d110      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052c0:	e00d      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d102      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	e004      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d101      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052da:	4b5b      	ldr	r3, [pc, #364]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	f040 80a5 	bne.w	8005430 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80052e6:	4b56      	ldr	r3, [pc, #344]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80052f0:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80052fe:	4b50      	ldr	r3, [pc, #320]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800530a:	4b4d      	ldr	r3, [pc, #308]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d003      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0xe4>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d022      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x128>
 8005332:	e043      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800544c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b3e      	ldr	r3, [pc, #248]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005356:	ed97 6a01 	vldr	s12, [r7, #4]
 800535a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x200>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	e046      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800544c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b2d      	ldr	r3, [pc, #180]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800539a:	ed97 6a01 	vldr	s12, [r7, #4]
 800539e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x200>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ba:	e024      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80053e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x200>
 80053ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005404:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005406:	4b0e      	ldr	r3, [pc, #56]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540a:	0e1b      	lsrs	r3, r3, #24
 800540c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005410:	3301      	adds	r3, #1
 8005412:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800541e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542a:	ee17 3a90 	vmov	r3, s15
 800542e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005430:	6a3b      	ldr	r3, [r7, #32]
}
 8005432:	4618      	mov	r0, r3
 8005434:	372c      	adds	r7, #44	@ 0x2c
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	46020c00 	.word	0x46020c00
 8005444:	080072e0 	.word	0x080072e0
 8005448:	00f42400 	.word	0x00f42400
 800544c:	4b742400 	.word	0x4b742400
 8005450:	46000000 	.word	0x46000000

08005454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005458:	f7ff fefa 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b07      	ldr	r3, [pc, #28]	@ (800547c <HAL_RCC_GetHCLKFreq+0x28>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4906      	ldr	r1, [pc, #24]	@ (8005480 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005468:	5ccb      	ldrb	r3, [r1, r3]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a05      	ldr	r2, [pc, #20]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x30>)
 8005470:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005472:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x30>)
 8005474:	681b      	ldr	r3, [r3, #0]
}
 8005476:	4618      	mov	r0, r3
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	46020c00 	.word	0x46020c00
 8005480:	080072c8 	.word	0x080072c8
 8005484:	20000000 	.word	0x20000000

08005488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800548c:	f7ff ffe2 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4903      	ldr	r1, [pc, #12]	@ (80054ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	46020c00 	.word	0x46020c00
 80054ac:	080072d8 	.word	0x080072d8

080054b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	221f      	movs	r2, #31
 80054be:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80054c0:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <HAL_RCC_GetClockConfig+0x68>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f003 0203 	and.w	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80054cc:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <HAL_RCC_GetClockConfig+0x68>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f003 020f 	and.w	r2, r3, #15
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <HAL_RCC_GetClockConfig+0x68>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_RCC_GetClockConfig+0x68>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80054f2:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_GetClockConfig+0x68>)
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054fe:	4b07      	ldr	r3, [pc, #28]	@ (800551c <HAL_RCC_GetClockConfig+0x6c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	46020c00 	.word	0x46020c00
 800551c:	40022000 	.word	0x40022000

08005520 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005524:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_EnableCSS+0x1c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a04      	ldr	r2, [pc, #16]	@ (800553c <HAL_RCC_EnableCSS+0x1c>)
 800552a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	46020c00 	.word	0x46020c00

08005540 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005550:	d105      	bne.n	800555e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005552:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005558:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800555a:	f000 f805 	bl	8005568 <HAL_RCC_CSSCallback>
  }
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	46020c00 	.word	0x46020c00

08005568 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005580:	4b3e      	ldr	r3, [pc, #248]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800558e:	f7fe fd13 	bl	8003fb8 <HAL_PWREx_GetVoltageRange>
 8005592:	6178      	str	r0, [r7, #20]
 8005594:	e019      	b.n	80055ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	4b39      	ldr	r3, [pc, #228]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559c:	4a37      	ldr	r2, [pc, #220]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055a6:	4b35      	ldr	r3, [pc, #212]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055b4:	f7fe fd00 	bl	8003fb8 <HAL_PWREx_GetVoltageRange>
 80055b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ba:	4b30      	ldr	r3, [pc, #192]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c0:	4a2e      	ldr	r2, [pc, #184]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055d0:	d003      	beq.n	80055da <RCC_SetFlashLatencyFromMSIRange+0x62>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d8:	d109      	bne.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e0:	d202      	bcs.n	80055e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80055e2:	2301      	movs	r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055e6:	e033      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055ec:	e030      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055f4:	d208      	bcs.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055fc:	d102      	bne.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055fe:	2303      	movs	r3, #3
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e025      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e035      	b.n	8005674 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800560e:	d90f      	bls.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800561c:	d902      	bls.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e015      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e012      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e00f      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005636:	d109      	bne.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563e:	d102      	bne.n	8005646 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005640:	2301      	movs	r3, #1
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	e004      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005646:	2302      	movs	r3, #2
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	e001      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800564c:	2301      	movs	r3, #1
 800564e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005650:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 020f 	bic.w	r2, r3, #15
 8005658:	4909      	ldr	r1, [pc, #36]	@ (8005680 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d001      	beq.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	46020c00 	.word	0x46020c00
 8005680:	40022000 	.word	0x40022000

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b0c8      	sub	sp, #288	@ 0x120
 800568a:	af00      	add	r7, sp, #0
 800568c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005690:	2300      	movs	r3, #0
 8005692:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005696:	2300      	movs	r3, #0
 8005698:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 0401 	and.w	r4, r2, #1
 80056a8:	2500      	movs	r5, #0
 80056aa:	ea54 0305 	orrs.w	r3, r4, r5
 80056ae:	d00b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80056b0:	4bd5      	ldr	r3, [pc, #852]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b6:	f023 0103 	bic.w	r1, r3, #3
 80056ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c0:	4ad1      	ldr	r2, [pc, #836]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f002 0802 	and.w	r8, r2, #2
 80056d4:	f04f 0900 	mov.w	r9, #0
 80056d8:	ea58 0309 	orrs.w	r3, r8, r9
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80056de:	4bca      	ldr	r3, [pc, #808]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e4:	f023 010c 	bic.w	r1, r3, #12
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	4ac6      	ldr	r2, [pc, #792]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 0a04 	and.w	sl, r2, #4
 8005702:	f04f 0b00 	mov.w	fp, #0
 8005706:	ea5a 030b 	orrs.w	r3, sl, fp
 800570a:	d00b      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800570c:	4bbe      	ldr	r3, [pc, #760]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800570e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005712:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	4aba      	ldr	r2, [pc, #744]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800571e:	430b      	orrs	r3, r1
 8005720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f002 0308 	and.w	r3, r2, #8
 8005730:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800573a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800573e:	460b      	mov	r3, r1
 8005740:	4313      	orrs	r3, r2
 8005742:	d00b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005744:	4bb0      	ldr	r3, [pc, #704]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800574a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800574e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	4aac      	ldr	r2, [pc, #688]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005756:	430b      	orrs	r3, r1
 8005758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f002 0310 	and.w	r3, r2, #16
 8005768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800576c:	2300      	movs	r3, #0
 800576e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005772:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d00b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800577c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005782:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578c:	4a9e      	ldr	r2, [pc, #632]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800578e:	430b      	orrs	r3, r1
 8005790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d00b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80057b4:	4b94      	ldr	r3, [pc, #592]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c4:	4a90      	ldr	r2, [pc, #576]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f002 0320 	and.w	r3, r2, #32
 80057d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057e2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d00b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80057ec:	4b86      	ldr	r3, [pc, #536]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057f2:	f023 0107 	bic.w	r1, r3, #7
 80057f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057fc:	4a82      	ldr	r2, [pc, #520]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057fe:	430b      	orrs	r3, r1
 8005800:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800581a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d00b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005824:	4b78      	ldr	r3, [pc, #480]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800582a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800582e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005834:	4a74      	ldr	r2, [pc, #464]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005836:	430b      	orrs	r3, r1
 8005838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800583c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d00b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800585c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800585e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005862:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	4a66      	ldr	r2, [pc, #408]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800586e:	430b      	orrs	r3, r1
 8005870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800588a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d00b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005894:	4b5c      	ldr	r3, [pc, #368]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800589a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a4:	4a58      	ldr	r2, [pc, #352]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80058b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80058cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058d2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80058e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d00b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005904:	4b40      	ldr	r3, [pc, #256]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800590a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005914:	4a3c      	ldr	r2, [pc, #240]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005916:	430b      	orrs	r3, r1
 8005918:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800591c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005932:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d00c      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800593c:	4b32      	ldr	r3, [pc, #200]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800593e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005942:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594e:	4a2e      	ldr	r2, [pc, #184]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005950:	430b      	orrs	r3, r1
 8005952:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800596c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d00c      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005976:	4b24      	ldr	r3, [pc, #144]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800597c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005988:	4a1f      	ldr	r2, [pc, #124]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800598a:	430b      	orrs	r3, r1
 800598c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059aa:	460b      	mov	r3, r1
 80059ac:	4313      	orrs	r3, r2
 80059ae:	d00c      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80059b0:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059b6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80059ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	4a11      	ldr	r2, [pc, #68]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80059ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d010      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80059ea:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059fc:	4a02      	ldr	r2, [pc, #8]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a04:	e002      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005a06:	bf00      	nop
 8005a08:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d04c      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a34:	2b80      	cmp	r3, #128	@ 0x80
 8005a36:	d02d      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005a38:	2b80      	cmp	r3, #128	@ 0x80
 8005a3a:	d827      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a3c:	2b60      	cmp	r3, #96	@ 0x60
 8005a3e:	d02b      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a40:	2b60      	cmp	r3, #96	@ 0x60
 8005a42:	d823      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a44:	2b40      	cmp	r3, #64	@ 0x40
 8005a46:	d006      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	d81f      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d011      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005a54:	e01a      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a56:	4bc0      	ldr	r3, [pc, #768]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	4abf      	ldr	r2, [pc, #764]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a62:	e01a      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a68:	3308      	adds	r3, #8
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fda2 	bl	80065b4 <RCCEx_PLL2_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a76:	e010      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7c:	332c      	adds	r3, #44	@ 0x2c
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fe30 	bl	80066e4 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a8a:	e006      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005a94:	bf00      	nop
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005aa2:	4bad      	ldr	r3, [pc, #692]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005aa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aa8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab4:	4aa8      	ldr	r2, [pc, #672]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005ac2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005adc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d053      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af2:	d033      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af8:	d82c      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005afe:	d02f      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b04:	d826      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b10:	d820      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1a:	d011      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b1c:	e01a      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	4a8d      	ldr	r2, [pc, #564]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b28:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b2a:	e01a      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b30:	3308      	adds	r3, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fd3e 	bl	80065b4 <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b3e:	e010      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b44:	332c      	adds	r3, #44	@ 0x2c
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fdcc 	bl	80066e4 <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b52:	e006      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005b5a:	e002      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b62:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b70:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b7c:	4a76      	ldr	r2, [pc, #472]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b84:	e003      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005b8a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ba4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d046      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bba:	d028      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005bbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bc0:	d821      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc6:	d022      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bcc:	d81b      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bd2:	d01c      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005bd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bd8:	d815      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be4:	d80f      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bee:	d00e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005bf0:	e009      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fcdb 	bl	80065b4 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005c04:	e004      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8005c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10d      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005c18:	4b4f      	ldr	r3, [pc, #316]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c1e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c32:	e003      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005c38:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c56:	460b      	mov	r3, r1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	d03f      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d81e      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005caf 	.word	0x08005caf
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c93 	.word	0x08005c93
 8005c7c:	08005caf 	.word	0x08005caf
 8005c80:	08005caf 	.word	0x08005caf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c84:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c90:	e00e      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c96:	332c      	adds	r3, #44	@ 0x2c
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fd23 	bl	80066e4 <RCCEx_PLL3_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005ca4:	e004      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8005cae:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005cb0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10d      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005cb8:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cbe:	f023 0107 	bic.w	r1, r3, #7
 8005cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cca:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005cd8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cea:	2300      	movs	r3, #0
 8005cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	d04c      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d04:	d02a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d0a:	d821      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8005d0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d10:	d026      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8005d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d16:	d81b      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1c:	d00e      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d22:	d815      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d110      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d38:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d3a:	e014      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d40:	332c      	adds	r3, #44	@ 0x2c
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fcce 	bl	80066e4 <RCCEx_PLL3_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005d56:	e006      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005d58:	46020c00 	.word	0x46020c00
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8005d64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10d      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005d6e:	4baf      	ldr	r3, [pc, #700]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d80:	4aaa      	ldr	r2, [pc, #680]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005d8e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005da0:	2300      	movs	r3, #0
 8005da2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005da4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005da8:	460b      	mov	r3, r1
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f000 80b5 	beq.w	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db6:	4b9d      	ldr	r3, [pc, #628]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d113      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc4:	4b99      	ldr	r3, [pc, #612]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	4a98      	ldr	r2, [pc, #608]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005dcc:	f043 0304 	orr.w	r3, r3, #4
 8005dd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005dd4:	4b95      	ldr	r3, [pc, #596]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005de2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005dec:	4b90      	ldr	r3, [pc, #576]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	4a8f      	ldr	r2, [pc, #572]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df8:	f7fb fbae 	bl	8001558 <HAL_GetTick>
 8005dfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e00:	e00b      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fb fba9 	bl	8001558 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d903      	bls.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005e18:	e005      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e1a:	4b85      	ldr	r3, [pc, #532]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0ed      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8005e26:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d165      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e38:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d023      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x808>
 8005e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e48:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01b      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e54:	4b75      	ldr	r3, [pc, #468]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e62:	4b72      	ldr	r3, [pc, #456]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e68:	4a70      	ldr	r2, [pc, #448]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e72:	4b6e      	ldr	r3, [pc, #440]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e78:	4a6c      	ldr	r2, [pc, #432]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e82:	4a6a      	ldr	r2, [pc, #424]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb fb5e 	bl	8001558 <HAL_GetTick>
 8005e9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea0:	e00d      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fb fb59 	bl	8001558 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0ea      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8005ecc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10d      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005ed4:	4b55      	ldr	r3, [pc, #340]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005ee6:	4a51      	ldr	r2, [pc, #324]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005eee:	e008      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005ef4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8005ef8:	e003      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005efe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f02:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d107      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0a:	4b48      	ldr	r3, [pc, #288]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f10:	4a46      	ldr	r2, [pc, #280]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005f12:	f023 0304 	bic.w	r3, r3, #4
 8005f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f28:	2300      	movs	r3, #0
 8005f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005f30:	460b      	mov	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d042      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f42:	d022      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x906>
 8005f44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f48:	d81b      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f4e:	d011      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f54:	d815      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f5e:	d110      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f64:	3308      	adds	r3, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fb24 	bl	80065b4 <RCCEx_PLL2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005f72:	e00d      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4b2d      	ldr	r3, [pc, #180]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	4a2c      	ldr	r2, [pc, #176]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8005f8e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f90:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005f98:	4b24      	ldr	r3, [pc, #144]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005faa:	4a20      	ldr	r2, [pc, #128]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005fb8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fca:	2300      	movs	r3, #0
 8005fcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d031      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	d804      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff4:	d007      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005ffc:	e004      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8006006:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006008:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800600c:	2b00      	cmp	r3, #0
 800600e:	d111      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006010:	4b06      	ldr	r3, [pc, #24]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800601e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006022:	4a02      	ldr	r2, [pc, #8]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006024:	430b      	orrs	r3, r1
 8006026:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800602a:	e007      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800602c:	46020c00 	.word	0x46020c00
 8006030:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006038:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800603c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800604a:	2300      	movs	r3, #0
 800604c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800604e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d00c      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006058:	4bb2      	ldr	r3, [pc, #712]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800605a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800605e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800606a:	4aae      	ldr	r2, [pc, #696]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800606c:	430b      	orrs	r3, r1
 800606e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006080:	2300      	movs	r3, #0
 8006082:	657b      	str	r3, [r7, #84]	@ 0x54
 8006084:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d019      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800608e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800609c:	4ba1      	ldr	r3, [pc, #644]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	4aa0      	ldr	r2, [pc, #640]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80060a8:	4b9e      	ldr	r3, [pc, #632]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ae:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80060b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060ba:	4a9a      	ldr	r2, [pc, #616]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80060c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80060ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d0:	2300      	movs	r3, #0
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d00c      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80060de:	4b91      	ldr	r3, [pc, #580]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80060f0:	4a8c      	ldr	r2, [pc, #560]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80060f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006104:	643b      	str	r3, [r7, #64]	@ 0x40
 8006106:	2300      	movs	r3, #0
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
 800610a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800610e:	460b      	mov	r3, r1
 8006110:	4313      	orrs	r3, r2
 8006112:	d00c      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006114:	4b83      	ldr	r3, [pc, #524]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800611e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006122:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006126:	4a7f      	ldr	r2, [pc, #508]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006128:	430b      	orrs	r3, r1
 800612a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800612e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800613a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006140:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d00c      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800614a:	4b76      	ldr	r3, [pc, #472]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800614c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006150:	f023 0118 	bic.w	r1, r3, #24
 8006154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006158:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800615c:	4a71      	ldr	r2, [pc, #452]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800615e:	430b      	orrs	r3, r1
 8006160:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
 8006172:	2300      	movs	r3, #0
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
 8006176:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800617a:	460b      	mov	r3, r1
 800617c:	4313      	orrs	r3, r2
 800617e:	d032      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006184:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006188:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800618c:	d105      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618e:	4b65      	ldr	r3, [pc, #404]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006192:	4a64      	ldr	r2, [pc, #400]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006198:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800619a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800619e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061a6:	d108      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ac:	3308      	adds	r3, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa00 	bl	80065b4 <RCCEx_PLL2_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 80061ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80061c2:	4b58      	ldr	r3, [pc, #352]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061d4:	4a53      	ldr	r2, [pc, #332]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061dc:	e003      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80061e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80061e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	2100      	movs	r1, #0
 80061f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d04a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8006202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006206:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800620a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800620e:	d01e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8006210:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006214:	d825      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8006216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800621a:	d00e      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800621c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006220:	d81f      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d021      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8006226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622a:	d11a      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622c:	4b3d      	ldr	r3, [pc, #244]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	4a3c      	ldr	r2, [pc, #240]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006236:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006238:	e018      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800623a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623e:	3308      	adds	r3, #8
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f9b7 	bl	80065b4 <RCCEx_PLL2_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800624c:	e00e      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800624e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006252:	332c      	adds	r3, #44	@ 0x2c
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fa45 	bl	80066e4 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006260:	e004      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006268:	e000      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800626a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10d      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800627a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006282:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006286:	4927      	ldr	r1, [pc, #156]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006294:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	2300      	movs	r3, #0
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80062ae:	460b      	mov	r3, r1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	d03d      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062c0:	d00e      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80062c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062c6:	d815      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d017      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80062cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d0:	d110      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d2:	4b14      	ldr	r3, [pc, #80]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	4a13      	ldr	r2, [pc, #76]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80062de:	e00e      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e4:	3308      	adds	r3, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f964 	bl	80065b4 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062fe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006302:	2b00      	cmp	r3, #0
 8006304:	d110      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006306:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800630c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	4902      	ldr	r1, [pc, #8]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006320:	e006      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006322:	bf00      	nop
 8006324:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800632c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006346:	460b      	mov	r3, r1
 8006348:	4313      	orrs	r3, r2
 800634a:	d00c      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800634c:	4b68      	ldr	r3, [pc, #416]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800634e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006352:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800635a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800635e:	4964      	ldr	r1, [pc, #400]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	2100      	movs	r1, #0
 8006370:	6139      	str	r1, [r7, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800638e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006392:	d113      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006398:	3308      	adds	r3, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f90a 	bl	80065b4 <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80063a6:	e00d      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ac:	332c      	adds	r3, #44	@ 0x2c
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f998 	bl	80066e4 <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80063c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10d      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80063cc:	4b48      	ldr	r3, [pc, #288]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80063ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80063de:	4944      	ldr	r1, [pc, #272]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80063ec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	2100      	movs	r1, #0
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d024      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d108      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800641c:	332c      	adds	r3, #44	@ 0x2c
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f960 	bl	80066e4 <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800642a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8006432:	4b2f      	ldr	r3, [pc, #188]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8006434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006438:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800643c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006444:	492a      	ldr	r1, [pc, #168]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006452:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8006456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	2100      	movs	r1, #0
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	e9d7 1200 	ldrd	r1, r2, [r7]
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d036      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8006472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800647a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800647e:	d00d      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8006480:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006484:	d811      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8006486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800648a:	d012      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800648c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006490:	d80b      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649a:	d106      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800649c:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	4a13      	ldr	r2, [pc, #76]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80064a8:	e004      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 80064b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80064be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80064c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80064ce:	4908      	ldr	r1, [pc, #32]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80064dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80064e0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80064ea:	46bd      	mov	sp, r7
 80064ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f0:	46020c00 	.word	0x46020c00

080064f4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 80064f8:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <HAL_RCCEx_EnableLSECSS+0x20>)
 80064fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064fe:	4a05      	ldr	r2, [pc, #20]	@ (8006514 <HAL_RCCEx_EnableLSECSS+0x20>)
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	46020c00 	.word	0x46020c00

08006518 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 8006524:	2300      	movs	r3, #0
 8006526:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006528:	4b20      	ldr	r3, [pc, #128]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 800652a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d110      	bne.n	8006558 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4b1d      	ldr	r3, [pc, #116]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 8006538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800653c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 800653e:	f043 0304 	orr.w	r3, r3, #4
 8006542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006558:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <HAL_RCCEx_EnableLSCO+0x98>)
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 8006564:	f7fd fc8a 	bl	8003e7c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8006568:	2301      	movs	r3, #1
 800656a:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800656c:	4b0f      	ldr	r3, [pc, #60]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 800656e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	4a0c      	ldr	r2, [pc, #48]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 800657c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 800658a:	f7fd fc87 	bl	8003e9c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d107      	bne.n	80065a4 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 8006596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800659a:	4a04      	ldr	r2, [pc, #16]	@ (80065ac <HAL_RCCEx_EnableLSCO+0x94>)
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	46020c00 	.word	0x46020c00
 80065b0:	46020800 	.word	0x46020800

080065b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80065bc:	4b47      	ldr	r3, [pc, #284]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a46      	ldr	r2, [pc, #280]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80065c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065c8:	f7fa ffc6 	bl	8001558 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065ce:	e008      	b.n	80065e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065d0:	f7fa ffc2 	bl	8001558 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e077      	b.n	80066d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065e2:	4b3e      	ldr	r3, [pc, #248]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80065ee:	4b3b      	ldr	r3, [pc, #236]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6852      	ldr	r2, [r2, #4]
 8006602:	3a01      	subs	r2, #1
 8006604:	0212      	lsls	r2, r2, #8
 8006606:	430a      	orrs	r2, r1
 8006608:	4934      	ldr	r1, [pc, #208]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800660a:	4313      	orrs	r3, r2
 800660c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800660e:	4b33      	ldr	r3, [pc, #204]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006612:	4b33      	ldr	r3, [pc, #204]	@ (80066e0 <RCCEx_PLL2_Config+0x12c>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	3a01      	subs	r2, #1
 800661c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68d2      	ldr	r2, [r2, #12]
 8006624:	3a01      	subs	r2, #1
 8006626:	0252      	lsls	r2, r2, #9
 8006628:	b292      	uxth	r2, r2
 800662a:	4311      	orrs	r1, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6912      	ldr	r2, [r2, #16]
 8006630:	3a01      	subs	r2, #1
 8006632:	0412      	lsls	r2, r2, #16
 8006634:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006638:	4311      	orrs	r1, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6952      	ldr	r2, [r2, #20]
 800663e:	3a01      	subs	r2, #1
 8006640:	0612      	lsls	r2, r2, #24
 8006642:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006646:	430a      	orrs	r2, r1
 8006648:	4924      	ldr	r1, [pc, #144]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800664a:	4313      	orrs	r3, r2
 800664c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800664e:	4b23      	ldr	r3, [pc, #140]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	f023 020c 	bic.w	r2, r3, #12
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	4920      	ldr	r1, [pc, #128]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800665c:	4313      	orrs	r3, r2
 800665e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006660:	4b1e      	ldr	r3, [pc, #120]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	491c      	ldr	r1, [pc, #112]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800666a:	4313      	orrs	r3, r2
 800666c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800666e:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	4a1a      	ldr	r2, [pc, #104]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006674:	f023 0310 	bic.w	r3, r3, #16
 8006678:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800667a:	4b18      	ldr	r3, [pc, #96]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006682:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	69d2      	ldr	r2, [r2, #28]
 800668a:	00d2      	lsls	r2, r2, #3
 800668c:	4913      	ldr	r1, [pc, #76]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 800668e:	4313      	orrs	r3, r2
 8006690:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006692:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	4a11      	ldr	r2, [pc, #68]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 8006698:	f043 0310 	orr.w	r3, r3, #16
 800669c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800669e:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a0e      	ldr	r2, [pc, #56]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80066a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066aa:	f7fa ff55 	bl	8001558 <HAL_GetTick>
 80066ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066b0:	e008      	b.n	80066c4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066b2:	f7fa ff51 	bl	8001558 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066c4:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <RCCEx_PLL2_Config+0x128>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0f0      	beq.n	80066b2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0

}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	46020c00 	.word	0x46020c00
 80066e0:	80800000 	.word	0x80800000

080066e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80066ec:	4b47      	ldr	r3, [pc, #284]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a46      	ldr	r2, [pc, #280]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80066f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066f8:	f7fa ff2e 	bl	8001558 <HAL_GetTick>
 80066fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066fe:	e008      	b.n	8006712 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006700:	f7fa ff2a 	bl	8001558 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e077      	b.n	8006802 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006712:	4b3e      	ldr	r3, [pc, #248]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800671e:	4b3b      	ldr	r3, [pc, #236]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6811      	ldr	r1, [r2, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6852      	ldr	r2, [r2, #4]
 8006732:	3a01      	subs	r2, #1
 8006734:	0212      	lsls	r2, r2, #8
 8006736:	430a      	orrs	r2, r1
 8006738:	4934      	ldr	r1, [pc, #208]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 800673a:	4313      	orrs	r3, r2
 800673c:	630b      	str	r3, [r1, #48]	@ 0x30
 800673e:	4b33      	ldr	r3, [pc, #204]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 8006740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006742:	4b33      	ldr	r3, [pc, #204]	@ (8006810 <RCCEx_PLL3_Config+0x12c>)
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6892      	ldr	r2, [r2, #8]
 800674a:	3a01      	subs	r2, #1
 800674c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	68d2      	ldr	r2, [r2, #12]
 8006754:	3a01      	subs	r2, #1
 8006756:	0252      	lsls	r2, r2, #9
 8006758:	b292      	uxth	r2, r2
 800675a:	4311      	orrs	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6912      	ldr	r2, [r2, #16]
 8006760:	3a01      	subs	r2, #1
 8006762:	0412      	lsls	r2, r2, #16
 8006764:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006768:	4311      	orrs	r1, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6952      	ldr	r2, [r2, #20]
 800676e:	3a01      	subs	r2, #1
 8006770:	0612      	lsls	r2, r2, #24
 8006772:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006776:	430a      	orrs	r2, r1
 8006778:	4924      	ldr	r1, [pc, #144]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 800677a:	4313      	orrs	r3, r2
 800677c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800677e:	4b23      	ldr	r3, [pc, #140]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006782:	f023 020c 	bic.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	4920      	ldr	r1, [pc, #128]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 800678c:	4313      	orrs	r3, r2
 800678e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006790:	4b1e      	ldr	r3, [pc, #120]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 8006792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	491c      	ldr	r1, [pc, #112]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 800679a:	4313      	orrs	r3, r2
 800679c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800679e:	4b1b      	ldr	r3, [pc, #108]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067a4:	f023 0310 	bic.w	r3, r3, #16
 80067a8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067aa:	4b18      	ldr	r3, [pc, #96]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	69d2      	ldr	r2, [r2, #28]
 80067ba:	00d2      	lsls	r2, r2, #3
 80067bc:	4913      	ldr	r1, [pc, #76]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80067c2:	4b12      	ldr	r3, [pc, #72]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c6:	4a11      	ldr	r2, [pc, #68]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067c8:	f043 0310 	orr.w	r3, r3, #16
 80067cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80067ce:	4b0f      	ldr	r3, [pc, #60]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a0e      	ldr	r2, [pc, #56]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067da:	f7fa febd 	bl	8001558 <HAL_GetTick>
 80067de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067e0:	e008      	b.n	80067f4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067e2:	f7fa feb9 	bl	8001558 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <RCCEx_PLL3_Config+0x128>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f0      	beq.n	80067e2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	46020c00 	.word	0x46020c00
 8006810:	80800000 	.word	0x80800000

08006814 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d071      	beq.n	800690a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa fcee 	bl	800121c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006848:	4b32      	ldr	r3, [pc, #200]	@ (8006914 <HAL_RTC_Init+0x100>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	d051      	beq.n	80068f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006854:	4b2f      	ldr	r3, [pc, #188]	@ (8006914 <HAL_RTC_Init+0x100>)
 8006856:	22ca      	movs	r2, #202	@ 0xca
 8006858:	625a      	str	r2, [r3, #36]	@ 0x24
 800685a:	4b2e      	ldr	r3, [pc, #184]	@ (8006914 <HAL_RTC_Init+0x100>)
 800685c:	2253      	movs	r2, #83	@ 0x53
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f88b 	bl	800697c <RTC_EnterInitMode>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d13f      	bne.n	80068f0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006870:	4b28      	ldr	r3, [pc, #160]	@ (8006914 <HAL_RTC_Init+0x100>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	4a27      	ldr	r2, [pc, #156]	@ (8006914 <HAL_RTC_Init+0x100>)
 8006876:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800687a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800687e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006880:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <HAL_RTC_Init+0x100>)
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4319      	orrs	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	430b      	orrs	r3, r1
 8006894:	491f      	ldr	r1, [pc, #124]	@ (8006914 <HAL_RTC_Init+0x100>)
 8006896:	4313      	orrs	r3, r2
 8006898:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	491b      	ldr	r1, [pc, #108]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80068aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	430b      	orrs	r3, r1
 80068bc:	4915      	ldr	r1, [pc, #84]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f896 	bl	80069f4 <RTC_ExitInitMode>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10e      	bne.n	80068f0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80068d2:	4b10      	ldr	r3, [pc, #64]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a19      	ldr	r1, [r3, #32]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	4319      	orrs	r1, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	430b      	orrs	r3, r1
 80068ea:	490a      	ldr	r1, [pc, #40]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f0:	4b08      	ldr	r3, [pc, #32]	@ (8006914 <HAL_RTC_Init+0x100>)
 80068f2:	22ff      	movs	r2, #255	@ 0xff
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80068f6:	e001      	b.n	80068fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800690a:	7bfb      	ldrb	r3, [r7, #15]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	46007800 	.word	0x46007800

08006918 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006920:	4b15      	ldr	r3, [pc, #84]	@ (8006978 <HAL_RTC_WaitForSynchro+0x60>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4a14      	ldr	r2, [pc, #80]	@ (8006978 <HAL_RTC_WaitForSynchro+0x60>)
 8006926:	f023 0320 	bic.w	r3, r3, #32
 800692a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800692c:	f7fa fe14 	bl	8001558 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006932:	e013      	b.n	800695c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006934:	f7fa fe10 	bl	8001558 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006942:	d90b      	bls.n	800695c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006944:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <HAL_RTC_WaitForSynchro+0x60>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10c      	bne.n	800696a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2203      	movs	r2, #3
 8006954:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e008      	b.n	800696e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_RTC_WaitForSynchro+0x60>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0e5      	beq.n	8006934 <HAL_RTC_WaitForSynchro+0x1c>
 8006968:	e000      	b.n	800696c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800696a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	46007800 	.word	0x46007800

0800697c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006988:	4b19      	ldr	r3, [pc, #100]	@ (80069f0 <RTC_EnterInitMode+0x74>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d128      	bne.n	80069e6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006994:	4b16      	ldr	r3, [pc, #88]	@ (80069f0 <RTC_EnterInitMode+0x74>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <RTC_EnterInitMode+0x74>)
 800699a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800699e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80069a0:	f7fa fdda 	bl	8001558 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069a6:	e013      	b.n	80069d0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069a8:	f7fa fdd6 	bl	8001558 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b6:	d90b      	bls.n	80069d0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <RTC_EnterInitMode+0x74>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10f      	bne.n	80069e4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069d0:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <RTC_EnterInitMode+0x74>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <RTC_EnterInitMode+0x6a>
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d1e2      	bne.n	80069a8 <RTC_EnterInitMode+0x2c>
 80069e2:	e000      	b.n	80069e6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80069e4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	46007800 	.word	0x46007800

080069f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a00:	4b1a      	ldr	r3, [pc, #104]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a19      	ldr	r2, [pc, #100]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a0a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a0c:	4b17      	ldr	r3, [pc, #92]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10c      	bne.n	8006a32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff ff7d 	bl	8006918 <HAL_RTC_WaitForSynchro>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01e      	beq.n	8006a62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2203      	movs	r2, #3
 8006a28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	73fb      	strb	r3, [r7, #15]
 8006a30:	e017      	b.n	8006a62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a32:	4b0e      	ldr	r3, [pc, #56]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff6a 	bl	8006918 <HAL_RTC_WaitForSynchro>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	4a04      	ldr	r2, [pc, #16]	@ (8006a6c <RTC_ExitInitMode+0x78>)
 8006a5c:	f043 0320 	orr.w	r3, r3, #32
 8006a60:	6193      	str	r3, [r2, #24]
  }
  return status;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	46007800 	.word	0x46007800

08006a70 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	4910      	ldr	r1, [pc, #64]	@ (8006ac4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	490c      	ldr	r1, [pc, #48]	@ (8006ac8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6919      	ldr	r1, [r3, #16]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	4905      	ldr	r1, [pc, #20]	@ (8006ac8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	46007800 	.word	0x46007800
 8006ac8:	46007c00 	.word	0x46007c00

08006acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e049      	b.n	8006b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f841 	bl	8006b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f000 fa58 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d001      	beq.n	8006ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e072      	b.n	8006c8e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <HAL_TIM_Base_Start_IT+0x10c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d040      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a34      	ldr	r2, [pc, #208]	@ (8006ca0 <HAL_TIM_Base_Start_IT+0x110>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d03b      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bdc:	d036      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be6:	d031      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2d      	ldr	r2, [pc, #180]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0x114>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d02c      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca8 <HAL_TIM_Base_Start_IT+0x118>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d027      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <HAL_TIM_Base_Start_IT+0x11c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d022      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a29      	ldr	r2, [pc, #164]	@ (8006cb0 <HAL_TIM_Base_Start_IT+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d01d      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <HAL_TIM_Base_Start_IT+0x124>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a26      	ldr	r2, [pc, #152]	@ (8006cb8 <HAL_TIM_Base_Start_IT+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a24      	ldr	r2, [pc, #144]	@ (8006cbc <HAL_TIM_Base_Start_IT+0x12c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a23      	ldr	r2, [pc, #140]	@ (8006cc0 <HAL_TIM_Base_Start_IT+0x130>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a21      	ldr	r2, [pc, #132]	@ (8006cc4 <HAL_TIM_Base_Start_IT+0x134>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0xbc>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a20      	ldr	r2, [pc, #128]	@ (8006cc8 <HAL_TIM_Base_Start_IT+0x138>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d115      	bne.n	8006c78 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	4b1e      	ldr	r3, [pc, #120]	@ (8006ccc <HAL_TIM_Base_Start_IT+0x13c>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d015      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0xfa>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c64:	d011      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e000      	b.n	8006c8c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	50012c00 	.word	0x50012c00
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	50000400 	.word	0x50000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	50000800 	.word	0x50000800
 8006cb4:	40000c00 	.word	0x40000c00
 8006cb8:	50000c00 	.word	0x50000c00
 8006cbc:	40013400 	.word	0x40013400
 8006cc0:	50013400 	.word	0x50013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	50014000 	.word	0x50014000
 8006ccc:	00010007 	.word	0x00010007

08006cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d020      	beq.n	8006d34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01b      	beq.n	8006d34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0202 	mvn.w	r2, #2
 8006d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f931 	bl	8006f82 <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f923 	bl	8006f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f934 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d020      	beq.n	8006d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0204 	mvn.w	r2, #4
 8006d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f90b 	bl	8006f82 <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8fd 	bl	8006f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f90e 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d020      	beq.n	8006dcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01b      	beq.n	8006dcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0208 	mvn.w	r2, #8
 8006d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2204      	movs	r2, #4
 8006da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8e5 	bl	8006f82 <HAL_TIM_IC_CaptureCallback>
 8006db8:	e005      	b.n	8006dc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f8d7 	bl	8006f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8e8 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d020      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0210 	mvn.w	r2, #16
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2208      	movs	r2, #8
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8bf 	bl	8006f82 <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8b1 	bl	8006f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8c2 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0201 	mvn.w	r2, #1
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fa f82c 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00c      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f9bb 	bl	80071e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9b3 	bl	80071f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f87c 	bl	8006faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00c      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f06f 0220 	mvn.w	r2, #32
 8006ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f97b 	bl	80071cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f987 	bl	8007208 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00c      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f97f 	bl	800721c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f977 	bl	8007230 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f96f 	bl	8007244 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800718c <TIM_Base_SetConfig+0x1cc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02b      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a6d      	ldr	r2, [pc, #436]	@ (8007190 <TIM_Base_SetConfig+0x1d0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d027      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe6:	d023      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fee:	d01f      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a68      	ldr	r2, [pc, #416]	@ (8007194 <TIM_Base_SetConfig+0x1d4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d01b      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a67      	ldr	r2, [pc, #412]	@ (8007198 <TIM_Base_SetConfig+0x1d8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d017      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a66      	ldr	r2, [pc, #408]	@ (800719c <TIM_Base_SetConfig+0x1dc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a65      	ldr	r2, [pc, #404]	@ (80071a0 <TIM_Base_SetConfig+0x1e0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00f      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a64      	ldr	r2, [pc, #400]	@ (80071a4 <TIM_Base_SetConfig+0x1e4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a63      	ldr	r2, [pc, #396]	@ (80071a8 <TIM_Base_SetConfig+0x1e8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a62      	ldr	r2, [pc, #392]	@ (80071ac <TIM_Base_SetConfig+0x1ec>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0x70>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a61      	ldr	r2, [pc, #388]	@ (80071b0 <TIM_Base_SetConfig+0x1f0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d108      	bne.n	8007042 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a51      	ldr	r2, [pc, #324]	@ (800718c <TIM_Base_SetConfig+0x1cc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d043      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a50      	ldr	r2, [pc, #320]	@ (8007190 <TIM_Base_SetConfig+0x1d0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d03f      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007058:	d03b      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007060:	d037      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a4b      	ldr	r2, [pc, #300]	@ (8007194 <TIM_Base_SetConfig+0x1d4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d033      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a4a      	ldr	r2, [pc, #296]	@ (8007198 <TIM_Base_SetConfig+0x1d8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d02f      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a49      	ldr	r2, [pc, #292]	@ (800719c <TIM_Base_SetConfig+0x1dc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d02b      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a48      	ldr	r2, [pc, #288]	@ (80071a0 <TIM_Base_SetConfig+0x1e0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a47      	ldr	r2, [pc, #284]	@ (80071a4 <TIM_Base_SetConfig+0x1e4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d023      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a46      	ldr	r2, [pc, #280]	@ (80071a8 <TIM_Base_SetConfig+0x1e8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01f      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a45      	ldr	r2, [pc, #276]	@ (80071ac <TIM_Base_SetConfig+0x1ec>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01b      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a44      	ldr	r2, [pc, #272]	@ (80071b0 <TIM_Base_SetConfig+0x1f0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d017      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a43      	ldr	r2, [pc, #268]	@ (80071b4 <TIM_Base_SetConfig+0x1f4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a42      	ldr	r2, [pc, #264]	@ (80071b8 <TIM_Base_SetConfig+0x1f8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a41      	ldr	r2, [pc, #260]	@ (80071bc <TIM_Base_SetConfig+0x1fc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a40      	ldr	r2, [pc, #256]	@ (80071c0 <TIM_Base_SetConfig+0x200>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a3f      	ldr	r2, [pc, #252]	@ (80071c4 <TIM_Base_SetConfig+0x204>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_Base_SetConfig+0x112>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a3e      	ldr	r2, [pc, #248]	@ (80071c8 <TIM_Base_SetConfig+0x208>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a20      	ldr	r2, [pc, #128]	@ (800718c <TIM_Base_SetConfig+0x1cc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d023      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <TIM_Base_SetConfig+0x1d0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d01f      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a24      	ldr	r2, [pc, #144]	@ (80071ac <TIM_Base_SetConfig+0x1ec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01b      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a23      	ldr	r2, [pc, #140]	@ (80071b0 <TIM_Base_SetConfig+0x1f0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d017      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a22      	ldr	r2, [pc, #136]	@ (80071b4 <TIM_Base_SetConfig+0x1f4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a21      	ldr	r2, [pc, #132]	@ (80071b8 <TIM_Base_SetConfig+0x1f8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00f      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a20      	ldr	r2, [pc, #128]	@ (80071bc <TIM_Base_SetConfig+0x1fc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00b      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a1f      	ldr	r2, [pc, #124]	@ (80071c0 <TIM_Base_SetConfig+0x200>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d007      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a1e      	ldr	r2, [pc, #120]	@ (80071c4 <TIM_Base_SetConfig+0x204>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_Base_SetConfig+0x198>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <TIM_Base_SetConfig+0x208>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d103      	bne.n	8007160 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b01      	cmp	r3, #1
 8007170:	d105      	bne.n	800717e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f023 0201 	bic.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]
  }
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	50012c00 	.word	0x50012c00
 8007194:	40000400 	.word	0x40000400
 8007198:	50000400 	.word	0x50000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	50000800 	.word	0x50000800
 80071a4:	40000c00 	.word	0x40000c00
 80071a8:	50000c00 	.word	0x50000c00
 80071ac:	40013400 	.word	0x40013400
 80071b0:	50013400 	.word	0x50013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	50014000 	.word	0x50014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	50014400 	.word	0x50014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	50014800 	.word	0x50014800

080071cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <__libc_init_array>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4d0d      	ldr	r5, [pc, #52]	@ (80072a0 <__libc_init_array+0x38>)
 800726c:	2600      	movs	r6, #0
 800726e:	4c0d      	ldr	r4, [pc, #52]	@ (80072a4 <__libc_init_array+0x3c>)
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	42a6      	cmp	r6, r4
 8007276:	d109      	bne.n	800728c <__libc_init_array+0x24>
 8007278:	4d0b      	ldr	r5, [pc, #44]	@ (80072a8 <__libc_init_array+0x40>)
 800727a:	2600      	movs	r6, #0
 800727c:	4c0b      	ldr	r4, [pc, #44]	@ (80072ac <__libc_init_array+0x44>)
 800727e:	f000 f817 	bl	80072b0 <_init>
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	42a6      	cmp	r6, r4
 8007288:	d105      	bne.n	8007296 <__libc_init_array+0x2e>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007290:	3601      	adds	r6, #1
 8007292:	4798      	blx	r3
 8007294:	e7ee      	b.n	8007274 <__libc_init_array+0xc>
 8007296:	f855 3b04 	ldr.w	r3, [r5], #4
 800729a:	3601      	adds	r6, #1
 800729c:	4798      	blx	r3
 800729e:	e7f2      	b.n	8007286 <__libc_init_array+0x1e>
 80072a0:	080073a0 	.word	0x080073a0
 80072a4:	080073a0 	.word	0x080073a0
 80072a8:	080073a0 	.word	0x080073a0
 80072ac:	080073a4 	.word	0x080073a4

080072b0 <_init>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	bf00      	nop
 80072b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b6:	bc08      	pop	{r3}
 80072b8:	469e      	mov	lr, r3
 80072ba:	4770      	bx	lr

080072bc <_fini>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr
