
blink_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  0800684c  0800684c  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800684c  0800684c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0000784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006850  08006850  00007850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006854  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08006860  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08006860  0000818c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018062  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d99  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00022e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001241  00000000  00000000  00024610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000415e6  00000000  00000000  00025851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b91  00000000  00000000  00066e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a08cd  00000000  00000000  000809c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00221295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006754  00000000  00000000  002212d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00227a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	0800675c 	.word	0x0800675c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	0800675c 	.word	0x0800675c

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 ffc6 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f81a 	bl	80002f4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80002c0:	f000 f888 	bl	80003d4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f9a0 	bl	8000608 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80002c8:	f000 f902 	bl	80004d0 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80002cc:	f000 f916 	bl	80004fc <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80002d0:	f000 f940 	bl	8000554 <MX_ICACHE_Init>
  MX_RTC_Init();
 80002d4:	f000 f94a 	bl	800056c <MX_RTC_Init>
  MX_ADC1_Init();
 80002d8:	f000 f88a 	bl	80003f0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIO1_GPIO_Port, GPIO1_Pin);
 80002dc:	2104      	movs	r1, #4
 80002de:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <main+0x3c>)
 80002e0:	f003 f836 	bl	8003350 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e8:	f000 fffe 	bl	80012e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIO1_GPIO_Port, GPIO1_Pin);
 80002ec:	bf00      	nop
 80002ee:	e7f5      	b.n	80002dc <main+0x28>
 80002f0:	42020800 	.word	0x42020800

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09e      	sub	sp, #120	@ 0x78
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2260      	movs	r2, #96	@ 0x60
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f006 f9fe 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
 8000316:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000318:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800031c:	f003 f862 	bl	80033e4 <HAL_PWREx_ControlVoltageScaling>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000326:	f000 fcff 	bl	8000d28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800032a:	f003 f83b 	bl	80033a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800032e:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <SystemClock_Config+0xdc>)
 8000330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000334:	4a26      	ldr	r2, [pc, #152]	@ (80003d0 <SystemClock_Config+0xdc>)
 8000336:	f023 0318 	bic.w	r3, r3, #24
 800033a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800033e:	2307      	movs	r3, #7
 8000340:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000348:	2381      	movs	r3, #129	@ 0x81
 800034a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000350:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035a:	2303      	movs	r3, #3
 800035c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000366:	2314      	movs	r3, #20
 8000368:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800036a:	2302      	movs	r3, #2
 800036c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800036e:	2302      	movs	r3, #2
 8000370:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000372:	2302      	movs	r3, #2
 8000374:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000376:	230c      	movs	r3, #12
 8000378:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f003 f92a 	bl	80035dc <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800038e:	f000 fccb 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	231f      	movs	r3, #31
 8000394:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2303      	movs	r3, #3
 8000398:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fff0 	bl	8004394 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80003ba:	f000 fcb5 	bl	8000d28 <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80003be:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80003c2:	f005 faff 	bl	80059c4 <HAL_RCCEx_EnableLSCO>
}
 80003c6:	bf00      	nop
 80003c8:	3778      	adds	r7, #120	@ 0x78
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	46020c00 	.word	0x46020c00

080003d4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80003d8:	f003 f8e0 	bl	800359c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80003dc:	2002      	movs	r0, #2
 80003de:	f003 f88d 	bl	80034fc <HAL_PWREx_ConfigSupply>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemPower_Config+0x18>
  {
    Error_Handler();
 80003e8:	f000 fc9e 	bl	8000d28 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f6:	463b      	mov	r3, r7
 80003f8:	2220      	movs	r2, #32
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f006 f981 	bl	8006704 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000402:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000404:	4a30      	ldr	r2, [pc, #192]	@ (80004c8 <MX_ADC1_Init+0xd8>)
 8000406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000408:	4b2e      	ldr	r3, [pc, #184]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800040e:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000414:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b2a      	ldr	r3, [pc, #168]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000420:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000426:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000428:	2204      	movs	r2, #4
 800042a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042c:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800042e:	2200      	movs	r2, #0
 8000430:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b24      	ldr	r3, [pc, #144]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800043c:	2201      	movs	r2, #1
 800043e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b20      	ldr	r3, [pc, #128]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000448:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800044a:	2200      	movs	r2, #0
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044e:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000450:	2200      	movs	r2, #0
 8000452:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000456:	2200      	movs	r2, #0
 8000458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800045c:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800045e:	2200      	movs	r2, #0
 8000460:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000468:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800046a:	2200      	movs	r2, #0
 800046c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000470:	2200      	movs	r2, #0
 8000472:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047c:	4811      	ldr	r0, [pc, #68]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 800047e:	f001 fa8d 	bl	800199c <HAL_ADC_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000488:	f000 fc4e 	bl	8000d28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800048e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	2306      	movs	r3, #6
 8000492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000498:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800049c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049e:	2304      	movs	r3, #4
 80004a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	4619      	mov	r1, r3
 80004aa:	4806      	ldr	r0, [pc, #24]	@ (80004c4 <MX_ADC1_Init+0xd4>)
 80004ac:	f001 fd5e 	bl	8001f6c <HAL_ADC_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80004b6:	f000 fc37 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000028 	.word	0x20000028
 80004c8:	42028000 	.word	0x42028000
 80004cc:	20000100 	.word	0x20000100

080004d0 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_DCACHE1_Init+0x24>)
 80004d6:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <MX_DCACHE1_Init+0x28>)
 80004d8:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_DCACHE1_Init+0x24>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_DCACHE1_Init+0x24>)
 80004e2:	f002 fc99 	bl	8002e18 <HAL_DCACHE_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80004ec:	f000 fc1c 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000b4 	.word	0x200000b4
 80004f8:	40031400 	.word	0x40031400

080004fc <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_DCACHE2_Init+0x4c>)
 8000504:	4a11      	ldr	r2, [pc, #68]	@ (800054c <MX_DCACHE2_Init+0x50>)
 8000506:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_DCACHE2_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 800050e:	480e      	ldr	r0, [pc, #56]	@ (8000548 <MX_DCACHE2_Init+0x4c>)
 8000510:	f002 fc82 	bl	8002e18 <HAL_DCACHE_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 800051a:	f000 fc05 	bl	8000d28 <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_DCACHE2_Init+0x54>)
 8000520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <MX_DCACHE2_Init+0x54>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_DCACHE2_Init+0x54>)
 8000530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 800053c:	f000 ff44 	bl	80013c8 <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000e0 	.word	0x200000e0
 800054c:	40031800 	.word	0x40031800
 8000550:	46020c00 	.word	0x46020c00

08000554 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000558:	f002 ff14 	bl	8003384 <HAL_ICACHE_Enable>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000562:	f000 fbe1 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_RTC_Init+0x94>)
 8000586:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <MX_RTC_Init+0x98>)
 8000588:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800058a:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <MX_RTC_Init+0x94>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000590:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_RTC_Init+0x94>)
 8000592:	227f      	movs	r2, #127	@ 0x7f
 8000594:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_RTC_Init+0x94>)
 8000598:	22ff      	movs	r2, #255	@ 0xff
 800059a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_RTC_Init+0x94>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_RTC_Init+0x94>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_RTC_Init+0x94>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_RTC_Init+0x94>)
 80005b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_RTC_Init+0x94>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_RTC_Init+0x94>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <MX_RTC_Init+0x94>)
 80005c4:	f005 fb7c 	bl	8005cc0 <HAL_RTC_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80005ce:	f000 fbab 	bl	8000d28 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <MX_RTC_Init+0x94>)
 80005e8:	f005 fc98 	bl	8005f1c <HAL_RTCEx_PrivilegeModeSet>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80005f2:	f000 fb99 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000010c 	.word	0x2000010c
 8000604:	46007800 	.word	0x46007800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08e      	sub	sp, #56	@ 0x38
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4bbf      	ldr	r3, [pc, #764]	@ (800091c <MX_GPIO_Init+0x314>)
 8000620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000624:	4abd      	ldr	r2, [pc, #756]	@ (800091c <MX_GPIO_Init+0x314>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800062e:	4bbb      	ldr	r3, [pc, #748]	@ (800091c <MX_GPIO_Init+0x314>)
 8000630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	623b      	str	r3, [r7, #32]
 800063a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063c:	4bb7      	ldr	r3, [pc, #732]	@ (800091c <MX_GPIO_Init+0x314>)
 800063e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000642:	4ab6      	ldr	r2, [pc, #728]	@ (800091c <MX_GPIO_Init+0x314>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800064c:	4bb3      	ldr	r3, [pc, #716]	@ (800091c <MX_GPIO_Init+0x314>)
 800064e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065a:	4bb0      	ldr	r3, [pc, #704]	@ (800091c <MX_GPIO_Init+0x314>)
 800065c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000660:	4aae      	ldr	r2, [pc, #696]	@ (800091c <MX_GPIO_Init+0x314>)
 8000662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800066a:	4bac      	ldr	r3, [pc, #688]	@ (800091c <MX_GPIO_Init+0x314>)
 800066c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	4ba8      	ldr	r3, [pc, #672]	@ (800091c <MX_GPIO_Init+0x314>)
 800067a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800067e:	4aa7      	ldr	r2, [pc, #668]	@ (800091c <MX_GPIO_Init+0x314>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000688:	4ba4      	ldr	r3, [pc, #656]	@ (800091c <MX_GPIO_Init+0x314>)
 800068a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4ba1      	ldr	r3, [pc, #644]	@ (800091c <MX_GPIO_Init+0x314>)
 8000698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800069c:	4a9f      	ldr	r2, [pc, #636]	@ (800091c <MX_GPIO_Init+0x314>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006a6:	4b9d      	ldr	r3, [pc, #628]	@ (800091c <MX_GPIO_Init+0x314>)
 80006a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	4b99      	ldr	r3, [pc, #612]	@ (800091c <MX_GPIO_Init+0x314>)
 80006b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ba:	4a98      	ldr	r2, [pc, #608]	@ (800091c <MX_GPIO_Init+0x314>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c4:	4b95      	ldr	r3, [pc, #596]	@ (800091c <MX_GPIO_Init+0x314>)
 80006c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b92      	ldr	r3, [pc, #584]	@ (800091c <MX_GPIO_Init+0x314>)
 80006d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d8:	4a90      	ldr	r2, [pc, #576]	@ (800091c <MX_GPIO_Init+0x314>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e2:	4b8e      	ldr	r3, [pc, #568]	@ (800091c <MX_GPIO_Init+0x314>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f0:	4b8a      	ldr	r3, [pc, #552]	@ (800091c <MX_GPIO_Init+0x314>)
 80006f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f6:	4a89      	ldr	r2, [pc, #548]	@ (800091c <MX_GPIO_Init+0x314>)
 80006f8:	f043 0320 	orr.w	r3, r3, #32
 80006fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000700:	4b86      	ldr	r3, [pc, #536]	@ (800091c <MX_GPIO_Init+0x314>)
 8000702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800070e:	4b83      	ldr	r3, [pc, #524]	@ (800091c <MX_GPIO_Init+0x314>)
 8000710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000714:	4a81      	ldr	r2, [pc, #516]	@ (800091c <MX_GPIO_Init+0x314>)
 8000716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800071a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071e:	4b7f      	ldr	r3, [pc, #508]	@ (800091c <MX_GPIO_Init+0x314>)
 8000720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f24a 0108 	movw	r1, #40968	@ 0xa008
 8000732:	487b      	ldr	r0, [pc, #492]	@ (8000920 <MX_GPIO_Init+0x318>)
 8000734:	f002 fdf4 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800073e:	4879      	ldr	r0, [pc, #484]	@ (8000924 <MX_GPIO_Init+0x31c>)
 8000740:	f002 fdee 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|SWIRE_OUT_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	21d8      	movs	r1, #216	@ 0xd8
 8000748:	4877      	ldr	r0, [pc, #476]	@ (8000928 <MX_GPIO_Init+0x320>)
 800074a:	f002 fde9 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2107      	movs	r1, #7
 8000752:	4876      	ldr	r0, [pc, #472]	@ (800092c <MX_GPIO_Init+0x324>)
 8000754:	f002 fde4 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2104      	movs	r1, #4
 800075c:	4874      	ldr	r0, [pc, #464]	@ (8000930 <MX_GPIO_Init+0x328>)
 800075e:	f002 fddf 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2104      	movs	r1, #4
 8000766:	4873      	ldr	r0, [pc, #460]	@ (8000934 <MX_GPIO_Init+0x32c>)
 8000768:	f002 fdda 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 8000772:	4871      	ldr	r0, [pc, #452]	@ (8000938 <MX_GPIO_Init+0x330>)
 8000774:	f002 fdd4 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000778:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078a:	2304      	movs	r3, #4
 800078c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4869      	ldr	r0, [pc, #420]	@ (800093c <MX_GPIO_Init+0x334>)
 8000796:	f002 fbeb 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 800079a:	f24a 0308 	movw	r3, #40968	@ 0xa008
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	485b      	ldr	r0, [pc, #364]	@ (8000920 <MX_GPIO_Init+0x318>)
 80007b4:	f002 fbdc 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 80007b8:	f244 0318 	movw	r3, #16408	@ 0x4018
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2302      	movs	r3, #2
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 80007ca:	230c      	movs	r3, #12
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4859      	ldr	r0, [pc, #356]	@ (800093c <MX_GPIO_Init+0x334>)
 80007d6:	f002 fbcb 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 80007da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	484c      	ldr	r0, [pc, #304]	@ (8000924 <MX_GPIO_Init+0x31c>)
 80007f4:	f002 fbbc 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 80007f8:	f241 0302 	movw	r3, #4098	@ 0x1002
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	4b50      	ldr	r3, [pc, #320]	@ (8000940 <MX_GPIO_Init+0x338>)
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4845      	ldr	r0, [pc, #276]	@ (8000924 <MX_GPIO_Init+0x31c>)
 800080e:	f002 fbaf 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000812:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000824:	2307      	movs	r3, #7
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	483d      	ldr	r0, [pc, #244]	@ (8000924 <MX_GPIO_Init+0x31c>)
 8000830:	f002 fb9e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000834:	23c0      	movs	r3, #192	@ 0xc0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2302      	movs	r3, #2
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000844:	230b      	movs	r3, #11
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	483a      	ldr	r0, [pc, #232]	@ (8000938 <MX_GPIO_Init+0x330>)
 8000850:	f002 fb8e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8000854:	2338      	movs	r3, #56	@ 0x38
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4832      	ldr	r0, [pc, #200]	@ (8000938 <MX_GPIO_Init+0x330>)
 8000870:	f002 fb7e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8000874:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2302      	movs	r3, #2
 8000884:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000886:	230c      	movs	r3, #12
 8000888:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4828      	ldr	r0, [pc, #160]	@ (8000934 <MX_GPIO_Init+0x32c>)
 8000892:	f002 fb6d 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|IMU_INT1_Pin|MAG_INT_Pin;
 8000896:	f44f 7392 	mov.w	r3, #292	@ 0x124
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_GPIO_Init+0x338>)
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	481f      	ldr	r0, [pc, #124]	@ (8000928 <MX_GPIO_Init+0x320>)
 80008ac:	f002 fb60 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin SWIRE_OUT_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|SWIRE_OUT_Pin|AVDDEN_Pin|SD_EN_Pin;
 80008b0:	23d8      	movs	r3, #216	@ 0xd8
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x320>)
 80008c8:	f002 fb52 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = SWIRE_IN_Pin;
 80008cc:	2301      	movs	r3, #1
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_IN_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x320>)
 80008e0:	f002 fb46 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2302      	movs	r3, #2
 80008f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80008f6:	2308      	movs	r3, #8
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	480e      	ldr	r0, [pc, #56]	@ (800093c <MX_GPIO_Init+0x334>)
 8000902:	f002 fb35 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000906:	2320      	movs	r3, #32
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000916:	2303      	movs	r3, #3
 8000918:	e014      	b.n	8000944 <MX_GPIO_Init+0x33c>
 800091a:	bf00      	nop
 800091c:	46020c00 	.word	0x46020c00
 8000920:	42021c00 	.word	0x42021c00
 8000924:	42021800 	.word	0x42021800
 8000928:	42021000 	.word	0x42021000
 800092c:	42022000 	.word	0x42022000
 8000930:	42021400 	.word	0x42021400
 8000934:	42020800 	.word	0x42020800
 8000938:	42020c00 	.word	0x42020c00
 800093c:	42020400 	.word	0x42020400
 8000940:	10110000 	.word	0x10110000
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	48ba      	ldr	r0, [pc, #744]	@ (8000c38 <MX_GPIO_Init+0x630>)
 800094e:	f002 fb0f 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000952:	2304      	movs	r3, #4
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000962:	230c      	movs	r3, #12
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	48b3      	ldr	r0, [pc, #716]	@ (8000c3c <MX_GPIO_Init+0x634>)
 800096e:	f002 faff 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000982:	230b      	movs	r3, #11
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	48aa      	ldr	r0, [pc, #680]	@ (8000c38 <MX_GPIO_Init+0x630>)
 800098e:	f002 faef 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009a4:	2303      	movs	r3, #3
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	48a4      	ldr	r0, [pc, #656]	@ (8000c40 <MX_GPIO_Init+0x638>)
 80009b0:	f002 fade 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80009b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	489c      	ldr	r0, [pc, #624]	@ (8000c40 <MX_GPIO_Init+0x638>)
 80009ce:	f002 facf 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009d2:	2303      	movs	r3, #3
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 80009e2:	2304      	movs	r3, #4
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4893      	ldr	r0, [pc, #588]	@ (8000c3c <MX_GPIO_Init+0x634>)
 80009ee:	f002 fabf 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	2302      	movs	r3, #2
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 8000a04:	2308      	movs	r3, #8
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	488c      	ldr	r0, [pc, #560]	@ (8000c40 <MX_GPIO_Init+0x638>)
 8000a10:	f002 faae 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8000a14:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c44 <MX_GPIO_Init+0x63c>)
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4887      	ldr	r0, [pc, #540]	@ (8000c48 <MX_GPIO_Init+0x640>)
 8000a2a:	f002 faa1 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4880      	ldr	r0, [pc, #512]	@ (8000c4c <MX_GPIO_Init+0x644>)
 8000a4a:	f002 fa91 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	487a      	ldr	r0, [pc, #488]	@ (8000c50 <MX_GPIO_Init+0x648>)
 8000a66:	f002 fa83 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	4b75      	ldr	r3, [pc, #468]	@ (8000c44 <MX_GPIO_Init+0x63c>)
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4874      	ldr	r0, [pc, #464]	@ (8000c50 <MX_GPIO_Init+0x648>)
 8000a7e:	f002 fa77 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8000a82:	2304      	movs	r3, #4
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	486c      	ldr	r0, [pc, #432]	@ (8000c4c <MX_GPIO_Init+0x644>)
 8000a9a:	f002 fa69 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4864      	ldr	r0, [pc, #400]	@ (8000c48 <MX_GPIO_Init+0x640>)
 8000ab6:	f002 fa5b 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 8000aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac0:	4b60      	ldr	r3, [pc, #384]	@ (8000c44 <MX_GPIO_Init+0x63c>)
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4861      	ldr	r0, [pc, #388]	@ (8000c54 <MX_GPIO_Init+0x64c>)
 8000ad0:	f002 fa4e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	4854      	ldr	r0, [pc, #336]	@ (8000c40 <MX_GPIO_Init+0x638>)
 8000af0:	f002 fa3e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000af4:	f240 4304 	movw	r3, #1028	@ 0x404
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000b06:	230a      	movs	r3, #10
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4849      	ldr	r0, [pc, #292]	@ (8000c38 <MX_GPIO_Init+0x630>)
 8000b12:	f002 fa2d 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8000b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b1c:	2311      	movs	r3, #17
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4843      	ldr	r0, [pc, #268]	@ (8000c3c <MX_GPIO_Init+0x634>)
 8000b30:	f002 fa1e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8000b34:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000b46:	2305      	movs	r3, #5
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <MX_GPIO_Init+0x64c>)
 8000b52:	f002 fa0d 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b66:	2305      	movs	r3, #5
 8000b68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4831      	ldr	r0, [pc, #196]	@ (8000c38 <MX_GPIO_Init+0x630>)
 8000b72:	f002 f9fd 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000b76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4831      	ldr	r0, [pc, #196]	@ (8000c58 <MX_GPIO_Init+0x650>)
 8000b94:	f002 f9ec 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 8000b98:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000baa:	230a      	movs	r3, #10
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4828      	ldr	r0, [pc, #160]	@ (8000c58 <MX_GPIO_Init+0x650>)
 8000bb6:	f002 f9db 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <MX_GPIO_Init+0x640>)
 8000bd6:	f002 f9cb 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8000bda:	23e0      	movs	r3, #224	@ 0xe0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <MX_GPIO_Init+0x638>)
 8000bf6:	f002 f9bb 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4813      	ldr	r0, [pc, #76]	@ (8000c5c <MX_GPIO_Init+0x654>)
 8000c0e:	f002 f9af 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000c12:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c18:	2312      	movs	r3, #18
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <MX_GPIO_Init+0x634>)
 8000c30:	f002 f99e 	bl	8002f70 <HAL_GPIO_Init>
 8000c34:	e014      	b.n	8000c60 <MX_GPIO_Init+0x658>
 8000c36:	bf00      	nop
 8000c38:	42020400 	.word	0x42020400
 8000c3c:	42020c00 	.word	0x42020c00
 8000c40:	42020000 	.word	0x42020000
 8000c44:	10110000 	.word	0x10110000
 8000c48:	42020800 	.word	0x42020800
 8000c4c:	42021400 	.word	0x42021400
 8000c50:	42022000 	.word	0x42022000
 8000c54:	42021c00 	.word	0x42021c00
 8000c58:	42021000 	.word	0x42021000
 8000c5c:	42021800 	.word	0x42021800

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8000c60:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <MX_GPIO_Init+0x6ec>)
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <MX_GPIO_Init+0x6f0>)
 8000c76:	f002 f97b 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	481b      	ldr	r0, [pc, #108]	@ (8000cfc <MX_GPIO_Init+0x6f4>)
 8000c8e:	f002 f96f 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <MX_GPIO_Init+0x6f8>)
 8000cb0:	f002 f95e 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 8000cb4:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <MX_GPIO_Init+0x6f0>)
 8000cce:	f002 f94f 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_GPIO_Init+0x6ec>)
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <MX_GPIO_Init+0x6f8>)
 8000ce8:	f002 f942 	bl	8002f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	@ 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	10110000 	.word	0x10110000
 8000cf8:	42020c00 	.word	0x42020c00
 8000cfc:	42020000 	.word	0x42020000
 8000d00:	42020400 	.word	0x42020400

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 fac7 	bl	80012a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000d58:	f002 fc30 	bl	80035bc <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d62:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d68:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fad8 	bl	8001330 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000d80:	f000 fafe 	bl	8001380 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fae7 	bl	8001358 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	46020c00 	.word	0x46020c00

08000d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0c4      	sub	sp, #272	@ 0x110
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000da2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000da6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	22e0      	movs	r2, #224	@ 0xe0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f005 fc9f 	bl	8006704 <memset>
  if(hadc->Instance==ADC1)
 8000dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_ADC_MspInit+0x178>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	f040 8095 	bne.w	8000f04 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000dda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000de6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 feae 	bl	8004b54 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x6a>
    {
      Error_Handler();
 8000dfe:	f7ff ff93 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e02:	4b44      	ldr	r3, [pc, #272]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e08:	4a42      	ldr	r2, [pc, #264]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e12:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e26:	4a3b      	ldr	r2, [pc, #236]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e36:	f003 0204 	and.w	r2, r3, #4
 8000e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e4c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e54:	4a2f      	ldr	r2, [pc, #188]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e64:	f003 0201 	and.w	r2, r3, #1
 8000e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e7a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e82:	4a24      	ldr	r2, [pc, #144]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_ADC_MspInit+0x17c>)
 8000e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e92:	f003 0202 	and.w	r2, r3, #2
 8000e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ea8:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <HAL_ADC_MspInit+0x180>)
 8000ec4:	f002 f854 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8000ec8:	2318      	movs	r3, #24
 8000eca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <HAL_ADC_MspInit+0x184>)
 8000ee2:	f002 f845 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000efc:	4619      	mov	r1, r3
 8000efe:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <HAL_ADC_MspInit+0x188>)
 8000f00:	f002 f836 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	42028000 	.word	0x42028000
 8000f14:	46020c00 	.word	0x46020c00
 8000f18:	42020800 	.word	0x42020800
 8000f1c:	42020000 	.word	0x42020000
 8000f20:	42020400 	.word	0x42020400

08000f24 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_DCACHE_MspInit+0x68>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10f      	bne.n	8000f56 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8000f54:	e013      	b.n	8000f7e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_DCACHE_MspInit+0x70>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d10e      	bne.n	8000f7e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_DCACHE_MspInit+0x6c>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40031400 	.word	0x40031400
 8000f90:	46020c00 	.word	0x46020c00
 8000f94:	40031800 	.word	0x40031800

08000f98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	22e0      	movs	r2, #224	@ 0xe0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 fbab 	bl	8006704 <memset>
  if(hrtc->Instance==RTC)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <HAL_RTC_MspInit+0x90>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d132      	bne.n	800101e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fdbf 	bl	8004b54 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000fdc:	f7ff fea4 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8000fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fe6:	4a11      	ldr	r2, [pc, #68]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8000fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8000ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8000ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8001002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8001010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <HAL_RTC_MspInit+0x94>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	37f0      	adds	r7, #240	@ 0xf0
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	46007800 	.word	0x46007800
 800102c:	46020c00 	.word	0x46020c00

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001040:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <HAL_InitTick+0xcc>)
 8001042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001046:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <HAL_InitTick+0xcc>)
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <HAL_InitTick+0xcc>)
 8001052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105e:	f107 0210 	add.w	r2, r7, #16
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fcb5 	bl	80049d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800106e:	f003 fc9f 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8001072:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001076:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_InitTick+0xd0>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	0c9b      	lsrs	r3, r3, #18
 800107e:	3b01      	subs	r3, #1
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_InitTick+0xd4>)
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <HAL_InitTick+0xd8>)
 8001086:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_InitTick+0xd4>)
 800108a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800108e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001090:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <HAL_InitTick+0xd4>)
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_InitTick+0xd4>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_InitTick+0xd4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <HAL_InitTick+0xd4>)
 80010a4:	f004 ff68 	bl	8005f78 <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80010ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d118      	bne.n	80010e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b6:	4813      	ldr	r0, [pc, #76]	@ (8001104 <HAL_InitTick+0xd4>)
 80010b8:	f004 ffc0 	bl	800603c <HAL_TIM_Base_Start_IT>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80010c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10e      	bne.n	80010e8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d808      	bhi.n	80010e2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2031      	movs	r0, #49	@ 0x31
 80010d6:	f001 fe1f 	bl	8002d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_InitTick+0xdc>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e002      	b.n	80010e8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010e8:	2031      	movs	r0, #49	@ 0x31
 80010ea:	f001 fe2f 	bl	8002d4c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3738      	adds	r7, #56	@ 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	46020c00 	.word	0x46020c00
 8001100:	431bde83 	.word	0x431bde83
 8001104:	2000013c 	.word	0x2000013c
 8001108:	40001000 	.word	0x40001000
 800110c:	20000004 	.word	0x20000004

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM6_IRQHandler+0x10>)
 8001176:	f005 f801 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000013c 	.word	0x2000013c

08001184 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <SystemInit+0x68>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <SystemInit+0x68>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <SystemInit+0x6c>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <SystemInit+0x6c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <SystemInit+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <SystemInit+0x6c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <SystemInit+0x6c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <SystemInit+0x6c>)
 80011b6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80011ba:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <SystemInit+0x6c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <SystemInit+0x6c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <SystemInit+0x6c>)
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <SystemInit+0x6c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <SystemInit+0x68>)
 80011da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011de:	609a      	str	r2, [r3, #8]
  #endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	46020c00 	.word	0x46020c00

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f8:	f7ff ffc4 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011fe:	e003      	b.n	8001208 <LoopCopyDataInit>

08001200 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001202:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001204:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001206:	3104      	adds	r1, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001208:	480a      	ldr	r0, [pc, #40]	@ (8001234 <LoopForever+0xa>)
	ldr	r3, =_edata
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <LoopForever+0xe>)
	adds	r2, r0, r1
 800120c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800120e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001210:	d3f6      	bcc.n	8001200 <CopyDataInit>
	ldr	r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001214:	e002      	b.n	800121c <LoopFillZerobss>

08001216 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001216:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001218:	f842 3b04 	str.w	r3, [r2], #4

0800121c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LoopForever+0x16>)
	cmp	r2, r3
 800121e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001220:	d3f9      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f005 fa77 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff f845 	bl	80002b4 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800122c:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8001230:	08006854 	.word	0x08006854
	ldr	r0, =_sdata
 8001234:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001238:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800123c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001240:	2000018c 	.word	0x2000018c

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>
	...

08001248 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_Init+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <HAL_Init+0x50>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f001 fd52 	bl	8002d02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800125e:	f003 fa8b 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_Init+0x54>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <HAL_Init+0x58>)
 800126e:	5ccb      	ldrb	r3, [r1, r3]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <HAL_Init+0x5c>)
 8001276:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001278:	2004      	movs	r0, #4
 800127a:	f001 fd75 	bl	8002d68 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	200f      	movs	r0, #15
 8001280:	f7ff fed6 	bl	8001030 <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e002      	b.n	8001294 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f7ff fd51 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40022000 	.word	0x40022000
 800129c:	46020c00 	.word	0x46020c00
 80012a0:	08006774 	.word	0x08006774
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000188 	.word	0x20000188

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000188 	.word	0x20000188

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008

08001330 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001340:	4904      	ldr	r1, [pc, #16]	@ (8001354 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	46007400 	.word	0x46007400

08001358 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 0202 	bic.w	r2, r3, #2
 8001368:	4904      	ldr	r1, [pc, #16]	@ (800137c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	46007400 	.word	0x46007400

08001380 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001392:	f7ff ff9d 	bl	80012d0 <HAL_GetTick>
 8001396:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001398:	e008      	b.n	80013ac <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800139a:	f7ff ff99 	bl	80012d0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d901      	bls.n	80013ac <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e006      	b.n	80013ba <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	46007400 	.word	0x46007400

080013c8 <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 80013d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	6053      	str	r3, [r2, #4]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	46000400 	.word	0x46000400

080013e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LL_ADC_SetResolution+0x3c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d104      	bne.n	8001470 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f023 020c 	bic.w	r2, r3, #12
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	46021000 	.word	0x46021000

08001490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3360      	adds	r3, #96	@ 0x60
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	430b      	orrs	r3, r1
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3360      	adds	r3, #96	@ 0x60
 80014e0:	461a      	mov	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014fe:	b480      	push	{r7}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3360      	adds	r3, #96	@ 0x60
 800150e:	461a      	mov	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	431a      	orrs	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3360      	adds	r3, #96	@ 0x60
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800156a:	b480      	push	{r7}
 800156c:	b087      	sub	sp, #28
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3360      	adds	r3, #96	@ 0x60
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d002      	beq.n	80015d2 <LL_ADC_SetGainCompensation+0x32>
 80015cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015d0:	e000      	b.n	80015d4 <LL_ADC_SetGainCompensation+0x34>
 80015d2:	2200      	movs	r2, #0
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2107      	movs	r1, #7
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	401a      	ands	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a2b      	ldr	r2, [pc, #172]	@ (80016e0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d020      	beq.n	800167a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3330      	adds	r3, #48	@ 0x30
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	4413      	add	r3, r2
 800164a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	211f      	movs	r1, #31
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0e9b      	lsrs	r3, r3, #26
 8001664:	f003 011f 	and.w	r1, r3, #31
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	431a      	orrs	r2, r3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001678:	e02b      	b.n	80016d2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	210f      	movs	r1, #15
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d104      	bne.n	80016a2 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0e9b      	lsrs	r3, r3, #26
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	e010      	b.n	80016c4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	613b      	str	r3, [r7, #16]
  return result;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e003      	b.n	80016c4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	f001 011f 	and.w	r1, r1, #31
 80016ca:	408b      	lsls	r3, r1
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	46021000 	.word	0x46021000

080016e4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	0e9b      	lsrs	r3, r3, #26
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2201      	movs	r2, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	e015      	b.n	8001734 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	60fb      	str	r3, [r7, #12]
  return result;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800171e:	2320      	movs	r3, #32
 8001720:	e003      	b.n	800172a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	2201      	movs	r2, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d042      	beq.n	8001816 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d104      	bne.n	80017a4 <LL_ADC_SetChannelSamplingTime+0x28>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 021f 	and.w	r2, r3, #31
 80017a2:	e011      	b.n	80017c8 <LL_ADC_SetChannelSamplingTime+0x4c>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	617b      	str	r3, [r7, #20]
  return result;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e003      	b.n	80017c6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0e5b      	lsrs	r3, r3, #25
 80017cc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80017d0:	460b      	mov	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3314      	adds	r3, #20
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	0e5b      	lsrs	r3, r3, #25
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2107      	movs	r1, #7
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	431a      	orrs	r2, r3
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001814:	e00e      	b.n	8001834 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0219      	lsls	r1, r3, #8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	400b      	ands	r3, r1
 800182a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	615a      	str	r2, [r3, #20]
}
 8001834:	bf00      	nop
 8001836:	372c      	adds	r7, #44	@ 0x2c
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	46021000 	.word	0x46021000

08001844 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0318 	and.w	r3, r3, #24
 8001866:	4908      	ldr	r1, [pc, #32]	@ (8001888 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001868:	40d9      	lsrs	r1, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	400b      	ands	r3, r1
 800186e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001872:	431a      	orrs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	000fffff 	.word	0x000fffff

0800188c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800189c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6093      	str	r3, [r2, #8]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018c4:	d101      	bne.n	80018ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001914:	d101      	bne.n	800191a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <LL_ADC_IsEnabled+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <LL_ADC_IsEnabled+0x1a>
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b04      	cmp	r3, #4
 8001960:	d101      	bne.n	8001966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b08      	cmp	r3, #8
 8001986:	d101      	bne.n	800198c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08b      	sub	sp, #44	@ 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e2ce      	b.n	8001f5a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a95      	ldr	r2, [pc, #596]	@ (8001c20 <HAL_ADC_Init+0x284>)
 80019ca:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff f9df 	bl	8000d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <LL_ADC_IsDeepPowerDownEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff45 	bl	800188c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff7a 	bl	8001900 <LL_ADC_IsInternalRegulatorEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff5e 	bl	80018d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a1c:	4b81      	ldr	r3, [pc, #516]	@ (8001c24 <HAL_ADC_Init+0x288>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	4a81      	ldr	r2, [pc, #516]	@ (8001c28 <HAL_ADC_Init+0x28c>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a30:	e002      	b.n	8001a38 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f9      	bne.n	8001a32 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff5c 	bl	8001900 <LL_ADC_IsInternalRegulatorEnabled>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10e      	bne.n	8001a6c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a52:	f043 0210 	orr.w	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff6c 	bl	800194e <LL_ADC_REG_IsConversionOngoing>
 8001a76:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 825f 	bne.w	8001f44 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 825b 	bne.w	8001f44 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a92:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff40 	bl	8001928 <LL_ADC_IsEnabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d14f      	bne.n	8001b4e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <HAL_ADC_Init+0x284>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d037      	beq.n	8001b28 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5b      	ldr	r2, [pc, #364]	@ (8001c2c <HAL_ADC_Init+0x290>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_ADC_Init+0x130>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c30 <HAL_ADC_Init+0x294>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d10e      	bne.n	8001aea <HAL_ADC_Init+0x14e>
 8001acc:	4857      	ldr	r0, [pc, #348]	@ (8001c2c <HAL_ADC_Init+0x290>)
 8001ace:	f7ff ff2b 	bl	8001928 <LL_ADC_IsEnabled>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	4856      	ldr	r0, [pc, #344]	@ (8001c30 <HAL_ADC_Init+0x294>)
 8001ad6:	f7ff ff27 	bl	8001928 <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4323      	orrs	r3, r4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e008      	b.n	8001afc <HAL_ADC_Init+0x160>
 8001aea:	484d      	ldr	r0, [pc, #308]	@ (8001c20 <HAL_ADC_Init+0x284>)
 8001aec:	f7ff ff1c 	bl	8001928 <LL_ADC_IsEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d026      	beq.n	8001b4e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <HAL_ADC_Init+0x290>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_ADC_Init+0x178>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_ADC_Init+0x294>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_Init+0x17c>
 8001b14:	4a47      	ldr	r2, [pc, #284]	@ (8001c34 <HAL_ADC_Init+0x298>)
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_Init+0x17e>
 8001b18:	4a47      	ldr	r2, [pc, #284]	@ (8001c38 <HAL_ADC_Init+0x29c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff fc61 	bl	80013e8 <LL_ADC_SetCommonClock>
 8001b26:	e012      	b.n	8001b4e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f7ff fc8c 	bl	8001450 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <HAL_ADC_Init+0x29c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001b48:	493b      	ldr	r1, [pc, #236]	@ (8001c38 <HAL_ADC_Init+0x29c>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a33      	ldr	r2, [pc, #204]	@ (8001c20 <HAL_ADC_Init+0x284>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d010      	beq.n	8001b7a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b64:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001b6a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001b72:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001b74:	4313      	orrs	r3, r2
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	e035      	b.n	8001be6 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7f1b      	ldrb	r3, [r3, #28]
 8001b7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b86:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b88:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_ADC_Init+0x1fc>
 8001b92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_Init+0x1fe>
 8001b98:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b9a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ba0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da04      	bge.n	8001bb4 <HAL_ADC_Init+0x218>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bb2:	e001      	b.n	8001bb8 <HAL_ADC_Init+0x21c>
 8001bb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001bb8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	491b      	ldr	r1, [pc, #108]	@ (8001c2c <HAL_ADC_Init+0x290>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d004      	beq.n	8001bce <HAL_ADC_Init+0x232>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4919      	ldr	r1, [pc, #100]	@ (8001c30 <HAL_ADC_Init+0x294>)
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d103      	bne.n	8001bd6 <HAL_ADC_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_Init+0x242>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bdc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001bde:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d131      	bne.n	8001c54 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_ADC_Init+0x284>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	045b      	lsls	r3, r3, #17
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	e024      	b.n	8001c54 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d113      	bne.n	8001c3c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	e01a      	b.n	8001c54 <HAL_ADC_Init+0x2b8>
 8001c1e:	bf00      	nop
 8001c20:	46021000 	.word	0x46021000
 8001c24:	20000000 	.word	0x20000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	42028000 	.word	0x42028000
 8001c30:	42028100 	.word	0x42028100
 8001c34:	42028300 	.word	0x42028300
 8001c38:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a75      	ldr	r2, [pc, #468]	@ (8001e30 <HAL_ADC_Init+0x494>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b6c      	ldr	r3, [pc, #432]	@ (8001e34 <HAL_ADC_Init+0x498>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	60d3      	str	r3, [r2, #12]
 8001c8e:	e031      	b.n	8001cf4 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_ADC_Init+0x49c>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	6a39      	ldr	r1, [r7, #32]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <HAL_ADC_Init+0x494>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	f000 80a4 	beq.w	8001e48 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe22 	bl	800194e <LL_ADC_REG_IsConversionOngoing>
 8001d0a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe2f 	bl	8001974 <LL_ADC_INJ_IsConversionOngoing>
 8001d16:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d166      	bne.n	8001dec <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d163      	bne.n	8001dec <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7f1b      	ldrb	r3, [r3, #28]
 8001d28:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4943      	ldr	r1, [pc, #268]	@ (8001e3c <HAL_ADC_Init+0x4a0>)
 8001d30:	428b      	cmp	r3, r1
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_Init+0x3a2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4941      	ldr	r1, [pc, #260]	@ (8001e40 <HAL_ADC_Init+0x4a4>)
 8001d3a:	428b      	cmp	r3, r1
 8001d3c:	d102      	bne.n	8001d44 <HAL_ADC_Init+0x3a8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d42:	e002      	b.n	8001d4a <HAL_ADC_Init+0x3ae>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d48:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d58:	f023 0303 	bic.w	r3, r3, #3
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f7ff fc11 	bl	80015a0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11e      	bne.n	8001dc6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_ADC_Init+0x4a8>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001d9c:	0411      	lsls	r1, r2, #16
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001db4:	0892      	lsrs	r2, r2, #2
 8001db6:	430a      	orrs	r2, r1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	e007      	b.n	8001dd6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10c      	bne.n	8001e0e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f023 010f 	bic.w	r1, r3, #15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e0c:	e007      	b.n	8001e1e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 020f 	bic.w	r2, r2, #15
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e2e:	e092      	b.n	8001f56 <HAL_ADC_Init+0x5ba>
 8001e30:	46021000 	.word	0x46021000
 8001e34:	fff0c013 	.word	0xfff0c013
 8001e38:	ffde800d 	.word	0xffde800d
 8001e3c:	42028000 	.word	0x42028000
 8001e40:	42028100 	.word	0x42028100
 8001e44:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d111      	bne.n	8001e76 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e5a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001e60:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001e66:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <HAL_ADC_Init+0x5c8>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	69f9      	ldr	r1, [r7, #28]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e92:	461a      	mov	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	f7ff fba6 	bl	80015e6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001ea8:	f7ff fb9d 	bl	80015e6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f062 020f 	orn	r2, r2, #15
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ec4:	e018      	b.n	8001ef8 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ece:	d113      	bne.n	8001ef8 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	3b01      	subs	r3, #1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f003 031c 	and.w	r3, r3, #28
 8001ee2:	f06f 020f 	mvn.w	r2, #15
 8001ee6:	fa02 f103 	lsl.w	r1, r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_ADC_Init+0x5cc>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f1e:	e01a      	b.n	8001f56 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f24:	f023 0312 	bic.w	r3, r3, #18
 8001f28:	f043 0210 	orr.w	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f42:	e008      	b.n	8001f56 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	372c      	adds	r7, #44	@ 0x2c
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f7fffc02 	.word	0xf7fffc02
 8001f68:	833ffff3 	.word	0x833ffff3

08001f6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b0b7      	sub	sp, #220	@ 0xdc
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4aa8      	ldr	r2, [pc, #672]	@ (8002228 <HAL_ADC_ConfigChannel+0x2bc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d103      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x36>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f000 bdfe 	b.w	8002b9e <HAL_ADC_ConfigChannel+0xc32>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fccd 	bl	800194e <LL_ADC_REG_IsConversionOngoing>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 85c1 	bne.w	8002b3e <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a99      	ldr	r2, [pc, #612]	@ (8002228 <HAL_ADC_ConfigChannel+0x2bc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f000 8409 	beq.w	80027da <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d108      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x7a>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2201      	movs	r2, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	e01d      	b.n	8002022 <HAL_ADC_ConfigChannel+0xb6>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8001ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e004      	b.n	8002018 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800200e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2201      	movs	r2, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	69d1      	ldr	r1, [r2, #28]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	f7ff faf1 	bl	8001624 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fc81 	bl	800194e <LL_ADC_REG_IsConversionOngoing>
 800204c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fc8d 	bl	8001974 <LL_ADC_INJ_IsConversionOngoing>
 800205a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800205e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 81df 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 81da 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fb7c 	bl	800177c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d046      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020b6:	f7ff f9eb 	bl	8001490 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff fa19 	bl	80014fe <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	7e9b      	ldrb	r3, [r3, #26]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11e      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x17e>
 80020e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e8:	e000      	b.n	80020ec <HAL_ADC_ConfigChannel+0x180>
 80020ea:	2300      	movs	r3, #0
 80020ec:	461a      	mov	r2, r3
 80020ee:	f7ff fa3c 	bl	800156a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x19c>
 8002102:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002106:	e000      	b.n	800210a <HAL_ADC_ConfigChannel+0x19e>
 8002108:	2300      	movs	r3, #0
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fa12 	bl	8001534 <LL_ADC_SetOffsetSignedSaturation>
 8002110:	e189      	b.n	8002426 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	f7ff fa24 	bl	800156a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f7ff fa01 	bl	8001534 <LL_ADC_SetOffsetSignedSaturation>
 8002132:	e178      	b.n	8002426 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f9c9 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1f4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f9be 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	e01e      	b.n	800219e <HAL_ADC_ConfigChannel+0x232>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9b3 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800217e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e004      	b.n	800219c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x24a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e9b      	lsrs	r3, r3, #26
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	e018      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x27c>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e004      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80021de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	f7ff f94a 	bl	8001490 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f965 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2c0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f95a 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	e020      	b.n	800226a <HAL_ADC_ConfigChannel+0x2fe>
 8002228:	46021000 	.word	0x46021000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f94d 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800224a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800224e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002252:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800225e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x316>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x348>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800229a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e004      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	2101      	movs	r1, #1
 80022c4:	f7ff f8e4 	bl	8001490 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f8ff 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x388>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2102      	movs	r1, #2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f8f4 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	e01a      	b.n	800232a <HAL_ADC_ConfigChannel+0x3be>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2102      	movs	r1, #2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f8e9 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800230c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800230e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e004      	b.n	8002328 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800231e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x3d6>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	e011      	b.n	8002366 <HAL_ADC_ConfigChannel+0x3fa>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002352:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800235e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002366:	429a      	cmp	r2, r3
 8002368:	d107      	bne.n	800237a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	2102      	movs	r1, #2
 8002376:	f7ff f88b 	bl	8001490 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2103      	movs	r1, #3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f8a6 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x43a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2103      	movs	r1, #3
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f89b 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	0e9b      	lsrs	r3, r3, #26
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	e017      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x46a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f890 	bl	80014d2 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e003      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80023cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x482>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	e011      	b.n	8002412 <HAL_ADC_ConfigChannel+0x4a6>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e003      	b.n	8002412 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800240a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002412:	429a      	cmp	r2, r3
 8002414:	d107      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2103      	movs	r1, #3
 8002422:	f7ff f835 	bl	8001490 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fa7c 	bl	8001928 <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 83ad 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	461a      	mov	r2, r3
 8002446:	f7ff f9fd 	bl	8001844 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002452:	f040 80d6 	bne.w	8002602 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <HAL_ADC_ConfigChannel+0x50e>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	3301      	adds	r3, #1
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b09      	cmp	r3, #9
 8002470:	bf94      	ite	ls
 8002472:	2301      	movls	r3, #1
 8002474:	2300      	movhi	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e019      	b.n	80024ae <HAL_ADC_ConfigChannel+0x542>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800248c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04d      	beq.n	800254e <HAL_ADC_ConfigChannel+0x5e2>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x562>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	3301      	adds	r3, #1
 80024c6:	069b      	lsls	r3, r3, #26
 80024c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024cc:	e015      	b.n	80024fa <HAL_ADC_ConfigChannel+0x58e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80024ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_ADC_ConfigChannel+0x5ae>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	e017      	b.n	800254a <HAL_ADC_ConfigChannel+0x5de>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e003      	b.n	800253e <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	e04e      	b.n	80025ec <HAL_ADC_ConfigChannel+0x680>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <HAL_ADC_ConfigChannel+0x5fe>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	3301      	adds	r3, #1
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002568:	e015      	b.n	8002596 <HAL_ADC_ConfigChannel+0x62a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e003      	b.n	800258e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3301      	adds	r3, #1
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x64a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	e017      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x67a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	61bb      	str	r3, [r7, #24]
  return result;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e003      	b.n	80025da <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025fe:	f7ff f8bd 	bl	800177c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f280 82c3 	bge.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a92      	ldr	r2, [pc, #584]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x6b4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a91      	ldr	r2, [pc, #580]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x6b8>
 8002620:	4b90      	ldr	r3, [pc, #576]	@ (8002864 <HAL_ADC_ConfigChannel+0x8f8>)
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x6ba>
 8002624:	4b90      	ldr	r3, [pc, #576]	@ (8002868 <HAL_ADC_ConfigChannel+0x8fc>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe ff04 	bl	8001434 <LL_ADC_GetCommonPathInternalCh>
 800262c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a89      	ldr	r2, [pc, #548]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x6d8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a88      	ldr	r2, [pc, #544]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10e      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x6f6>
 8002644:	4885      	ldr	r0, [pc, #532]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 8002646:	f7ff f96f 	bl	8001928 <LL_ADC_IsEnabled>
 800264a:	4604      	mov	r4, r0
 800264c:	4884      	ldr	r0, [pc, #528]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 800264e:	f7ff f96b 	bl	8001928 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	4323      	orrs	r3, r4
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e008      	b.n	8002674 <HAL_ADC_ConfigChannel+0x708>
 8002662:	4882      	ldr	r0, [pc, #520]	@ (800286c <HAL_ADC_ConfigChannel+0x900>)
 8002664:	f7ff f960 	bl	8001928 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a6 	beq.w	80027c6 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7c      	ldr	r2, [pc, #496]	@ (8002870 <HAL_ADC_ConfigChannel+0x904>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d13c      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d136      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a71      	ldr	r2, [pc, #452]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00a      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x744>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a70      	ldr	r2, [pc, #448]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d005      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x744>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a70      	ldr	r2, [pc, #448]	@ (800286c <HAL_ADC_ConfigChannel+0x900>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f040 826e 	bne.w	8002b8c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a69      	ldr	r2, [pc, #420]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x758>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x75c>
 80026c4:	4a67      	ldr	r2, [pc, #412]	@ (8002864 <HAL_ADC_ConfigChannel+0x8f8>)
 80026c6:	e000      	b.n	80026ca <HAL_ADC_ConfigChannel+0x75e>
 80026c8:	4a67      	ldr	r2, [pc, #412]	@ (8002868 <HAL_ADC_ConfigChannel+0x8fc>)
 80026ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7fe fe9a 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026da:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_ADC_ConfigChannel+0x908>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	4a65      	ldr	r2, [pc, #404]	@ (8002878 <HAL_ADC_ConfigChannel+0x90c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80026ec:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026ee:	e002      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fc:	e246      	b.n	8002b8c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5e      	ldr	r2, [pc, #376]	@ (800287c <HAL_ADC_ConfigChannel+0x910>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12b      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800270c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d125      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a50      	ldr	r2, [pc, #320]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00a      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x7c8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a4f      	ldr	r2, [pc, #316]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d005      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x7c8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_ADC_ConfigChannel+0x900>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 822e 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a48      	ldr	r2, [pc, #288]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_ADC_ConfigChannel+0x7dc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a47      	ldr	r2, [pc, #284]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x7e0>
 8002748:	4a46      	ldr	r2, [pc, #280]	@ (8002864 <HAL_ADC_ConfigChannel+0x8f8>)
 800274a:	e000      	b.n	800274e <HAL_ADC_ConfigChannel+0x7e2>
 800274c:	4a46      	ldr	r2, [pc, #280]	@ (8002868 <HAL_ADC_ConfigChannel+0x8fc>)
 800274e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fe fe58 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275e:	e217      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a46      	ldr	r2, [pc, #280]	@ (8002880 <HAL_ADC_ConfigChannel+0x914>)
 8002766:	4293      	cmp	r3, r2
 8002768:	f040 8213 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800276c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 820c 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a37      	ldr	r2, [pc, #220]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00a      	beq.n	800279a <HAL_ADC_ConfigChannel+0x82e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d005      	beq.n	800279a <HAL_ADC_ConfigChannel+0x82e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a36      	ldr	r2, [pc, #216]	@ (800286c <HAL_ADC_ConfigChannel+0x900>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 81fc 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_ADC_ConfigChannel+0x8f0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x842>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <HAL_ADC_ConfigChannel+0x8f4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x846>
 80027ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002864 <HAL_ADC_ConfigChannel+0x8f8>)
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x848>
 80027b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002868 <HAL_ADC_ConfigChannel+0x8fc>)
 80027b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7fe fe25 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 80027c4:	e1e5      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80027d8:	e1db      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f000 811b 	beq.w	8002a22 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80027fa:	4a22      	ldr	r2, [pc, #136]	@ (8002884 <HAL_ADC_ConfigChannel+0x918>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe ff6b 	bl	80016e4 <LL_ADC_REG_SetSequencerChAdd>
 800280e:	e059      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	210f      	movs	r1, #15
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800282c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x8d4>
 8002834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	e027      	b.n	8002890 <HAL_ADC_ConfigChannel+0x924>
 8002840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002844:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	60fb      	str	r3, [r7, #12]
  return result;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d117      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e019      	b.n	8002890 <HAL_ADC_ConfigChannel+0x924>
 800285c:	42028000 	.word	0x42028000
 8002860:	42028100 	.word	0x42028100
 8002864:	42028300 	.word	0x42028300
 8002868:	46021300 	.word	0x46021300
 800286c:	46021000 	.word	0x46021000
 8002870:	ce080000 	.word	0xce080000
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	ca040000 	.word	0xca040000
 8002880:	80000001 	.word	0x80000001
 8002884:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	6849      	ldr	r1, [r1, #4]
 8002894:	f001 011f 	and.w	r1, r1, #31
 8002898:	408b      	lsls	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d808      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe feb0 	bl	8001624 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028d2:	f7fe ff53 	bl	800177c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f280 8159 	bge.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a9b      	ldr	r2, [pc, #620]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x988>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x98c>
 80028f4:	4b99      	ldr	r3, [pc, #612]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 80028f6:	e000      	b.n	80028fa <HAL_ADC_ConfigChannel+0x98e>
 80028f8:	4b99      	ldr	r3, [pc, #612]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fd9a 	bl	8001434 <LL_ADC_GetCommonPathInternalCh>
 8002900:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a96      	ldr	r2, [pc, #600]	@ (8002b64 <HAL_ADC_ConfigChannel+0xbf8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12b      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800290e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d125      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8d      	ldr	r2, [pc, #564]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_ADC_ConfigChannel+0x9c2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a8b      	ldr	r2, [pc, #556]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x9c6>
 800292e:	4a8b      	ldr	r2, [pc, #556]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002930:	e000      	b.n	8002934 <HAL_ADC_ConfigChannel+0x9c8>
 8002932:	4a8b      	ldr	r2, [pc, #556]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7fe fd65 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002944:	4b88      	ldr	r3, [pc, #544]	@ (8002b68 <HAL_ADC_ConfigChannel+0xbfc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	4a88      	ldr	r2, [pc, #544]	@ (8002b6c <HAL_ADC_ConfigChannel+0xc00>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002956:	e002      	b.n	800295e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f9      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002964:	e045      	b.n	80029f2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a81      	ldr	r2, [pc, #516]	@ (8002b70 <HAL_ADC_ConfigChannel+0xc04>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d11b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002978:	2b00      	cmp	r3, #0
 800297a:	d115      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a74      	ldr	r2, [pc, #464]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_ADC_ConfigChannel+0xa24>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a73      	ldr	r2, [pc, #460]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0xa28>
 8002990:	4a72      	ldr	r2, [pc, #456]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002992:	e000      	b.n	8002996 <HAL_ADC_ConfigChannel+0xa2a>
 8002994:	4a72      	ldr	r2, [pc, #456]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f7fe fd34 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 80029a6:	e024      	b.n	80029f2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a71      	ldr	r2, [pc, #452]	@ (8002b74 <HAL_ADC_ConfigChannel+0xc08>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11f      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a64      	ldr	r2, [pc, #400]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0xa66>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a62      	ldr	r2, [pc, #392]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0xa6a>
 80029d2:	4a62      	ldr	r2, [pc, #392]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xa6c>
 80029d6:	4a62      	ldr	r2, [pc, #392]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 80029d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f7fe fd13 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a62      	ldr	r2, [pc, #392]	@ (8002b78 <HAL_ADC_ConfigChannel+0xc0c>)
 80029f0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a61      	ldr	r2, [pc, #388]	@ (8002b7c <HAL_ADC_ConfigChannel+0xc10>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 80ca 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 80c3 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002a20:	e0b7      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002a30:	4a53      	ldr	r2, [pc, #332]	@ (8002b80 <HAL_ADC_ConfigChannel+0xc14>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fe83 	bl	800174a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f280 80a2 	bge.w	8002b92 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0xaf6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0xafa>
 8002a62:	4b3e      	ldr	r3, [pc, #248]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_ConfigChannel+0xafc>
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fce3 	bl	8001434 <LL_ADC_GetCommonPathInternalCh>
 8002a6e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a43      	ldr	r2, [pc, #268]	@ (8002b84 <HAL_ADC_ConfigChannel+0xc18>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d115      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0xb24>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0xb28>
 8002a90:	4a32      	ldr	r2, [pc, #200]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_ConfigChannel+0xb2a>
 8002a94:	4a32      	ldr	r2, [pc, #200]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7fe fcb4 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 8002aa6:	e034      	b.n	8002b12 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a36      	ldr	r2, [pc, #216]	@ (8002b88 <HAL_ADC_ConfigChannel+0xc1c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d115      	bne.n	8002ade <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a27      	ldr	r2, [pc, #156]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0xb5a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a25      	ldr	r2, [pc, #148]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0xb5e>
 8002ac6:	4a25      	ldr	r2, [pc, #148]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_ConfigChannel+0xb60>
 8002aca:	4a25      	ldr	r2, [pc, #148]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ad0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe fc99 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 8002adc:	e019      	b.n	8002b12 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_ADC_ConfigChannel+0xc08>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d114      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <HAL_ADC_ConfigChannel+0xbe8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <HAL_ADC_ConfigChannel+0xb90>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_ADC_ConfigChannel+0xbec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0xb94>
 8002afc:	4a17      	ldr	r2, [pc, #92]	@ (8002b5c <HAL_ADC_ConfigChannel+0xbf0>)
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_ConfigChannel+0xb96>
 8002b00:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <HAL_ADC_ConfigChannel+0xbf4>)
 8002b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b06:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe fc7e 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <HAL_ADC_ConfigChannel+0xc10>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d13a      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d134      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002b3c:	e029      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b50:	e01f      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
 8002b52:	bf00      	nop
 8002b54:	42028000 	.word	0x42028000
 8002b58:	42028100 	.word	0x42028100
 8002b5c:	42028300 	.word	0x42028300
 8002b60:	46021300 	.word	0x46021300
 8002b64:	b6002000 	.word	0xb6002000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	053e2d63 	.word	0x053e2d63
 8002b70:	ba004000 	.word	0xba004000
 8002b74:	80000001 	.word	0x80000001
 8002b78:	b2001000 	.word	0xb2001000
 8002b7c:	d7200000 	.word	0xd7200000
 8002b80:	80000010 	.word	0x80000010
 8002b84:	ce080000 	.word	0xce080000
 8002b88:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b90:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002b9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	37dc      	adds	r7, #220	@ 0xdc
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop

08002ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	@ (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	@ (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
         );
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff4c 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d26:	f7ff ff63 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002d2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	f7ff ffb3 	bl	8002c9c <NVIC_EncodePriority>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff82 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff56 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d844      	bhi.n	8002e00 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002d76:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d9f 	.word	0x08002d9f
 8002d80:	08002dbd 	.word	0x08002dbd
 8002d84:	08002ddf 	.word	0x08002ddf
 8002d88:	08002e01 	.word	0x08002e01
 8002d8c:	08002d91 	.word	0x08002d91
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6013      	str	r3, [r2, #0]
      break;
 8002d9c:	e031      	b.n	8002e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002db0:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002db2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002dba:	e022      	b.n	8002e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dc2:	f023 0304 	bic.w	r3, r3, #4
 8002dc6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002dd2:	4a10      	ldr	r2, [pc, #64]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002ddc:	e011      	b.n	8002e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002dde:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002df4:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002df6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002dfe:	e000      	b.n	8002e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e00:	bf00      	nop
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e010 	.word	0xe000e010
 8002e14:	46020c00 	.word	0x46020c00

08002e18 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e037      	b.n	8002e9a <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d119      	bne.n	8002e6a <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea4 <HAL_DCACHE_Init+0x8c>)
 8002e3a:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_DCACHE_Init+0x90>)
 8002e40:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <HAL_DCACHE_Init+0x94>)
 8002e46:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_DCACHE_Init+0x98>)
 8002e4c:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <HAL_DCACHE_Init+0x9c>)
 8002e52:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <HAL_DCACHE_Init+0xa0>)
 8002e60:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f814 	bl	8002ebc <HAL_DCACHE_Enable>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08002f5b 	.word	0x08002f5b
 8002ea8:	08002f0b 	.word	0x08002f0b
 8002eac:	08002f1f 	.word	0x08002f1f
 8002eb0:	08002f47 	.word	0x08002f47
 8002eb4:	08002f33 	.word	0x08002f33
 8002eb8:	08000f25 	.word	0x08000f25

08002ebc <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e015      	b.n	8002efe <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0309 	and.w	r3, r3, #9
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e00a      	b.n	8002efc <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  }

  return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f82:	e1ba      	b.n	80032fa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 81aa 	beq.w	80032f4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <HAL_GPIO_Init+0x188>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d15d      	bne.n	8003064 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0201 	and.w	r2, r3, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002fd8:	4a48      	ldr	r2, [pc, #288]	@ (80030fc <HAL_GPIO_Init+0x18c>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fe0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002fe2:	4a46      	ldr	r2, [pc, #280]	@ (80030fc <HAL_GPIO_Init+0x18c>)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	4013      	ands	r3, r2
 8003010:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220b      	movs	r2, #11
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3208      	adds	r2, #8
 800302e:	69f9      	ldr	r1, [r7, #28]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	4013      	ands	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2202      	movs	r2, #2
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e067      	b.n	8003134 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x104>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b12      	cmp	r3, #18
 8003072:	d145      	bne.n	8003100 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4013      	ands	r3, r2
 8003096:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e01e      	b.n	8003134 <HAL_GPIO_Init+0x1c4>
 80030f6:	bf00      	nop
 80030f8:	46020000 	.word	0x46020000
 80030fc:	080067cc 	.word	0x080067cc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	4013      	ands	r3, r2
 8003116:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	4313      	orrs	r3, r2
 800312c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00b      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d007      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003148:	2b11      	cmp	r3, #17
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b12      	cmp	r3, #18
 8003152:	d130      	bne.n	80031b6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	4013      	ands	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800318a:	2201      	movs	r2, #1
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	4013      	ands	r3, r2
 8003198:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0201 	and.w	r2, r3, #1
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d017      	beq.n	80031ee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07c      	beq.n	80032f4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031fa:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3318      	adds	r3, #24
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	4013      	ands	r3, r2
 800321c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0a9a      	lsrs	r2, r3, #10
 8003222:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <HAL_GPIO_Init+0x3ac>)
 8003224:	4013      	ands	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	00d2      	lsls	r2, r2, #3
 800322e:	4093      	lsls	r3, r2
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	4313      	orrs	r3, r2
 8003234:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003236:	4938      	ldr	r1, [pc, #224]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3318      	adds	r3, #24
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003244:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	4013      	ands	r3, r2
 8003252:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003268:	4a2b      	ldr	r2, [pc, #172]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800326e:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	4013      	ands	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003292:	4a21      	ldr	r2, [pc, #132]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80032be:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80032c6:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80032ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <HAL_GPIO_Init+0x3a8>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3301      	adds	r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f ae3d 	bne.w	8002f84 <HAL_GPIO_Init+0x14>
  }
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	3724      	adds	r7, #36	@ 0x24
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	46022000 	.word	0x46022000
 800331c:	002f7f7f 	.word	0x002f7f7f

08003320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
 800332c:	4613      	mov	r3, r2
 800332e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003330:	787b      	ldrb	r3, [r7, #1]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800333c:	e002      	b.n	8003344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43d9      	mvns	r1, r3
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	400b      	ands	r3, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_ICACHE_Enable+0x1c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <HAL_ICACHE_Enable+0x1c>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40030400 	.word	0x40030400

080033a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	4a04      	ldr	r2, [pc, #16]	@ (80033c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	46020800 	.word	0x46020800

080033c4 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	46020800 	.word	0x46020800

080033e4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80033ec:	4b39      	ldr	r3, [pc, #228]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10b      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003404:	d905      	bls.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003406:	4b33      	ldr	r3, [pc, #204]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4a32      	ldr	r2, [pc, #200]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003410:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e057      	b.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341c:	d90a      	bls.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800341e:	4b2d      	ldr	r3, [pc, #180]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4313      	orrs	r3, r2
 800342a:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	e007      	b.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003434:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800343c:	4925      	ldr	r1, [pc, #148]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4313      	orrs	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003444:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a24      	ldr	r2, [pc, #144]	@ (80034dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	2232      	movs	r2, #50	@ 0x32
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003462:	e002      	b.n	800346a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f3      	bne.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01b      	beq.n	80034ba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	2232      	movs	r2, #50	@ 0x32
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	4a11      	ldr	r2, [pc, #68]	@ (80034dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80034a0:	e002      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80034a8:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0xd6>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f3      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e000      	b.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	46020800 	.word	0x46020800
 80034d8:	20000000 	.word	0x20000000
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	46020800 	.word	0x46020800

080034fc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003504:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <HAL_PWREx_ConfigSupply+0x94>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_PWREx_ConfigSupply+0x98>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2232      	movs	r2, #50	@ 0x32
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_PWREx_ConfigSupply+0x98>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d113      	bne.n	8003550 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a1a      	ldr	r2, [pc, #104]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 800352e:	f023 0302 	bic.w	r3, r3, #2
 8003532:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003534:	e002      	b.n	800353c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800353c:	4b16      	ldr	r3, [pc, #88]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 800353e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d116      	bne.n	8003576 <HAL_PWREx_ConfigSupply+0x7a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f3      	bne.n	8003536 <HAL_PWREx_ConfigSupply+0x3a>
 800354e:	e012      	b.n	8003576 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a10      	ldr	r2, [pc, #64]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 8003556:	f043 0302 	orr.w	r3, r3, #2
 800355a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800355c:	e002      	b.n	8003564 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b01      	subs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003564:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <HAL_PWREx_ConfigSupply+0x9c>)
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_PWREx_ConfigSupply+0x7a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f3      	bne.n	800355e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e000      	b.n	8003582 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000000 	.word	0x20000000
 8003594:	10624dd3 	.word	0x10624dd3
 8003598:	46020800 	.word	0x46020800

0800359c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80035a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035aa:	6113      	str	r3, [r2, #16]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	46020800 	.word	0x46020800

080035bc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_PWREx_EnableVddA+0x1c>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <HAL_PWREx_EnableVddA+0x1c>)
 80035c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035ca:	6113      	str	r3, [r2, #16]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	46020800 	.word	0x46020800

080035dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	@ 0x38
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f000 bec8 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f6:	4b99      	ldr	r3, [pc, #612]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003600:	4b96      	ldr	r3, [pc, #600]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 816c 	beq.w	80038f0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_RCC_OscConfig+0x52>
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	2b0c      	cmp	r3, #12
 8003622:	f040 80de 	bne.w	80037e2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 80da 	bne.w	80037e2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 bea5 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003640:	4b86      	ldr	r3, [pc, #536]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_RCC_OscConfig+0x7a>
 800364c:	4b83      	ldr	r3, [pc, #524]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003654:	e005      	b.n	8003662 <HAL_RCC_OscConfig+0x86>
 8003656:	4b81      	ldr	r3, [pc, #516]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003662:	4293      	cmp	r3, r2
 8003664:	d255      	bcs.n	8003712 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	4618      	mov	r0, r3
 8003672:	f001 f9e9 	bl	8004a48 <RCC_SetFlashLatencyFromMSIRange>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f000 be82 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003682:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	4a75      	ldr	r2, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003688:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800368c:	6093      	str	r3, [r2, #8]
 800368e:	4b73      	ldr	r3, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	4970      	ldr	r1, [pc, #448]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80036a8:	d309      	bcc.n	80036be <HAL_RCC_OscConfig+0xe2>
 80036aa:	4b6c      	ldr	r3, [pc, #432]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 021f 	bic.w	r2, r3, #31
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4969      	ldr	r1, [pc, #420]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
 80036bc:	e07e      	b.n	80037bc <HAL_RCC_OscConfig+0x1e0>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da0a      	bge.n	80036dc <HAL_RCC_OscConfig+0x100>
 80036c6:	4b65      	ldr	r3, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	015b      	lsls	r3, r3, #5
 80036d4:	4961      	ldr	r1, [pc, #388]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
 80036da:	e06f      	b.n	80037bc <HAL_RCC_OscConfig+0x1e0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e4:	d30a      	bcc.n	80036fc <HAL_RCC_OscConfig+0x120>
 80036e6:	4b5d      	ldr	r3, [pc, #372]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	4959      	ldr	r1, [pc, #356]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
 80036fa:	e05f      	b.n	80037bc <HAL_RCC_OscConfig+0x1e0>
 80036fc:	4b57      	ldr	r3, [pc, #348]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	03db      	lsls	r3, r3, #15
 800370a:	4954      	ldr	r1, [pc, #336]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
 8003710:	e054      	b.n	80037bc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003712:	4b52      	ldr	r3, [pc, #328]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4a51      	ldr	r2, [pc, #324]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003718:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	4b4f      	ldr	r3, [pc, #316]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	494c      	ldr	r1, [pc, #304]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003738:	d309      	bcc.n	800374e <HAL_RCC_OscConfig+0x172>
 800373a:	4b48      	ldr	r3, [pc, #288]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 021f 	bic.w	r2, r3, #31
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4945      	ldr	r1, [pc, #276]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003748:	4313      	orrs	r3, r2
 800374a:	60cb      	str	r3, [r1, #12]
 800374c:	e028      	b.n	80037a0 <HAL_RCC_OscConfig+0x1c4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	da0a      	bge.n	800376c <HAL_RCC_OscConfig+0x190>
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	015b      	lsls	r3, r3, #5
 8003764:	493d      	ldr	r1, [pc, #244]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003766:	4313      	orrs	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]
 800376a:	e019      	b.n	80037a0 <HAL_RCC_OscConfig+0x1c4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d30a      	bcc.n	800378c <HAL_RCC_OscConfig+0x1b0>
 8003776:	4b39      	ldr	r3, [pc, #228]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4935      	ldr	r1, [pc, #212]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60cb      	str	r3, [r1, #12]
 800378a:	e009      	b.n	80037a0 <HAL_RCC_OscConfig+0x1c4>
 800378c:	4b33      	ldr	r3, [pc, #204]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	03db      	lsls	r3, r3, #15
 800379a:	4930      	ldr	r1, [pc, #192]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f94c 	bl	8004a48 <RCC_SetFlashLatencyFromMSIRange>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f000 bde5 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80037bc:	f001 f8de 	bl	800497c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_RCC_OscConfig+0x284>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd fc33 	bl	8001030 <HAL_InitTick>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80037d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 808a 	beq.w	80038ee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80037da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037de:	f000 bdd2 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d066      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80037ea:	4b1c      	ldr	r3, [pc, #112]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037f6:	f7fd fd6b 	bl	80012d0 <HAL_GetTick>
 80037fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80037fc:	e009      	b.n	8003812 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037fe:	f7fd fd67 	bl	80012d0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d902      	bls.n	8003812 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f000 bdba 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003812:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ef      	beq.n	80037fe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800381e:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003828:	6093      	str	r3, [r2, #8]
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	4909      	ldr	r1, [pc, #36]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003844:	d30e      	bcc.n	8003864 <HAL_RCC_OscConfig+0x288>
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 021f 	bic.w	r2, r3, #31
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4902      	ldr	r1, [pc, #8]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
 8003858:	e04a      	b.n	80038f0 <HAL_RCC_OscConfig+0x314>
 800385a:	bf00      	nop
 800385c:	46020c00 	.word	0x46020c00
 8003860:	20000004 	.word	0x20000004
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0a      	bge.n	8003882 <HAL_RCC_OscConfig+0x2a6>
 800386c:	4b98      	ldr	r3, [pc, #608]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	015b      	lsls	r3, r3, #5
 800387a:	4995      	ldr	r1, [pc, #596]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	60cb      	str	r3, [r1, #12]
 8003880:	e036      	b.n	80038f0 <HAL_RCC_OscConfig+0x314>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388a:	d30a      	bcc.n	80038a2 <HAL_RCC_OscConfig+0x2c6>
 800388c:	4b90      	ldr	r3, [pc, #576]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	498d      	ldr	r1, [pc, #564]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e026      	b.n	80038f0 <HAL_RCC_OscConfig+0x314>
 80038a2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	03db      	lsls	r3, r3, #15
 80038b0:	4987      	ldr	r1, [pc, #540]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
 80038b6:	e01b      	b.n	80038f0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80038b8:	4b85      	ldr	r3, [pc, #532]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a84      	ldr	r2, [pc, #528]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038c4:	f7fd fd04 	bl	80012d0 <HAL_GetTick>
 80038c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038cc:	f7fd fd00 	bl	80012d0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	f000 bd53 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ef      	bne.n	80038cc <HAL_RCC_OscConfig+0x2f0>
 80038ec:	e000      	b.n	80038f0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80038ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 808b 	beq.w	8003a14 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	2b08      	cmp	r3, #8
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x334>
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d109      	bne.n	800391e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	2b03      	cmp	r3, #3
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d17d      	bne.n	8003a14 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f000 bd34 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x35a>
 8003928:	4b69      	ldr	r3, [pc, #420]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a68      	ldr	r2, [pc, #416]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e041      	b.n	80039ba <HAL_RCC_OscConfig+0x3de>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800393e:	d112      	bne.n	8003966 <HAL_RCC_OscConfig+0x38a>
 8003940:	4b63      	ldr	r3, [pc, #396]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a62      	ldr	r2, [pc, #392]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b60      	ldr	r3, [pc, #384]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800395e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e029      	b.n	80039ba <HAL_RCC_OscConfig+0x3de>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800396e:	d112      	bne.n	8003996 <HAL_RCC_OscConfig+0x3ba>
 8003970:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a53      	ldr	r2, [pc, #332]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b51      	ldr	r3, [pc, #324]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a50      	ldr	r2, [pc, #320]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e011      	b.n	80039ba <HAL_RCC_OscConfig+0x3de>
 8003996:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4d      	ldr	r2, [pc, #308]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b48      	ldr	r3, [pc, #288]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a47      	ldr	r2, [pc, #284]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d014      	beq.n	80039ec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80039c2:	f7fd fc85 	bl	80012d0 <HAL_GetTick>
 80039c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c8:	e009      	b.n	80039de <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ca:	f7fd fc81 	bl	80012d0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	@ 0x64
 80039d6:	d902      	bls.n	80039de <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	f000 bcd4 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039de:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <HAL_RCC_OscConfig+0x3ee>
 80039ea:	e013      	b.n	8003a14 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80039ec:	f7fd fc70 	bl	80012d0 <HAL_GetTick>
 80039f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fc6c 	bl	80012d0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d902      	bls.n	8003a08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	f000 bcbf 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a08:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ef      	bne.n	80039f4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d05f      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x456>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d114      	bne.n	8003a56 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d111      	bne.n	8003a56 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f000 bca3 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	4920      	ldr	r1, [pc, #128]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003a54:	e044      	b.n	8003ae0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d024      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a6a:	f7fd fc31 	bl	80012d0 <HAL_GetTick>
 8003a6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	e009      	b.n	8003a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd fc2d 	bl	80012d0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d902      	bls.n	8003a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	f000 bc80 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ef      	beq.n	8003a72 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	490b      	ldr	r1, [pc, #44]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	610b      	str	r3, [r1, #16]
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ab4:	f7fd fc0c 	bl	80012d0 <HAL_GetTick>
 8003ab8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fd fc08 	bl	80012d0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d904      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	f000 bc5b 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
 8003ad0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad4:	4baf      	ldr	r3, [pc, #700]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ed      	bne.n	8003abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80c8 	beq.w	8003c7e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4ba7      	ldr	r3, [pc, #668]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d111      	bne.n	8003b26 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4ba4      	ldr	r3, [pc, #656]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b08:	4aa2      	ldr	r2, [pc, #648]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b12:	4ba0      	ldr	r3, [pc, #640]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b26:	4b9c      	ldr	r3, [pc, #624]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003b32:	4b99      	ldr	r3, [pc, #612]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	4a98      	ldr	r2, [pc, #608]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fbc7 	bl	80012d0 <HAL_GetTick>
 8003b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b44:	e009      	b.n	8003b5a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fd fbc3 	bl	80012d0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	f000 bc16 	b.w	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d05f      	beq.n	8003c2e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003b6e:	4b89      	ldr	r3, [pc, #548]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b74:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d037      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e3f4      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01b      	beq.n	8003bde <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bac:	4a79      	ldr	r2, [pc, #484]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003bae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003bb6:	f7fd fb8b 	bl	80012d0 <HAL_GetTick>
 8003bba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fb87 	bl	80012d0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e3da      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bd0:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ef      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003bde:	4b6d      	ldr	r3, [pc, #436]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003be4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4969      	ldr	r1, [pc, #420]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003bf4:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bfa:	4a66      	ldr	r2, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003bfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003c04:	f7fd fb64 	bl	80012d0 <HAL_GetTick>
 8003c08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fb60 	bl	80012d0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e3b3      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCC_OscConfig+0x630>
 8003c2c:	e01b      	b.n	8003c66 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c34:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c36:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003c3e:	f7fd fb47 	bl	80012d0 <HAL_GetTick>
 8003c42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd fb43 	bl	80012d0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e396      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c58:	4b4e      	ldr	r3, [pc, #312]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ef      	bne.n	8003c46 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c66:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b49      	ldr	r3, [pc, #292]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c74:	4a47      	ldr	r2, [pc, #284]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c76:	f023 0304 	bic.w	r3, r3, #4
 8003c7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8111 	beq.w	8003eae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b40      	ldr	r3, [pc, #256]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cb0:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cc4:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003cd0:	4b31      	ldr	r3, [pc, #196]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cdc:	f7fd faf8 	bl	80012d0 <HAL_GetTick>
 8003ce0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fd faf4 	bl	80012d0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e347      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cf6:	4b28      	ldr	r3, [pc, #160]	@ (8003d98 <HAL_RCC_OscConfig+0x7bc>)
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01f      	beq.n	8003d4e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d20:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d30:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d3c:	4b15      	ldr	r3, [pc, #84]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d42:	4a14      	ldr	r2, [pc, #80]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d4c:	e00f      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d4e:	4b11      	ldr	r3, [pc, #68]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d54:	4a0f      	ldr	r2, [pc, #60]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d64:	4a0b      	ldr	r2, [pc, #44]	@ (8003d94 <HAL_RCC_OscConfig+0x7b8>)
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d057      	beq.n	8003e26 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003d76:	f7fd faab 	bl	80012d0 <HAL_GetTick>
 8003d7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e00e      	b.n	8003d9c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd faa7 	bl	80012d0 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d905      	bls.n	8003d9c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e2f8      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
 8003d94:	46020c00 	.word	0x46020c00
 8003d98:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0e9      	beq.n	8003d7e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003db6:	4b96      	ldr	r3, [pc, #600]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dbc:	4a94      	ldr	r2, [pc, #592]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fa82 	bl	80012d0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e2d3      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003dde:	4b8c      	ldr	r3, [pc, #560]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ed      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x7ec>
 8003dec:	e053      	b.n	8003e96 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003dee:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df4:	4a86      	ldr	r2, [pc, #536]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fd fa66 	bl	80012d0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e2b7      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e16:	4b7e      	ldr	r3, [pc, #504]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ed      	bne.n	8003e00 <HAL_RCC_OscConfig+0x824>
 8003e24:	e037      	b.n	8003e96 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003e26:	f7fd fa53 	bl	80012d0 <HAL_GetTick>
 8003e2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fa4f 	bl	80012d0 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e2a0      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e44:	4b72      	ldr	r3, [pc, #456]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ed      	bne.n	8003e2e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003e52:	4b6f      	ldr	r3, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e60:	4b6b      	ldr	r3, [pc, #428]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e66:	4a6a      	ldr	r2, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd fa2d 	bl	80012d0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e27e      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e88:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ed      	bne.n	8003e72 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d036      	beq.n	8003f28 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d019      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003ec2:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ecc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ece:	f7fd f9ff 	bl	80012d0 <HAL_GetTick>
 8003ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed6:	f7fd f9fb 	bl	80012d0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e24e      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ee8:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x8fa>
 8003ef4:	e018      	b.n	8003f28 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003ef6:	4b46      	ldr	r3, [pc, #280]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a45      	ldr	r2, [pc, #276]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f00:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f02:	f7fd f9e5 	bl	80012d0 <HAL_GetTick>
 8003f06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0a:	f7fd f9e1 	bl	80012d0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e234      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d036      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d019      	beq.n	8003f70 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003f3c:	4b34      	ldr	r3, [pc, #208]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f48:	f7fd f9c2 	bl	80012d0 <HAL_GetTick>
 8003f4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003f50:	f7fd f9be 	bl	80012d0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e211      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003f62:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x974>
 8003f6e:	e018      	b.n	8003fa2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003f70:	4b27      	ldr	r3, [pc, #156]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f7c:	f7fd f9a8 	bl	80012d0 <HAL_GetTick>
 8003f80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003f84:	f7fd f9a4 	bl	80012d0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1f7      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f96:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07f      	beq.n	80040ae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d062      	beq.n	800407c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	4910      	ldr	r1, [pc, #64]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fdc:	d309      	bcc.n	8003ff2 <HAL_RCC_OscConfig+0xa16>
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 021f 	bic.w	r2, r3, #31
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4909      	ldr	r1, [pc, #36]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60cb      	str	r3, [r1, #12]
 8003ff0:	e02a      	b.n	8004048 <HAL_RCC_OscConfig+0xa6c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da0c      	bge.n	8004014 <HAL_RCC_OscConfig+0xa38>
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	4901      	ldr	r1, [pc, #4]	@ (8004010 <HAL_RCC_OscConfig+0xa34>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
 800400e:	e01b      	b.n	8004048 <HAL_RCC_OscConfig+0xa6c>
 8004010:	46020c00 	.word	0x46020c00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401c:	d30a      	bcc.n	8004034 <HAL_RCC_OscConfig+0xa58>
 800401e:	4ba1      	ldr	r3, [pc, #644]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	499d      	ldr	r1, [pc, #628]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800402e:	4313      	orrs	r3, r2
 8004030:	60cb      	str	r3, [r1, #12]
 8004032:	e009      	b.n	8004048 <HAL_RCC_OscConfig+0xa6c>
 8004034:	4b9b      	ldr	r3, [pc, #620]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	03db      	lsls	r3, r3, #15
 8004042:	4998      	ldr	r1, [pc, #608]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004044:	4313      	orrs	r3, r2
 8004046:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004048:	4b96      	ldr	r3, [pc, #600]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a95      	ldr	r2, [pc, #596]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800404e:	f043 0310 	orr.w	r3, r3, #16
 8004052:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004054:	f7fd f93c 	bl	80012d0 <HAL_GetTick>
 8004058:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800405c:	f7fd f938 	bl	80012d0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e18b      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800406e:	4b8d      	ldr	r3, [pc, #564]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0xa80>
 800407a:	e018      	b.n	80040ae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800407c:	4b89      	ldr	r3, [pc, #548]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a88      	ldr	r2, [pc, #544]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004088:	f7fd f922 	bl	80012d0 <HAL_GetTick>
 800408c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004090:	f7fd f91e 	bl	80012d0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e171      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80040a2:	4b80      	ldr	r3, [pc, #512]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8166 	beq.w	8004384 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040be:	4b79      	ldr	r3, [pc, #484]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	f000 80f2 	beq.w	80042b0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f040 80c5 	bne.w	8004260 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b73      	ldr	r3, [pc, #460]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a72      	ldr	r2, [pc, #456]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80040dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040e2:	f7fd f8f5 	bl	80012d0 <HAL_GetTick>
 80040e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fd f8f1 	bl	80012d0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e144      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040fc:	4b69      	ldr	r3, [pc, #420]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004108:	4b66      	ldr	r3, [pc, #408]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d111      	bne.n	800413a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411c:	4a61      	ldr	r2, [pc, #388]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800411e:	f043 0304 	orr.w	r3, r3, #4
 8004122:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004126:	4b5f      	ldr	r3, [pc, #380]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800413a:	4b5b      	ldr	r3, [pc, #364]	@ (80042a8 <HAL_RCC_OscConfig+0xccc>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004146:	d102      	bne.n	800414e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800414e:	4b56      	ldr	r3, [pc, #344]	@ (80042a8 <HAL_RCC_OscConfig+0xccc>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4a55      	ldr	r2, [pc, #340]	@ (80042a8 <HAL_RCC_OscConfig+0xccc>)
 8004154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004158:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800415a:	4b52      	ldr	r3, [pc, #328]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800416e:	3a01      	subs	r2, #1
 8004170:	0212      	lsls	r2, r2, #8
 8004172:	4311      	orrs	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004178:	430a      	orrs	r2, r1
 800417a:	494a      	ldr	r1, [pc, #296]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004180:	4b48      	ldr	r3, [pc, #288]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004184:	4b49      	ldr	r3, [pc, #292]	@ (80042ac <HAL_RCC_OscConfig+0xcd0>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800418c:	3a01      	subs	r2, #1
 800418e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004196:	3a01      	subs	r2, #1
 8004198:	0252      	lsls	r2, r2, #9
 800419a:	b292      	uxth	r2, r2
 800419c:	4311      	orrs	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0412      	lsls	r2, r2, #16
 80041a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0612      	lsls	r2, r2, #24
 80041b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80041b8:	430a      	orrs	r2, r1
 80041ba:	493a      	ldr	r1, [pc, #232]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80041c0:	4b38      	ldr	r3, [pc, #224]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	4a37      	ldr	r2, [pc, #220]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	4a34      	ldr	r2, [pc, #208]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	4a32      	ldr	r2, [pc, #200]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80041e2:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	f023 020c 	bic.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	492d      	ldr	r1, [pc, #180]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80041f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80041fc:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <HAL_RCC_OscConfig+0xccc>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a29      	ldr	r2, [pc, #164]	@ (80042a8 <HAL_RCC_OscConfig+0xccc>)
 8004202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004206:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004208:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004216:	4a23      	ldr	r2, [pc, #140]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004220:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800422c:	f7fd f850 	bl	80012d0 <HAL_GetTick>
 8004230:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd f84c 	bl	80012d0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e09f      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004246:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800425c:	6293      	str	r3, [r2, #40]	@ 0x28
 800425e:	e091      	b.n	8004384 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004260:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800426c:	f7fd f830 	bl	80012d0 <HAL_GetTick>
 8004270:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd f82c 	bl	80012d0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e07f      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004286:	4b07      	ldr	r3, [pc, #28]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004292:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	4a03      	ldr	r2, [pc, #12]	@ (80042a4 <HAL_RCC_OscConfig+0xcc8>)
 8004298:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80042a2:	e06f      	b.n	8004384 <HAL_RCC_OscConfig+0xda8>
 80042a4:	46020c00 	.word	0x46020c00
 80042a8:	46020800 	.word	0x46020800
 80042ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80042b0:	4b37      	ldr	r3, [pc, #220]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042b6:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d039      	beq.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d132      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d129      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d122      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d11a      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	0a5b      	lsrs	r3, r3, #9
 8004306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d111      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d108      	bne.n	8004338 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	0e1b      	lsrs	r3, r3, #24
 800432a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004332:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e024      	b.n	8004386 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800433c:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800434a:	429a      	cmp	r2, r3
 800434c:	d01a      	beq.n	8004384 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	4a0f      	ldr	r2, [pc, #60]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 8004354:	f023 0310 	bic.w	r3, r3, #16
 8004358:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fc ffb9 	bl	80012d0 <HAL_GetTick>
 800435e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004360:	bf00      	nop
 8004362:	f7fc ffb5 	bl	80012d0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	4293      	cmp	r3, r2
 800436c:	d0f9      	beq.n	8004362 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <HAL_RCC_OscConfig+0xdb4>)
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3738      	adds	r7, #56	@ 0x38
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	46020c00 	.word	0x46020c00

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e1d9      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004618 <HAL_RCC_ClockConfig+0x284>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d910      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b98      	ldr	r3, [pc, #608]	@ (8004618 <HAL_RCC_ClockConfig+0x284>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	4996      	ldr	r1, [pc, #600]	@ (8004618 <HAL_RCC_ClockConfig+0x284>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b94      	ldr	r3, [pc, #592]	@ (8004618 <HAL_RCC_ClockConfig+0x284>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e1c1      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	4b8c      	ldr	r3, [pc, #560]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d908      	bls.n	8004406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80043f4:	4b89      	ldr	r3, [pc, #548]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4986      	ldr	r1, [pc, #536]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004402:	4313      	orrs	r3, r2
 8004404:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d012      	beq.n	8004438 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	4b81      	ldr	r3, [pc, #516]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004420:	429a      	cmp	r2, r3
 8004422:	d909      	bls.n	8004438 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004424:	4b7d      	ldr	r3, [pc, #500]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	497a      	ldr	r1, [pc, #488]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004434:	4313      	orrs	r3, r2
 8004436:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	4b74      	ldr	r3, [pc, #464]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004450:	429a      	cmp	r2, r3
 8004452:	d908      	bls.n	8004466 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b71      	ldr	r3, [pc, #452]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	496e      	ldr	r1, [pc, #440]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004462:	4313      	orrs	r3, r2
 8004464:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d010      	beq.n	8004494 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b69      	ldr	r3, [pc, #420]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	429a      	cmp	r2, r3
 8004480:	d908      	bls.n	8004494 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004482:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 020f 	bic.w	r2, r3, #15
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4963      	ldr	r1, [pc, #396]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004490:	4313      	orrs	r3, r2
 8004492:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80d2 	beq.w	8004646 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d143      	bne.n	8004536 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d110      	bne.n	80044de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	4a56      	ldr	r2, [pc, #344]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044cc:	4b53      	ldr	r3, [pc, #332]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80044de:	f7fc fef7 	bl	80012d0 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80044e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004620 <HAL_RCC_ClockConfig+0x28c>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00f      	beq.n	8004510 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80044f2:	f7fc feed 	bl	80012d0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e12b      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004504:	4b46      	ldr	r3, [pc, #280]	@ (8004620 <HAL_RCC_ClockConfig+0x28c>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b41      	ldr	r3, [pc, #260]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800451c:	4a3f      	ldr	r2, [pc, #252]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004526:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d121      	bne.n	8004576 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e112      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4b37      	ldr	r3, [pc, #220]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d115      	bne.n	8004576 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e106      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004556:	4b31      	ldr	r3, [pc, #196]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e0fa      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004566:	4b2d      	ldr	r3, [pc, #180]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0f2      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004576:	4b29      	ldr	r3, [pc, #164]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4926      	ldr	r1, [pc, #152]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 8004584:	4313      	orrs	r3, r2
 8004586:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004588:	f7fc fea2 	bl	80012d0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d112      	bne.n	80045bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fc fe9a 	bl	80012d0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0d6      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d1ee      	bne.n	8004598 <HAL_RCC_ClockConfig+0x204>
 80045ba:	e044      	b.n	8004646 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d112      	bne.n	80045ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c6:	f7fc fe83 	bl	80012d0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0bf      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045dc:	4b0f      	ldr	r3, [pc, #60]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d1ee      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x232>
 80045e8:	e02d      	b.n	8004646 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d123      	bne.n	800463a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fc fe6c 	bl	80012d0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0a8      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800460a:	4b04      	ldr	r3, [pc, #16]	@ (800461c <HAL_RCC_ClockConfig+0x288>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ee      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x260>
 8004616:	e016      	b.n	8004646 <HAL_RCC_ClockConfig+0x2b2>
 8004618:	40022000 	.word	0x40022000
 800461c:	46020c00 	.word	0x46020c00
 8004620:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fc fe54 	bl	80012d0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e090      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800463a:	4b4a      	ldr	r3, [pc, #296]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b04      	cmp	r3, #4
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	4b43      	ldr	r3, [pc, #268]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	429a      	cmp	r2, r3
 8004660:	d208      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004662:	4b40      	ldr	r3, [pc, #256]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 020f 	bic.w	r2, r3, #15
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	493d      	ldr	r1, [pc, #244]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004674:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <HAL_RCC_ClockConfig+0x3d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d210      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <HAL_RCC_ClockConfig+0x3d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 020f 	bic.w	r2, r3, #15
 800468a:	4937      	ldr	r1, [pc, #220]	@ (8004768 <HAL_RCC_ClockConfig+0x3d4>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <HAL_RCC_ClockConfig+0x3d4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e05b      	b.n	800475c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046bc:	429a      	cmp	r2, r3
 80046be:	d208      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4925      	ldr	r1, [pc, #148]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d012      	beq.n	8004704 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d209      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80046f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4919      	ldr	r1, [pc, #100]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	4b13      	ldr	r3, [pc, #76]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800471c:	429a      	cmp	r2, r3
 800471e:	d208      	bcs.n	8004732 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004720:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	490d      	ldr	r1, [pc, #52]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004732:	f000 f821 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <HAL_RCC_ClockConfig+0x3d0>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	490a      	ldr	r1, [pc, #40]	@ (800476c <HAL_RCC_ClockConfig+0x3d8>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	4a09      	ldr	r2, [pc, #36]	@ (8004770 <HAL_RCC_ClockConfig+0x3dc>)
 800474a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800474c:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <HAL_RCC_ClockConfig+0x3e0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc fc6d 	bl	8001030 <HAL_InitTick>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	46020c00 	.word	0x46020c00
 8004768:	40022000 	.word	0x40022000
 800476c:	08006774 	.word	0x08006774
 8004770:	20000000 	.word	0x20000000
 8004774:	20000004 	.word	0x20000004

08004778 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	b08b      	sub	sp, #44	@ 0x2c
 800477c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004786:	4b78      	ldr	r3, [pc, #480]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004790:	4b75      	ldr	r3, [pc, #468]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x34>
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d121      	bne.n	80047ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d11e      	bne.n	80047ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80047ac:	4b6e      	ldr	r3, [pc, #440]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80047b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047be:	0b1b      	lsrs	r3, r3, #12
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c6:	e005      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80047c8:	4b67      	ldr	r3, [pc, #412]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	0f1b      	lsrs	r3, r3, #28
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047d4:	4a65      	ldr	r2, [pc, #404]	@ (800496c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047e8:	e00d      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d102      	bne.n	80047fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	e004      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d101      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004802:	4b5b      	ldr	r3, [pc, #364]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004804:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f040 80a5 	bne.w	8004958 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800480e:	4b56      	ldr	r3, [pc, #344]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004818:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004826:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004832:	4b4d      	ldr	r3, [pc, #308]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d003      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0xe4>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d022      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x128>
 800485a:	e043      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004974 <HAL_RCC_GetSysClockFreq+0x1fc>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800487e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004882:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004978 <HAL_RCC_GetSysClockFreq+0x200>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e046      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004974 <HAL_RCC_GetSysClockFreq+0x1fc>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80048c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80048c6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004978 <HAL_RCC_GetSysClockFreq+0x200>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	e024      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800490c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004910:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004978 <HAL_RCC_GetSysClockFreq+0x200>
 8004914:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004918:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800491c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004920:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800492e:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004932:	0e1b      	lsrs	r3, r3, #24
 8004934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004938:	3301      	adds	r3, #1
 800493a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004946:	edd7 6a07 	vldr	s13, [r7, #28]
 800494a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004952:	ee17 3a90 	vmov	r3, s15
 8004956:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004958:	6a3b      	ldr	r3, [r7, #32]
}
 800495a:	4618      	mov	r0, r3
 800495c:	372c      	adds	r7, #44	@ 0x2c
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	46020c00 	.word	0x46020c00
 800496c:	0800678c 	.word	0x0800678c
 8004970:	00f42400 	.word	0x00f42400
 8004974:	4b742400 	.word	0x4b742400
 8004978:	46000000 	.word	0x46000000

0800497c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004980:	f7ff fefa 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x28>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	4906      	ldr	r1, [pc, #24]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <HAL_RCC_GetHCLKFreq+0x30>)
 8004998:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800499a:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <HAL_RCC_GetHCLKFreq+0x30>)
 800499c:	681b      	ldr	r3, [r3, #0]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	46020c00 	.word	0x46020c00
 80049a8:	08006774 	.word	0x08006774
 80049ac:	20000000 	.word	0x20000000

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80049b4:	f7ff ffe2 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	46020c00 	.word	0x46020c00
 80049d4:	08006784 	.word	0x08006784

080049d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	221f      	movs	r2, #31
 80049e6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80049e8:	4b15      	ldr	r3, [pc, #84]	@ (8004a40 <HAL_RCC_GetClockConfig+0x68>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 0203 	and.w	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_RCC_GetClockConfig+0x68>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004a00:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <HAL_RCC_GetClockConfig+0x68>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_RCC_GetClockConfig+0x68>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004a1a:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <HAL_RCC_GetClockConfig+0x68>)
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a26:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <HAL_RCC_GetClockConfig+0x6c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	46020c00 	.word	0x46020c00
 8004a44:	40022000 	.word	0x40022000

08004a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a50:	4b3e      	ldr	r3, [pc, #248]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a5e:	f7fe fd3f 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 8004a62:	6178      	str	r0, [r7, #20]
 8004a64:	e019      	b.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	4b39      	ldr	r3, [pc, #228]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a6c:	4a37      	ldr	r2, [pc, #220]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004a76:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a84:	f7fe fd2c 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 8004a88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a8a:	4b30      	ldr	r3, [pc, #192]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a90:	4a2e      	ldr	r2, [pc, #184]	@ (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aa0:	d003      	beq.n	8004aaa <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aa8:	d109      	bne.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab0:	d202      	bcs.n	8004ab8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004ab6:	e033      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004abc:	e030      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ac4:	d208      	bcs.n	8004ad8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d102      	bne.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004ace:	2303      	movs	r3, #3
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e025      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e035      	b.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ade:	d90f      	bls.n	8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aec:	d902      	bls.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	e015      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004af4:	2301      	movs	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e012      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e00f      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b06:	d109      	bne.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d102      	bne.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004b10:	2301      	movs	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e004      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004b16:	2302      	movs	r3, #2
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e001      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 020f 	bic.w	r2, r3, #15
 8004b28:	4909      	ldr	r1, [pc, #36]	@ (8004b50 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	46020c00 	.word	0x46020c00
 8004b50:	40022000 	.word	0x40022000

08004b54 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b0c8      	sub	sp, #288	@ 0x120
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 0401 	and.w	r4, r2, #1
 8004b78:	2500      	movs	r5, #0
 8004b7a:	ea54 0305 	orrs.w	r3, r4, r5
 8004b7e:	d00b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004b80:	4bd5      	ldr	r3, [pc, #852]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b86:	f023 0103 	bic.w	r1, r3, #3
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	4ad1      	ldr	r2, [pc, #836]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b92:	430b      	orrs	r3, r1
 8004b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 0802 	and.w	r8, r2, #2
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	ea58 0309 	orrs.w	r3, r8, r9
 8004bac:	d00b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004bae:	4bca      	ldr	r3, [pc, #808]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb4:	f023 010c 	bic.w	r1, r3, #12
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	4ac6      	ldr	r2, [pc, #792]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f002 0a04 	and.w	sl, r2, #4
 8004bd2:	f04f 0b00 	mov.w	fp, #0
 8004bd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bda:	d00b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004bdc:	4bbe      	ldr	r3, [pc, #760]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	4aba      	ldr	r2, [pc, #744]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f002 0308 	and.w	r3, r2, #8
 8004c00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c0a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c14:	4bb0      	ldr	r3, [pc, #704]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	4aac      	ldr	r2, [pc, #688]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c26:	430b      	orrs	r3, r1
 8004c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f002 0310 	and.w	r3, r2, #16
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c46:	460b      	mov	r3, r1
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004c4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c5c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004c84:	4b94      	ldr	r3, [pc, #592]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c94:	4a90      	ldr	r2, [pc, #576]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f002 0320 	and.w	r3, r2, #32
 8004ca8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cb2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004cbc:	4b86      	ldr	r3, [pc, #536]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc2:	f023 0107 	bic.w	r1, r3, #7
 8004cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ccc:	4a82      	ldr	r2, [pc, #520]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004cf4:	4b78      	ldr	r3, [pc, #480]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cfa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d04:	4a74      	ldr	r2, [pc, #464]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	4a66      	ldr	r2, [pc, #408]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004d64:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d74:	4a58      	ldr	r2, [pc, #352]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8004dd4:	4b40      	ldr	r3, [pc, #256]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dda:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d00c      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004e0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e12:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e3c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	d00c      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e46:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e4c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d00c      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e86:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	4a11      	ldr	r2, [pc, #68]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e94:	430b      	orrs	r3, r1
 8004e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004eb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d010      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004eba:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ecc:	4a02      	ldr	r2, [pc, #8]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x388>
 8004ed6:	bf00      	nop
 8004ed8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ef2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d04c      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f04:	2b80      	cmp	r3, #128	@ 0x80
 8004f06:	d02d      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004f08:	2b80      	cmp	r3, #128	@ 0x80
 8004f0a:	d827      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f0c:	2b60      	cmp	r3, #96	@ 0x60
 8004f0e:	d02b      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004f10:	2b60      	cmp	r3, #96	@ 0x60
 8004f12:	d823      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d006      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d81f      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d011      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004f24:	e01a      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f26:	4bc0      	ldr	r3, [pc, #768]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	4abf      	ldr	r2, [pc, #764]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f32:	e01a      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f38:	3308      	adds	r3, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fd90 	bl	8005a60 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f46:	e010      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4c:	332c      	adds	r3, #44	@ 0x2c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fe1e 	bl	8005b90 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f5a:	e006      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004f62:	e002      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10d      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f72:	4bad      	ldr	r3, [pc, #692]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f78:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f84:	4aa8      	ldr	r2, [pc, #672]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004f92:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d053      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d033      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc8:	d82c      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fce:	d02f      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd4:	d826      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fda:	d008      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe0:	d820      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d011      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004fec:	e01a      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fee:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	4a8d      	ldr	r2, [pc, #564]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ffa:	e01a      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005000:	3308      	adds	r3, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fd2c 	bl	8005a60 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800500e:	e010      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005014:	332c      	adds	r3, #44	@ 0x2c
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fdba 	bl	8005b90 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005022:	e006      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800502a:	e002      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005032:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800503a:	4b7b      	ldr	r3, [pc, #492]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800503c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005040:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800504c:	4a76      	ldr	r2, [pc, #472]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800504e:	430b      	orrs	r3, r1
 8005050:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800505a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800506a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005074:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005078:	460b      	mov	r3, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	d046      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005086:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800508a:	d028      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800508c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005090:	d821      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005096:	d022      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800509c:	d81b      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800509e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050a2:	d01c      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80050a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050a8:	d815      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ae:	d008      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80050b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b4:	d80f      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d011      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050be:	d00e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80050c0:	e009      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c6:	3308      	adds	r3, #8
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fcc9 	bl	8005a60 <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80050d4:	e004      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 80050de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10d      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80050ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ee:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050fa:	4a4b      	ldr	r2, [pc, #300]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80050fc:	430b      	orrs	r3, r1
 80050fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005102:	e003      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005108:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800511c:	2300      	movs	r3, #0
 800511e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005126:	460b      	mov	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	d03f      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005134:	2b04      	cmp	r3, #4
 8005136:	d81e      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	0800517f 	.word	0x0800517f
 8005144:	08005155 	.word	0x08005155
 8005148:	08005163 	.word	0x08005163
 800514c:	0800517f 	.word	0x0800517f
 8005150:	0800517f 	.word	0x0800517f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005154:	4b34      	ldr	r3, [pc, #208]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	4a33      	ldr	r2, [pc, #204]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005160:	e00e      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005166:	332c      	adds	r3, #44	@ 0x2c
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fd11 	bl	8005b90 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800517e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005180:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800518a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800518e:	f023 0107 	bic.w	r1, r3, #7
 8005192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519a:	4a23      	ldr	r2, [pc, #140]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800519c:	430b      	orrs	r3, r1
 800519e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051a2:	e003      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80051a8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ba:	2300      	movs	r3, #0
 80051bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051c2:	460b      	mov	r3, r1
 80051c4:	4313      	orrs	r3, r2
 80051c6:	d04c      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051d4:	d02a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80051d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051da:	d821      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80051dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051e0:	d026      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80051e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051e6:	d81b      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ec:	d00e      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051f2:	d815      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01d      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051fc:	d110      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005208:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800520a:	e014      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005210:	332c      	adds	r3, #44	@ 0x2c
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fcbc 	bl	8005b90 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800521e:	e00a      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005226:	e006      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005228:	46020c00 	.word	0x46020c00
        break;
 800522c:	bf00      	nop
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8005234:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005236:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800523e:	4baf      	ldr	r3, [pc, #700]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005244:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005250:	4aaa      	ldr	r2, [pc, #680]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005252:	430b      	orrs	r3, r1
 8005254:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800525e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800526e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005270:	2300      	movs	r3, #0
 8005272:	677b      	str	r3, [r7, #116]	@ 0x74
 8005274:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	f000 80b5 	beq.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005286:	4b9d      	ldr	r3, [pc, #628]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d113      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005294:	4b99      	ldr	r3, [pc, #612]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529a:	4a98      	ldr	r2, [pc, #608]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052a4:	4b95      	ldr	r3, [pc, #596]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80052a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80052b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052bc:	4b90      	ldr	r3, [pc, #576]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	4a8f      	ldr	r2, [pc, #572]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c8:	f7fc f802 	bl	80012d0 <HAL_GetTick>
 80052cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052d0:	e00b      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fb fffd 	bl	80012d0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d903      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80052e8:	e005      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052ea:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ed      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 80052f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d165      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052fe:	4b7f      	ldr	r3, [pc, #508]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005308:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800530c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d023      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x808>
 8005314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005318:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005320:	4293      	cmp	r3, r2
 8005322:	d01b      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005324:	4b75      	ldr	r3, [pc, #468]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800532e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005332:	4b72      	ldr	r3, [pc, #456]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005338:	4a70      	ldr	r2, [pc, #448]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800533a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005342:	4b6e      	ldr	r3, [pc, #440]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005348:	4a6c      	ldr	r2, [pc, #432]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800534a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800534e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005352:	4a6a      	ldr	r2, [pc, #424]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005358:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800535c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d019      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fb ffb2 	bl	80012d0 <HAL_GetTick>
 800536c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005370:	e00d      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fb ffad 	bl	80012d0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538e:	4b5b      	ldr	r3, [pc, #364]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ea      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800539c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80053a4:	4b55      	ldr	r3, [pc, #340]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053b6:	4a51      	ldr	r2, [pc, #324]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80053b8:	430b      	orrs	r3, r1
 80053ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053be:	e008      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80053c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 80053c8:	e003      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80053ce:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053d2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4b48      	ldr	r3, [pc, #288]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80053dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e0:	4a46      	ldr	r2, [pc, #280]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80053e2:	f023 0304 	bic.w	r3, r3, #4
 80053e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80053ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f8:	2300      	movs	r3, #0
 80053fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053fc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d042      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800540a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800540e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005412:	d022      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x906>
 8005414:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005418:	d81b      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541e:	d011      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005424:	d815      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d019      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800542a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800542e:	d110      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005434:	3308      	adds	r3, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fb12 	bl	8005a60 <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005442:	e00d      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005444:	4b2d      	ldr	r3, [pc, #180]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	4a2c      	ldr	r2, [pc, #176]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005450:	e006      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800545e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005460:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005468:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800546a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005476:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800547a:	4a20      	ldr	r2, [pc, #128]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800547c:	430b      	orrs	r3, r1
 800547e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005488:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800548c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005498:	663b      	str	r3, [r7, #96]	@ 0x60
 800549a:	2300      	movs	r3, #0
 800549c:	667b      	str	r3, [r7, #100]	@ 0x64
 800549e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80054a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b4:	d00b      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ba:	d804      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80054c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c4:	d007      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80054cc:	e004      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80054d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d111      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80054e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054f2:	4a02      	ldr	r2, [pc, #8]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054fa:	e007      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80054fc:	46020c00 	.word	0x46020c00
 8005500:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005508:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800550c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800551a:	2300      	movs	r3, #0
 800551c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800551e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
 8005526:	d00c      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005528:	4bb2      	ldr	r3, [pc, #712]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800552a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800552e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800553a:	4aae      	ldr	r2, [pc, #696]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800553c:	430b      	orrs	r3, r1
 800553e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800554e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005550:	2300      	movs	r3, #0
 8005552:	657b      	str	r3, [r7, #84]	@ 0x54
 8005554:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005558:	460b      	mov	r3, r1
 800555a:	4313      	orrs	r3, r2
 800555c:	d019      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800555e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800556a:	d105      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800556c:	4ba1      	ldr	r3, [pc, #644]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	4aa0      	ldr	r2, [pc, #640]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005576:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005578:	4b9e      	ldr	r3, [pc, #632]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800557a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800557e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800558a:	4a9a      	ldr	r2, [pc, #616]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800558c:	430b      	orrs	r3, r1
 800558e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a0:	2300      	movs	r3, #0
 80055a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d00c      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80055ae:	4b91      	ldr	r3, [pc, #580]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80055c0:	4a8c      	ldr	r2, [pc, #560]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d6:	2300      	movs	r3, #0
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d00c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055e4:	4b83      	ldr	r3, [pc, #524]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80055f6:	4a7f      	ldr	r2, [pc, #508]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800560a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005610:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d00c      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800561a:	4b76      	ldr	r3, [pc, #472]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800561c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005620:	f023 0118 	bic.w	r1, r3, #24
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005628:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800562c:	4a71      	ldr	r2, [pc, #452]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800562e:	430b      	orrs	r3, r1
 8005630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005640:	633b      	str	r3, [r7, #48]	@ 0x30
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
 8005646:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800564a:	460b      	mov	r3, r1
 800564c:	4313      	orrs	r3, r2
 800564e:	d032      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005654:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800565c:	d105      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565e:	4b65      	ldr	r3, [pc, #404]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005662:	4a64      	ldr	r2, [pc, #400]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005668:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005672:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005676:	d108      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800567c:	3308      	adds	r3, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f9ee 	bl	8005a60 <RCCEx_PLL2_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800568a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005692:	4b58      	ldr	r3, [pc, #352]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005694:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005698:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056a4:	4a53      	ldr	r2, [pc, #332]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80056b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	2100      	movs	r1, #0
 80056c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056cc:	460b      	mov	r3, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	d04a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056de:	d01e      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 80056e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056e4:	d825      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80056e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056ea:	d00e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 80056ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f0:	d81f      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d021      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fa:	d11a      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4b3d      	ldr	r3, [pc, #244]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	4a3c      	ldr	r2, [pc, #240]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005706:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005708:	e018      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800570e:	3308      	adds	r3, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f9a5 	bl	8005a60 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800571c:	e00e      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005722:	332c      	adds	r3, #44	@ 0x2c
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fa33 	bl	8005b90 <RCCEx_PLL3_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005730:	e004      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005744:	4b2b      	ldr	r3, [pc, #172]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800574a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800574e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005752:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005756:	4927      	ldr	r1, [pc, #156]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005764:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
 800577a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d03d      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005790:	d00e      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005796:	d815      	bhi.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d017      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800579c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057a0:	d110      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a2:	4b14      	ldr	r3, [pc, #80]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	4a13      	ldr	r2, [pc, #76]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80057ae:	e00e      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057b4:	3308      	adds	r3, #8
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f952 	bl	8005a60 <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80057cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057ce:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d110      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	4902      	ldr	r1, [pc, #8]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80057f2:	bf00      	nop
 80057f4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80057fc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d00c      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800581c:	4b68      	ldr	r3, [pc, #416]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800581e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005822:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800582e:	4964      	ldr	r1, [pc, #400]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	2100      	movs	r1, #0
 8005840:	6139      	str	r1, [r7, #16]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800584c:	460b      	mov	r3, r1
 800584e:	4313      	orrs	r3, r2
 8005850:	d036      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005856:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800585e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005862:	d113      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005868:	3308      	adds	r3, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f8f8 	bl	8005a60 <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8005876:	e00d      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587c:	332c      	adds	r3, #44	@ 0x2c
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f986 	bl	8005b90 <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005894:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800589c:	4b48      	ldr	r3, [pc, #288]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800589e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80058ae:	4944      	ldr	r1, [pc, #272]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058b6:	e003      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80058bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	2100      	movs	r1, #0
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d024      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 80058dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ec:	332c      	adds	r3, #44	@ 0x2c
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f94e 	bl	8005b90 <RCCEx_PLL3_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 80058fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8005904:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005908:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005914:	492a      	ldr	r1, [pc, #168]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005922:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	2100      	movs	r1, #0
 8005930:	6039      	str	r1, [r7, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	e9d7 1200 	ldrd	r1, r2, [r7]
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005946:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800594a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800594e:	d00d      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005950:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005954:	d811      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8005956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595a:	d012      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800595c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005960:	d80b      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800596c:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8005972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005976:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800598c:	4b0c      	ldr	r3, [pc, #48]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800598e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005992:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800599a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800599e:	4908      	ldr	r1, [pc, #32]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80059a6:	e003      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80059ac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80059b0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c0:	46020c00 	.word	0x46020c00

080059c4 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d4:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d110      	bne.n	8005a04 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 80059e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059f2:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a04:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <HAL_RCCEx_EnableLSCO+0x98>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 8005a10:	f7fd fcc8 	bl	80033a4 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8005a18:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 8005a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 8005a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 8005a36:	f7fd fcc5 	bl	80033c4 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 8005a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a46:	4a04      	ldr	r2, [pc, #16]	@ (8005a58 <HAL_RCCEx_EnableLSCO+0x94>)
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	46020c00 	.word	0x46020c00
 8005a5c:	46020800 	.word	0x46020800

08005a60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005a68:	4b47      	ldr	r3, [pc, #284]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a46      	ldr	r2, [pc, #280]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005a6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a72:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a74:	f7fb fc2c 	bl	80012d0 <HAL_GetTick>
 8005a78:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a7a:	e008      	b.n	8005a8e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a7c:	f7fb fc28 	bl	80012d0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e077      	b.n	8005b7e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6811      	ldr	r1, [r2, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6852      	ldr	r2, [r2, #4]
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0212      	lsls	r2, r2, #8
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	4934      	ldr	r1, [pc, #208]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005aba:	4b33      	ldr	r3, [pc, #204]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abe:	4b33      	ldr	r3, [pc, #204]	@ (8005b8c <RCCEx_PLL2_Config+0x12c>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	0252      	lsls	r2, r2, #9
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	4311      	orrs	r1, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6912      	ldr	r2, [r2, #16]
 8005adc:	3a01      	subs	r2, #1
 8005ade:	0412      	lsls	r2, r2, #16
 8005ae0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6952      	ldr	r2, [r2, #20]
 8005aea:	3a01      	subs	r2, #1
 8005aec:	0612      	lsls	r2, r2, #24
 8005aee:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005af2:	430a      	orrs	r2, r1
 8005af4:	4924      	ldr	r1, [pc, #144]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005afa:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	f023 020c 	bic.w	r2, r3, #12
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4920      	ldr	r1, [pc, #128]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	491c      	ldr	r1, [pc, #112]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b26:	4b18      	ldr	r3, [pc, #96]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b2e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	69d2      	ldr	r2, [r2, #28]
 8005b36:	00d2      	lsls	r2, r2, #3
 8005b38:	4913      	ldr	r1, [pc, #76]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005b3e:	4b12      	ldr	r3, [pc, #72]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b44:	f043 0310 	orr.w	r3, r3, #16
 8005b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b54:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b56:	f7fb fbbb 	bl	80012d0 <HAL_GetTick>
 8005b5a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b5c:	e008      	b.n	8005b70 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b5e:	f7fb fbb7 	bl	80012d0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e006      	b.n	8005b7e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <RCCEx_PLL2_Config+0x128>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f0      	beq.n	8005b5e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0

}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	46020c00 	.word	0x46020c00
 8005b8c:	80800000 	.word	0x80800000

08005b90 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005b98:	4b47      	ldr	r3, [pc, #284]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a46      	ldr	r2, [pc, #280]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ba4:	f7fb fb94 	bl	80012d0 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005baa:	e008      	b.n	8005bbe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bac:	f7fb fb90 	bl	80012d0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e077      	b.n	8005cae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005bca:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6852      	ldr	r2, [r2, #4]
 8005bde:	3a01      	subs	r2, #1
 8005be0:	0212      	lsls	r2, r2, #8
 8005be2:	430a      	orrs	r2, r1
 8005be4:	4934      	ldr	r1, [pc, #208]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	630b      	str	r3, [r1, #48]	@ 0x30
 8005bea:	4b33      	ldr	r3, [pc, #204]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bee:	4b33      	ldr	r3, [pc, #204]	@ (8005cbc <RCCEx_PLL3_Config+0x12c>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6892      	ldr	r2, [r2, #8]
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68d2      	ldr	r2, [r2, #12]
 8005c00:	3a01      	subs	r2, #1
 8005c02:	0252      	lsls	r2, r2, #9
 8005c04:	b292      	uxth	r2, r2
 8005c06:	4311      	orrs	r1, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6912      	ldr	r2, [r2, #16]
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0412      	lsls	r2, r2, #16
 8005c10:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c14:	4311      	orrs	r1, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6952      	ldr	r2, [r2, #20]
 8005c1a:	3a01      	subs	r2, #1
 8005c1c:	0612      	lsls	r2, r2, #24
 8005c1e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c22:	430a      	orrs	r2, r1
 8005c24:	4924      	ldr	r1, [pc, #144]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005c2a:	4b23      	ldr	r3, [pc, #140]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	f023 020c 	bic.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	4920      	ldr	r1, [pc, #128]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	491c      	ldr	r1, [pc, #112]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c50:	f023 0310 	bic.w	r3, r3, #16
 8005c54:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c56:	4b18      	ldr	r3, [pc, #96]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	69d2      	ldr	r2, [r2, #28]
 8005c66:	00d2      	lsls	r2, r2, #3
 8005c68:	4913      	ldr	r1, [pc, #76]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005c6e:	4b12      	ldr	r3, [pc, #72]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c72:	4a11      	ldr	r2, [pc, #68]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c74:	f043 0310 	orr.w	r3, r3, #16
 8005c78:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c86:	f7fb fb23 	bl	80012d0 <HAL_GetTick>
 8005c8a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c8c:	e008      	b.n	8005ca0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c8e:	f7fb fb1f 	bl	80012d0 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <RCCEx_PLL3_Config+0x128>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	46020c00 	.word	0x46020c00
 8005cbc:	80800000 	.word	0x80800000

08005cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d071      	beq.n	8005db6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb f956 	bl	8000f98 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cf4:	4b32      	ldr	r3, [pc, #200]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d051      	beq.n	8005da4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d00:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d02:	22ca      	movs	r2, #202	@ 0xca
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d06:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d08:	2253      	movs	r2, #83	@ 0x53
 8005d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f88b 	bl	8005e28 <RTC_EnterInitMode>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d13f      	bne.n	8005d9c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005d1c:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4a27      	ldr	r2, [pc, #156]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d22:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4319      	orrs	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	491f      	ldr	r1, [pc, #124]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	491b      	ldr	r1, [pc, #108]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	430b      	orrs	r3, r1
 8005d68:	4915      	ldr	r1, [pc, #84]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f896 	bl	8005ea0 <RTC_ExitInitMode>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005d7e:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a19      	ldr	r1, [r3, #32]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4319      	orrs	r1, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	490a      	ldr	r1, [pc, #40]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d9c:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <HAL_RTC_Init+0x100>)
 8005d9e:	22ff      	movs	r2, #255	@ 0xff
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005da2:	e001      	b.n	8005da8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	46007800 	.word	0x46007800

08005dc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005dcc:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <HAL_RTC_WaitForSynchro+0x60>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	@ (8005e24 <HAL_RTC_WaitForSynchro+0x60>)
 8005dd2:	f023 0320 	bic.w	r3, r3, #32
 8005dd6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005dd8:	f7fb fa7a 	bl	80012d0 <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005dde:	e013      	b.n	8005e08 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005de0:	f7fb fa76 	bl	80012d0 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dee:	d90b      	bls.n	8005e08 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <HAL_RTC_WaitForSynchro+0x60>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10c      	bne.n	8005e16 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e008      	b.n	8005e1a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <HAL_RTC_WaitForSynchro+0x60>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0e5      	beq.n	8005de0 <HAL_RTC_WaitForSynchro+0x1c>
 8005e14:	e000      	b.n	8005e18 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8005e16:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	46007800 	.word	0x46007800

08005e28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005e34:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <RTC_EnterInitMode+0x74>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d128      	bne.n	8005e92 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005e40:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <RTC_EnterInitMode+0x74>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <RTC_EnterInitMode+0x74>)
 8005e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005e4c:	f7fb fa40 	bl	80012d0 <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e52:	e013      	b.n	8005e7c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e54:	f7fb fa3c 	bl	80012d0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e62:	d90b      	bls.n	8005e7c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005e64:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <RTC_EnterInitMode+0x74>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10f      	bne.n	8005e90 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2203      	movs	r2, #3
 8005e78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <RTC_EnterInitMode+0x74>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <RTC_EnterInitMode+0x6a>
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d1e2      	bne.n	8005e54 <RTC_EnterInitMode+0x2c>
 8005e8e:	e000      	b.n	8005e92 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8005e90:	bf00      	nop
        }
      }
    }
  }

  return status;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	46007800 	.word	0x46007800

08005ea0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005eac:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005eb8:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10c      	bne.n	8005ede <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff ff7d 	bl	8005dc4 <HAL_RTC_WaitForSynchro>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e017      	b.n	8005f0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ede:	4b0e      	ldr	r3, [pc, #56]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005ee4:	f023 0320 	bic.w	r3, r3, #32
 8005ee8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff6a 	bl	8005dc4 <HAL_RTC_WaitForSynchro>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	4a04      	ldr	r2, [pc, #16]	@ (8005f18 <RTC_ExitInitMode+0x78>)
 8005f08:	f043 0320 	orr.w	r3, r3, #32
 8005f0c:	6193      	str	r3, [r2, #24]
  }
  return status;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	46007800 	.word	0x46007800

08005f1c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4910      	ldr	r1, [pc, #64]	@ (8005f70 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	490c      	ldr	r1, [pc, #48]	@ (8005f74 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8005f48:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6919      	ldr	r1, [r3, #16]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	4905      	ldr	r1, [pc, #20]	@ (8005f74 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	46007800 	.word	0x46007800
 8005f74:	46007c00 	.word	0x46007c00

08005f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e049      	b.n	800601e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f841 	bl	8006026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fa58 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e072      	b.n	800613a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a35      	ldr	r2, [pc, #212]	@ (8006148 <HAL_TIM_Base_Start_IT+0x10c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d040      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a34      	ldr	r2, [pc, #208]	@ (800614c <HAL_TIM_Base_Start_IT+0x110>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d03b      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006088:	d036      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006092:	d031      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2d      	ldr	r2, [pc, #180]	@ (8006150 <HAL_TIM_Base_Start_IT+0x114>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d02c      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006154 <HAL_TIM_Base_Start_IT+0x118>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d027      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006158 <HAL_TIM_Base_Start_IT+0x11c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d022      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a29      	ldr	r2, [pc, #164]	@ (800615c <HAL_TIM_Base_Start_IT+0x120>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d01d      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a27      	ldr	r2, [pc, #156]	@ (8006160 <HAL_TIM_Base_Start_IT+0x124>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d018      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a26      	ldr	r2, [pc, #152]	@ (8006164 <HAL_TIM_Base_Start_IT+0x128>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a24      	ldr	r2, [pc, #144]	@ (8006168 <HAL_TIM_Base_Start_IT+0x12c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00e      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a23      	ldr	r2, [pc, #140]	@ (800616c <HAL_TIM_Base_Start_IT+0x130>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d009      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a21      	ldr	r2, [pc, #132]	@ (8006170 <HAL_TIM_Base_Start_IT+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d004      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xbc>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a20      	ldr	r2, [pc, #128]	@ (8006174 <HAL_TIM_Base_Start_IT+0x138>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d115      	bne.n	8006124 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <HAL_TIM_Base_Start_IT+0x13c>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d015      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0xfa>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006110:	d011      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	e008      	b.n	8006136 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e000      	b.n	8006138 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	50012c00 	.word	0x50012c00
 8006150:	40000400 	.word	0x40000400
 8006154:	50000400 	.word	0x50000400
 8006158:	40000800 	.word	0x40000800
 800615c:	50000800 	.word	0x50000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	50000c00 	.word	0x50000c00
 8006168:	40013400 	.word	0x40013400
 800616c:	50013400 	.word	0x50013400
 8006170:	40014000 	.word	0x40014000
 8006174:	50014000 	.word	0x50014000
 8006178:	00010007 	.word	0x00010007

0800617c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d020      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0202 	mvn.w	r2, #2
 80061b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f931 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f923 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f934 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d020      	beq.n	800622c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01b      	beq.n	800622c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0204 	mvn.w	r2, #4
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f90b 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8fd 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f90e 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d020      	beq.n	8006278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01b      	beq.n	8006278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0208 	mvn.w	r2, #8
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2204      	movs	r2, #4
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8e5 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8d7 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f8e8 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b00      	cmp	r3, #0
 8006280:	d020      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01b      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0210 	mvn.w	r2, #16
 8006294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2208      	movs	r2, #8
 800629a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8bf 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8b1 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8c2 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0201 	mvn.w	r2, #1
 80062e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fa fd0e 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00c      	beq.n	8006316 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f9bb 	bl	800668c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00c      	beq.n	800633a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9b3 	bl	80066a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f87c 	bl	8006456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f06f 0220 	mvn.w	r2, #32
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f97b 	bl	8006678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f987 	bl	80066b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f97f 	bl	80066c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f977 	bl	80066dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f96f 	bl	80066f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a6e      	ldr	r2, [pc, #440]	@ (8006638 <TIM_Base_SetConfig+0x1cc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d02b      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a6d      	ldr	r2, [pc, #436]	@ (800663c <TIM_Base_SetConfig+0x1d0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d027      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d023      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800649a:	d01f      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a68      	ldr	r2, [pc, #416]	@ (8006640 <TIM_Base_SetConfig+0x1d4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d01b      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a67      	ldr	r2, [pc, #412]	@ (8006644 <TIM_Base_SetConfig+0x1d8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d017      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a66      	ldr	r2, [pc, #408]	@ (8006648 <TIM_Base_SetConfig+0x1dc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a65      	ldr	r2, [pc, #404]	@ (800664c <TIM_Base_SetConfig+0x1e0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00f      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a64      	ldr	r2, [pc, #400]	@ (8006650 <TIM_Base_SetConfig+0x1e4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a63      	ldr	r2, [pc, #396]	@ (8006654 <TIM_Base_SetConfig+0x1e8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a62      	ldr	r2, [pc, #392]	@ (8006658 <TIM_Base_SetConfig+0x1ec>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x70>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a61      	ldr	r2, [pc, #388]	@ (800665c <TIM_Base_SetConfig+0x1f0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a51      	ldr	r2, [pc, #324]	@ (8006638 <TIM_Base_SetConfig+0x1cc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d043      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a50      	ldr	r2, [pc, #320]	@ (800663c <TIM_Base_SetConfig+0x1d0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03f      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006504:	d03b      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800650c:	d037      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a4b      	ldr	r2, [pc, #300]	@ (8006640 <TIM_Base_SetConfig+0x1d4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d033      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a4a      	ldr	r2, [pc, #296]	@ (8006644 <TIM_Base_SetConfig+0x1d8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02f      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a49      	ldr	r2, [pc, #292]	@ (8006648 <TIM_Base_SetConfig+0x1dc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02b      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a48      	ldr	r2, [pc, #288]	@ (800664c <TIM_Base_SetConfig+0x1e0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d027      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a47      	ldr	r2, [pc, #284]	@ (8006650 <TIM_Base_SetConfig+0x1e4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d023      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a46      	ldr	r2, [pc, #280]	@ (8006654 <TIM_Base_SetConfig+0x1e8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01f      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a45      	ldr	r2, [pc, #276]	@ (8006658 <TIM_Base_SetConfig+0x1ec>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a44      	ldr	r2, [pc, #272]	@ (800665c <TIM_Base_SetConfig+0x1f0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d017      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a43      	ldr	r2, [pc, #268]	@ (8006660 <TIM_Base_SetConfig+0x1f4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a42      	ldr	r2, [pc, #264]	@ (8006664 <TIM_Base_SetConfig+0x1f8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a41      	ldr	r2, [pc, #260]	@ (8006668 <TIM_Base_SetConfig+0x1fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a40      	ldr	r2, [pc, #256]	@ (800666c <TIM_Base_SetConfig+0x200>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a3f      	ldr	r2, [pc, #252]	@ (8006670 <TIM_Base_SetConfig+0x204>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0x112>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a3e      	ldr	r2, [pc, #248]	@ (8006674 <TIM_Base_SetConfig+0x208>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a20      	ldr	r2, [pc, #128]	@ (8006638 <TIM_Base_SetConfig+0x1cc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d023      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1f      	ldr	r2, [pc, #124]	@ (800663c <TIM_Base_SetConfig+0x1d0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d01f      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a24      	ldr	r2, [pc, #144]	@ (8006658 <TIM_Base_SetConfig+0x1ec>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01b      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a23      	ldr	r2, [pc, #140]	@ (800665c <TIM_Base_SetConfig+0x1f0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d017      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a22      	ldr	r2, [pc, #136]	@ (8006660 <TIM_Base_SetConfig+0x1f4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a21      	ldr	r2, [pc, #132]	@ (8006664 <TIM_Base_SetConfig+0x1f8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00f      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a20      	ldr	r2, [pc, #128]	@ (8006668 <TIM_Base_SetConfig+0x1fc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <TIM_Base_SetConfig+0x200>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006670 <TIM_Base_SetConfig+0x204>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_Base_SetConfig+0x198>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006674 <TIM_Base_SetConfig+0x208>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d103      	bne.n	800660c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d105      	bne.n	800662a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	611a      	str	r2, [r3, #16]
  }
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40012c00 	.word	0x40012c00
 800663c:	50012c00 	.word	0x50012c00
 8006640:	40000400 	.word	0x40000400
 8006644:	50000400 	.word	0x50000400
 8006648:	40000800 	.word	0x40000800
 800664c:	50000800 	.word	0x50000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	50000c00 	.word	0x50000c00
 8006658:	40013400 	.word	0x40013400
 800665c:	50013400 	.word	0x50013400
 8006660:	40014000 	.word	0x40014000
 8006664:	50014000 	.word	0x50014000
 8006668:	40014400 	.word	0x40014400
 800666c:	50014400 	.word	0x50014400
 8006670:	40014800 	.word	0x40014800
 8006674:	50014800 	.word	0x50014800

08006678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <memset>:
 8006704:	4402      	add	r2, r0
 8006706:	4603      	mov	r3, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	f803 1b01 	strb.w	r1, [r3], #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x38>)
 8006718:	2600      	movs	r6, #0
 800671a:	4c0d      	ldr	r4, [pc, #52]	@ (8006750 <__libc_init_array+0x3c>)
 800671c:	1b64      	subs	r4, r4, r5
 800671e:	10a4      	asrs	r4, r4, #2
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	@ (8006754 <__libc_init_array+0x40>)
 8006726:	2600      	movs	r6, #0
 8006728:	4c0b      	ldr	r4, [pc, #44]	@ (8006758 <__libc_init_array+0x44>)
 800672a:	f000 f817 	bl	800675c <_init>
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	3601      	adds	r6, #1
 800673e:	4798      	blx	r3
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	3601      	adds	r6, #1
 8006748:	4798      	blx	r3
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	0800684c 	.word	0x0800684c
 8006750:	0800684c 	.word	0x0800684c
 8006754:	0800684c 	.word	0x0800684c
 8006758:	08006850 	.word	0x08006850

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
